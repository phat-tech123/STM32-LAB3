
stm32_lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fcc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080030d8  080030d8  000130d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030fc  080030fc  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  080030fc  080030fc  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030fc  080030fc  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030fc  080030fc  000130fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003100  08003100  00013100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08003104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000030  08003134  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08003134  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009cf8  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d59  00000000  00000000  00029d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002bab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002c558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017414  00000000  00000000  0002ced0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d326  00000000  00000000  000442e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082572  00000000  00000000  0005160a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3b7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f4  00000000  00000000  000d3bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	080030c0 	.word	0x080030c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	080030c0 	.word	0x080030c0

0800014c <getKeyInput>:
void getKeyInput1();
void getKeyInput2();
void getKeyInput3();


void getKeyInput(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int i=0; i<3; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e011      	b.n	800017c <getKeyInput+0x30>
		if(i == 0){
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	2b00      	cmp	r3, #0
 800015c:	d101      	bne.n	8000162 <getKeyInput+0x16>
			getKeyInput1();
 800015e:	f000 f815 	bl	800018c <getKeyInput1>
		}
		if(i == 1){
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2b01      	cmp	r3, #1
 8000166:	d101      	bne.n	800016c <getKeyInput+0x20>
			getKeyInput2();
 8000168:	f000 f880 	bl	800026c <getKeyInput2>
		}
		if(i == 2){
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2b02      	cmp	r3, #2
 8000170:	d101      	bne.n	8000176 <getKeyInput+0x2a>
			getKeyInput3();
 8000172:	f000 f8eb 	bl	800034c <getKeyInput3>
	for(int i=0; i<3; i++){
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	3301      	adds	r3, #1
 800017a:	607b      	str	r3, [r7, #4]
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b02      	cmp	r3, #2
 8000180:	ddea      	ble.n	8000158 <getKeyInput+0xc>
		}
	}
}
 8000182:	bf00      	nop
 8000184:	bf00      	nop
 8000186:	3708      	adds	r7, #8
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}

0800018c <getKeyInput1>:


void getKeyInput1() {
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
    // BUTTON 1
    switch(pressType[0]) {
 8000190:	4b32      	ldr	r3, [pc, #200]	; (800025c <getKeyInput1+0xd0>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	2b04      	cmp	r3, #4
 8000196:	d85a      	bhi.n	800024e <getKeyInput1+0xc2>
 8000198:	a201      	add	r2, pc, #4	; (adr r2, 80001a0 <getKeyInput1+0x14>)
 800019a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800019e:	bf00      	nop
 80001a0:	080001b5 	.word	0x080001b5
 80001a4:	080001cd 	.word	0x080001cd
 80001a8:	080001ed 	.word	0x080001ed
 80001ac:	0800024f 	.word	0x0800024f
 80001b0:	08000219 	.word	0x08000219
    case ZERO:
        if (HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin) == NORMAL_STATE) {
 80001b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001b8:	4829      	ldr	r0, [pc, #164]	; (8000260 <getKeyInput1+0xd4>)
 80001ba:	f001 ff55 	bl	8002068 <HAL_GPIO_ReadPin>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d046      	beq.n	8000252 <getKeyInput1+0xc6>
            return;
        }
        pressType[0] = PRESS_RELEASE_1;
 80001c4:	4b25      	ldr	r3, [pc, #148]	; (800025c <getKeyInput1+0xd0>)
 80001c6:	2201      	movs	r2, #1
 80001c8:	601a      	str	r2, [r3, #0]
        break;
 80001ca:	e045      	b.n	8000258 <getKeyInput1+0xcc>
    case PRESS_RELEASE_1:
        if (HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin) == NORMAL_STATE) {
 80001cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d0:	4823      	ldr	r0, [pc, #140]	; (8000260 <getKeyInput1+0xd4>)
 80001d2:	f001 ff49 	bl	8002068 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b01      	cmp	r3, #1
 80001da:	d103      	bne.n	80001e4 <getKeyInput1+0x58>
            pressType[0] = ZERO;
 80001dc:	4b1f      	ldr	r3, [pc, #124]	; (800025c <getKeyInput1+0xd0>)
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
            return;
 80001e2:	e039      	b.n	8000258 <getKeyInput1+0xcc>
        }
        pressType[0] = PRESS_RELEASE_2;
 80001e4:	4b1d      	ldr	r3, [pc, #116]	; (800025c <getKeyInput1+0xd0>)
 80001e6:	2202      	movs	r2, #2
 80001e8:	601a      	str	r2, [r3, #0]
        break;
 80001ea:	e035      	b.n	8000258 <getKeyInput1+0xcc>
    case PRESS_RELEASE_2:
        if (HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin) == NORMAL_STATE) {
 80001ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f0:	481b      	ldr	r0, [pc, #108]	; (8000260 <getKeyInput1+0xd4>)
 80001f2:	f001 ff39 	bl	8002068 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d103      	bne.n	8000204 <getKeyInput1+0x78>
            pressType[0] = ZERO;
 80001fc:	4b17      	ldr	r3, [pc, #92]	; (800025c <getKeyInput1+0xd0>)
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
            return;
 8000202:	e029      	b.n	8000258 <getKeyInput1+0xcc>
        }
        button_flag[0] = 1;
 8000204:	4b17      	ldr	r3, [pc, #92]	; (8000264 <getKeyInput1+0xd8>)
 8000206:	2201      	movs	r2, #1
 8000208:	601a      	str	r2, [r3, #0]
        pressType[0] = PRESS_OVER;
 800020a:	4b14      	ldr	r3, [pc, #80]	; (800025c <getKeyInput1+0xd0>)
 800020c:	2204      	movs	r2, #4
 800020e:	601a      	str	r2, [r3, #0]
        TimeOutForKeyPress[0] = 200;
 8000210:	4b15      	ldr	r3, [pc, #84]	; (8000268 <getKeyInput1+0xdc>)
 8000212:	22c8      	movs	r2, #200	; 0xc8
 8000214:	601a      	str	r2, [r3, #0]
        break;
 8000216:	e01f      	b.n	8000258 <getKeyInput1+0xcc>
    case PRESS_OVER:
        --TimeOutForKeyPress[0];
 8000218:	4b13      	ldr	r3, [pc, #76]	; (8000268 <getKeyInput1+0xdc>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	3b01      	subs	r3, #1
 800021e:	4a12      	ldr	r2, [pc, #72]	; (8000268 <getKeyInput1+0xdc>)
 8000220:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress[0] == 0) {
 8000222:	4b11      	ldr	r3, [pc, #68]	; (8000268 <getKeyInput1+0xdc>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d105      	bne.n	8000236 <getKeyInput1+0xaa>
            TimeOutForKeyPress[0] = 200;
 800022a:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <getKeyInput1+0xdc>)
 800022c:	22c8      	movs	r2, #200	; 0xc8
 800022e:	601a      	str	r2, [r3, #0]
            button_flag[0] = 1;
 8000230:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <getKeyInput1+0xd8>)
 8000232:	2201      	movs	r2, #1
 8000234:	601a      	str	r2, [r3, #0]
        }
        if (HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin) == NORMAL_STATE) {
 8000236:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800023a:	4809      	ldr	r0, [pc, #36]	; (8000260 <getKeyInput1+0xd4>)
 800023c:	f001 ff14 	bl	8002068 <HAL_GPIO_ReadPin>
 8000240:	4603      	mov	r3, r0
 8000242:	2b01      	cmp	r3, #1
 8000244:	d107      	bne.n	8000256 <getKeyInput1+0xca>
            pressType[0] = ZERO;
 8000246:	4b05      	ldr	r3, [pc, #20]	; (800025c <getKeyInput1+0xd0>)
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
        }
        break;
 800024c:	e003      	b.n	8000256 <getKeyInput1+0xca>
    default:
        break;
 800024e:	bf00      	nop
 8000250:	e002      	b.n	8000258 <getKeyInput1+0xcc>
            return;
 8000252:	bf00      	nop
 8000254:	e000      	b.n	8000258 <getKeyInput1+0xcc>
        break;
 8000256:	bf00      	nop
    }
}
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000058 	.word	0x20000058
 8000260:	40011000 	.word	0x40011000
 8000264:	2000004c 	.word	0x2000004c
 8000268:	20000000 	.word	0x20000000

0800026c <getKeyInput2>:

void getKeyInput2(){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
    // BUTTON 2
    switch(pressType[1]) {
 8000270:	4b32      	ldr	r3, [pc, #200]	; (800033c <getKeyInput2+0xd0>)
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	2b04      	cmp	r3, #4
 8000276:	d85a      	bhi.n	800032e <getKeyInput2+0xc2>
 8000278:	a201      	add	r2, pc, #4	; (adr r2, 8000280 <getKeyInput2+0x14>)
 800027a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800027e:	bf00      	nop
 8000280:	08000295 	.word	0x08000295
 8000284:	080002ad 	.word	0x080002ad
 8000288:	080002cd 	.word	0x080002cd
 800028c:	0800032f 	.word	0x0800032f
 8000290:	080002f9 	.word	0x080002f9
    case ZERO:
        if (HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin) == NORMAL_STATE) {
 8000294:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000298:	4829      	ldr	r0, [pc, #164]	; (8000340 <getKeyInput2+0xd4>)
 800029a:	f001 fee5 	bl	8002068 <HAL_GPIO_ReadPin>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d046      	beq.n	8000332 <getKeyInput2+0xc6>
            return;
        }
        pressType[1] = PRESS_RELEASE_1;
 80002a4:	4b25      	ldr	r3, [pc, #148]	; (800033c <getKeyInput2+0xd0>)
 80002a6:	2201      	movs	r2, #1
 80002a8:	605a      	str	r2, [r3, #4]
        break;
 80002aa:	e045      	b.n	8000338 <getKeyInput2+0xcc>
    case PRESS_RELEASE_1:
        if (HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin) == NORMAL_STATE) {
 80002ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002b0:	4823      	ldr	r0, [pc, #140]	; (8000340 <getKeyInput2+0xd4>)
 80002b2:	f001 fed9 	bl	8002068 <HAL_GPIO_ReadPin>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d103      	bne.n	80002c4 <getKeyInput2+0x58>
            pressType[1] = ZERO;
 80002bc:	4b1f      	ldr	r3, [pc, #124]	; (800033c <getKeyInput2+0xd0>)
 80002be:	2200      	movs	r2, #0
 80002c0:	605a      	str	r2, [r3, #4]
            return;
 80002c2:	e039      	b.n	8000338 <getKeyInput2+0xcc>
        }
        pressType[1] = PRESS_RELEASE_2;
 80002c4:	4b1d      	ldr	r3, [pc, #116]	; (800033c <getKeyInput2+0xd0>)
 80002c6:	2202      	movs	r2, #2
 80002c8:	605a      	str	r2, [r3, #4]
        break;
 80002ca:	e035      	b.n	8000338 <getKeyInput2+0xcc>
    case PRESS_RELEASE_2:
        if (HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin) == NORMAL_STATE) {
 80002cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002d0:	481b      	ldr	r0, [pc, #108]	; (8000340 <getKeyInput2+0xd4>)
 80002d2:	f001 fec9 	bl	8002068 <HAL_GPIO_ReadPin>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d103      	bne.n	80002e4 <getKeyInput2+0x78>
            pressType[1] = ZERO;
 80002dc:	4b17      	ldr	r3, [pc, #92]	; (800033c <getKeyInput2+0xd0>)
 80002de:	2200      	movs	r2, #0
 80002e0:	605a      	str	r2, [r3, #4]
            return;
 80002e2:	e029      	b.n	8000338 <getKeyInput2+0xcc>
        }
        button_flag[1] = 1;
 80002e4:	4b17      	ldr	r3, [pc, #92]	; (8000344 <getKeyInput2+0xd8>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	605a      	str	r2, [r3, #4]
        pressType[1] = PRESS_OVER;
 80002ea:	4b14      	ldr	r3, [pc, #80]	; (800033c <getKeyInput2+0xd0>)
 80002ec:	2204      	movs	r2, #4
 80002ee:	605a      	str	r2, [r3, #4]
        TimeOutForKeyPress[1] = 200;
 80002f0:	4b15      	ldr	r3, [pc, #84]	; (8000348 <getKeyInput2+0xdc>)
 80002f2:	22c8      	movs	r2, #200	; 0xc8
 80002f4:	605a      	str	r2, [r3, #4]
        break;
 80002f6:	e01f      	b.n	8000338 <getKeyInput2+0xcc>
    case PRESS_OVER:
        --TimeOutForKeyPress[1];
 80002f8:	4b13      	ldr	r3, [pc, #76]	; (8000348 <getKeyInput2+0xdc>)
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	3b01      	subs	r3, #1
 80002fe:	4a12      	ldr	r2, [pc, #72]	; (8000348 <getKeyInput2+0xdc>)
 8000300:	6053      	str	r3, [r2, #4]
        if (TimeOutForKeyPress[1] == 0) {
 8000302:	4b11      	ldr	r3, [pc, #68]	; (8000348 <getKeyInput2+0xdc>)
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d105      	bne.n	8000316 <getKeyInput2+0xaa>
            TimeOutForKeyPress[1] = 200;
 800030a:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <getKeyInput2+0xdc>)
 800030c:	22c8      	movs	r2, #200	; 0xc8
 800030e:	605a      	str	r2, [r3, #4]
            button_flag[1] = 1;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <getKeyInput2+0xd8>)
 8000312:	2201      	movs	r2, #1
 8000314:	605a      	str	r2, [r3, #4]
        }
        if (HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin) == NORMAL_STATE) {
 8000316:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800031a:	4809      	ldr	r0, [pc, #36]	; (8000340 <getKeyInput2+0xd4>)
 800031c:	f001 fea4 	bl	8002068 <HAL_GPIO_ReadPin>
 8000320:	4603      	mov	r3, r0
 8000322:	2b01      	cmp	r3, #1
 8000324:	d107      	bne.n	8000336 <getKeyInput2+0xca>
            pressType[1] = ZERO;
 8000326:	4b05      	ldr	r3, [pc, #20]	; (800033c <getKeyInput2+0xd0>)
 8000328:	2200      	movs	r2, #0
 800032a:	605a      	str	r2, [r3, #4]
        }
        break;
 800032c:	e003      	b.n	8000336 <getKeyInput2+0xca>
    default:
        break;
 800032e:	bf00      	nop
 8000330:	e002      	b.n	8000338 <getKeyInput2+0xcc>
            return;
 8000332:	bf00      	nop
 8000334:	e000      	b.n	8000338 <getKeyInput2+0xcc>
        break;
 8000336:	bf00      	nop
    }
}
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000058 	.word	0x20000058
 8000340:	40011000 	.word	0x40011000
 8000344:	2000004c 	.word	0x2000004c
 8000348:	20000000 	.word	0x20000000

0800034c <getKeyInput3>:

void getKeyInput3(){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
    // BUTTON 3
    switch(pressType[2]) {
 8000350:	4b32      	ldr	r3, [pc, #200]	; (800041c <getKeyInput3+0xd0>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	2b04      	cmp	r3, #4
 8000356:	d85a      	bhi.n	800040e <getKeyInput3+0xc2>
 8000358:	a201      	add	r2, pc, #4	; (adr r2, 8000360 <getKeyInput3+0x14>)
 800035a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800035e:	bf00      	nop
 8000360:	08000375 	.word	0x08000375
 8000364:	0800038d 	.word	0x0800038d
 8000368:	080003ad 	.word	0x080003ad
 800036c:	0800040f 	.word	0x0800040f
 8000370:	080003d9 	.word	0x080003d9
    case ZERO:
        if (HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin) == NORMAL_STATE) {
 8000374:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000378:	4829      	ldr	r0, [pc, #164]	; (8000420 <getKeyInput3+0xd4>)
 800037a:	f001 fe75 	bl	8002068 <HAL_GPIO_ReadPin>
 800037e:	4603      	mov	r3, r0
 8000380:	2b01      	cmp	r3, #1
 8000382:	d046      	beq.n	8000412 <getKeyInput3+0xc6>
            return;
        }
        pressType[2] = PRESS_RELEASE_1;
 8000384:	4b25      	ldr	r3, [pc, #148]	; (800041c <getKeyInput3+0xd0>)
 8000386:	2201      	movs	r2, #1
 8000388:	609a      	str	r2, [r3, #8]
        break;
 800038a:	e045      	b.n	8000418 <getKeyInput3+0xcc>
    case PRESS_RELEASE_1:
        if (HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin) == NORMAL_STATE) {
 800038c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000390:	4823      	ldr	r0, [pc, #140]	; (8000420 <getKeyInput3+0xd4>)
 8000392:	f001 fe69 	bl	8002068 <HAL_GPIO_ReadPin>
 8000396:	4603      	mov	r3, r0
 8000398:	2b01      	cmp	r3, #1
 800039a:	d103      	bne.n	80003a4 <getKeyInput3+0x58>
            pressType[2] = ZERO;
 800039c:	4b1f      	ldr	r3, [pc, #124]	; (800041c <getKeyInput3+0xd0>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
            return;
 80003a2:	e039      	b.n	8000418 <getKeyInput3+0xcc>
        }
        pressType[2] = PRESS_RELEASE_2;
 80003a4:	4b1d      	ldr	r3, [pc, #116]	; (800041c <getKeyInput3+0xd0>)
 80003a6:	2202      	movs	r2, #2
 80003a8:	609a      	str	r2, [r3, #8]
        break;
 80003aa:	e035      	b.n	8000418 <getKeyInput3+0xcc>
    case PRESS_RELEASE_2:
        if (HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin) == NORMAL_STATE) {
 80003ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003b0:	481b      	ldr	r0, [pc, #108]	; (8000420 <getKeyInput3+0xd4>)
 80003b2:	f001 fe59 	bl	8002068 <HAL_GPIO_ReadPin>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d103      	bne.n	80003c4 <getKeyInput3+0x78>
            pressType[2] = ZERO;
 80003bc:	4b17      	ldr	r3, [pc, #92]	; (800041c <getKeyInput3+0xd0>)
 80003be:	2200      	movs	r2, #0
 80003c0:	609a      	str	r2, [r3, #8]
            return;
 80003c2:	e029      	b.n	8000418 <getKeyInput3+0xcc>
        }
        button_flag[2] = 1;
 80003c4:	4b17      	ldr	r3, [pc, #92]	; (8000424 <getKeyInput3+0xd8>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	609a      	str	r2, [r3, #8]
        pressType[2] = PRESS_OVER;
 80003ca:	4b14      	ldr	r3, [pc, #80]	; (800041c <getKeyInput3+0xd0>)
 80003cc:	2204      	movs	r2, #4
 80003ce:	609a      	str	r2, [r3, #8]
        TimeOutForKeyPress[2] = 200;
 80003d0:	4b15      	ldr	r3, [pc, #84]	; (8000428 <getKeyInput3+0xdc>)
 80003d2:	22c8      	movs	r2, #200	; 0xc8
 80003d4:	609a      	str	r2, [r3, #8]
        break;
 80003d6:	e01f      	b.n	8000418 <getKeyInput3+0xcc>
    case PRESS_OVER:
        --TimeOutForKeyPress[2];
 80003d8:	4b13      	ldr	r3, [pc, #76]	; (8000428 <getKeyInput3+0xdc>)
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	3b01      	subs	r3, #1
 80003de:	4a12      	ldr	r2, [pc, #72]	; (8000428 <getKeyInput3+0xdc>)
 80003e0:	6093      	str	r3, [r2, #8]
        if (TimeOutForKeyPress[2] == 0) {
 80003e2:	4b11      	ldr	r3, [pc, #68]	; (8000428 <getKeyInput3+0xdc>)
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d105      	bne.n	80003f6 <getKeyInput3+0xaa>
            TimeOutForKeyPress[2] = 200;
 80003ea:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <getKeyInput3+0xdc>)
 80003ec:	22c8      	movs	r2, #200	; 0xc8
 80003ee:	609a      	str	r2, [r3, #8]
            button_flag[2] = 1;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <getKeyInput3+0xd8>)
 80003f2:	2201      	movs	r2, #1
 80003f4:	609a      	str	r2, [r3, #8]
        }
        if (HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin) == NORMAL_STATE) {
 80003f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003fa:	4809      	ldr	r0, [pc, #36]	; (8000420 <getKeyInput3+0xd4>)
 80003fc:	f001 fe34 	bl	8002068 <HAL_GPIO_ReadPin>
 8000400:	4603      	mov	r3, r0
 8000402:	2b01      	cmp	r3, #1
 8000404:	d107      	bne.n	8000416 <getKeyInput3+0xca>
            pressType[2] = ZERO;
 8000406:	4b05      	ldr	r3, [pc, #20]	; (800041c <getKeyInput3+0xd0>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
        }
        break;
 800040c:	e003      	b.n	8000416 <getKeyInput3+0xca>
    default:
        break;
 800040e:	bf00      	nop
 8000410:	e002      	b.n	8000418 <getKeyInput3+0xcc>
            return;
 8000412:	bf00      	nop
 8000414:	e000      	b.n	8000418 <getKeyInput3+0xcc>
        break;
 8000416:	bf00      	nop
    }
}
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000058 	.word	0x20000058
 8000420:	40011000 	.word	0x40011000
 8000424:	2000004c 	.word	0x2000004c
 8000428:	20000000 	.word	0x20000000

0800042c <fsm_automatic_run>:
 */

#include "fsm_automatic.h"

int status = INIT;
void fsm_automatic_run(){
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	switch(status){
 8000430:	4b7e      	ldr	r3, [pc, #504]	; (800062c <fsm_automatic_run+0x200>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	2b04      	cmp	r3, #4
 8000436:	f200 81d9 	bhi.w	80007ec <fsm_automatic_run+0x3c0>
 800043a:	a201      	add	r2, pc, #4	; (adr r2, 8000440 <fsm_automatic_run+0x14>)
 800043c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000440:	08000455 	.word	0x08000455
 8000444:	0800047f 	.word	0x0800047f
 8000448:	08000559 	.word	0x08000559
 800044c:	08000651 	.word	0x08000651
 8000450:	08000729 	.word	0x08000729
	case INIT:
		status = RED1_GREEN;
 8000454:	4b75      	ldr	r3, [pc, #468]	; (800062c <fsm_automatic_run+0x200>)
 8000456:	2201      	movs	r2, #1
 8000458:	601a      	str	r2, [r3, #0]
		setTimer(1, 3000);
 800045a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800045e:	2001      	movs	r0, #1
 8000460:	f001 f93c 	bl	80016dc <setTimer>
		setTimer(2, 1000);
 8000464:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000468:	2002      	movs	r0, #2
 800046a:	f001 f937 	bl	80016dc <setTimer>
		setTimer(3, 250);
 800046e:	21fa      	movs	r1, #250	; 0xfa
 8000470:	2003      	movs	r0, #3
 8000472:	f001 f933 	bl	80016dc <setTimer>
		New = 1;
 8000476:	4b6e      	ldr	r3, [pc, #440]	; (8000630 <fsm_automatic_run+0x204>)
 8000478:	2201      	movs	r2, #1
 800047a:	601a      	str	r2, [r3, #0]
		break;
 800047c:	e1bf      	b.n	80007fe <fsm_automatic_run+0x3d2>
	case RED1_GREEN:
		//When just turn status
		if(New == 1){
 800047e:	4b6c      	ldr	r3, [pc, #432]	; (8000630 <fsm_automatic_run+0x204>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d110      	bne.n	80004a8 <fsm_automatic_run+0x7c>
			turn_red();
 8000486:	f001 fa01 	bl	800188c <turn_red>
			turn_green_2();
 800048a:	f001 fa59 	bl	8001940 <turn_green_2>
			led_buffer[1] = red_time - 1;
 800048e:	4b69      	ldr	r3, [pc, #420]	; (8000634 <fsm_automatic_run+0x208>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	3b01      	subs	r3, #1
 8000494:	4a68      	ldr	r2, [pc, #416]	; (8000638 <fsm_automatic_run+0x20c>)
 8000496:	6053      	str	r3, [r2, #4]
			led_buffer[3] = green_time -1;
 8000498:	4b68      	ldr	r3, [pc, #416]	; (800063c <fsm_automatic_run+0x210>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	3b01      	subs	r3, #1
 800049e:	4a66      	ldr	r2, [pc, #408]	; (8000638 <fsm_automatic_run+0x20c>)
 80004a0:	60d3      	str	r3, [r2, #12]
			New = 0;
 80004a2:	4b63      	ldr	r3, [pc, #396]	; (8000630 <fsm_automatic_run+0x204>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
		}

		//COUNTDOWN TRAFFIC LIGHTS
		if(timer_flag[1] == 1){
 80004a8:	4b65      	ldr	r3, [pc, #404]	; (8000640 <fsm_automatic_run+0x214>)
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d10d      	bne.n	80004cc <fsm_automatic_run+0xa0>
			led_buffer[3] = 1;
 80004b0:	4b61      	ldr	r3, [pc, #388]	; (8000638 <fsm_automatic_run+0x20c>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	60da      	str	r2, [r3, #12]
			status = RED1_YELLOW;
 80004b6:	4b5d      	ldr	r3, [pc, #372]	; (800062c <fsm_automatic_run+0x200>)
 80004b8:	2202      	movs	r2, #2
 80004ba:	601a      	str	r2, [r3, #0]
			New = 1;
 80004bc:	4b5c      	ldr	r3, [pc, #368]	; (8000630 <fsm_automatic_run+0x204>)
 80004be:	2201      	movs	r2, #1
 80004c0:	601a      	str	r2, [r3, #0]
			setTimer(1, 2000);
 80004c2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80004c6:	2001      	movs	r0, #1
 80004c8:	f001 f908 	bl	80016dc <setTimer>
		}

		//7-SEGMENT LEDS
		if(idx == 4){
 80004cc:	4b5d      	ldr	r3, [pc, #372]	; (8000644 <fsm_automatic_run+0x218>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b04      	cmp	r3, #4
 80004d2:	d102      	bne.n	80004da <fsm_automatic_run+0xae>
			idx = 0;
 80004d4:	4b5b      	ldr	r3, [pc, #364]	; (8000644 <fsm_automatic_run+0x218>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[3] == 1){
 80004da:	4b59      	ldr	r3, [pc, #356]	; (8000640 <fsm_automatic_run+0x214>)
 80004dc:	68db      	ldr	r3, [r3, #12]
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d10b      	bne.n	80004fa <fsm_automatic_run+0xce>
			update7SEG(idx++);
 80004e2:	4b58      	ldr	r3, [pc, #352]	; (8000644 <fsm_automatic_run+0x218>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	1c5a      	adds	r2, r3, #1
 80004e8:	4956      	ldr	r1, [pc, #344]	; (8000644 <fsm_automatic_run+0x218>)
 80004ea:	600a      	str	r2, [r1, #0]
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 ffc1 	bl	8001474 <update7SEG>
			setTimer(3,250);
 80004f2:	21fa      	movs	r1, #250	; 0xfa
 80004f4:	2003      	movs	r0, #3
 80004f6:	f001 f8f1 	bl	80016dc <setTimer>
		}
		if(timer_flag[2] == 1){
 80004fa:	4b51      	ldr	r3, [pc, #324]	; (8000640 <fsm_automatic_run+0x214>)
 80004fc:	689b      	ldr	r3, [r3, #8]
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d10e      	bne.n	8000520 <fsm_automatic_run+0xf4>
			led_buffer[3]--;
 8000502:	4b4d      	ldr	r3, [pc, #308]	; (8000638 <fsm_automatic_run+0x20c>)
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	3b01      	subs	r3, #1
 8000508:	4a4b      	ldr	r2, [pc, #300]	; (8000638 <fsm_automatic_run+0x20c>)
 800050a:	60d3      	str	r3, [r2, #12]
			led_buffer[1]--;
 800050c:	4b4a      	ldr	r3, [pc, #296]	; (8000638 <fsm_automatic_run+0x20c>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	3b01      	subs	r3, #1
 8000512:	4a49      	ldr	r2, [pc, #292]	; (8000638 <fsm_automatic_run+0x20c>)
 8000514:	6053      	str	r3, [r2, #4]
			setTimer(2, 1000);
 8000516:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800051a:	2002      	movs	r0, #2
 800051c:	f001 f8de 	bl	80016dc <setTimer>
		}

		//SETTING TRAFFIC LIGHTS
		if(button_flag[0] == 1){
 8000520:	4b49      	ldr	r3, [pc, #292]	; (8000648 <fsm_automatic_run+0x21c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b01      	cmp	r3, #1
 8000526:	f040 8163 	bne.w	80007f0 <fsm_automatic_run+0x3c4>
			button_flag[0] = 0;
 800052a:	4b47      	ldr	r3, [pc, #284]	; (8000648 <fsm_automatic_run+0x21c>)
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
			New = 1;
 8000530:	4b3f      	ldr	r3, [pc, #252]	; (8000630 <fsm_automatic_run+0x204>)
 8000532:	2201      	movs	r2, #1
 8000534:	601a      	str	r2, [r3, #0]
			clearLed();
 8000536:	f000 ff7f 	bl	8001438 <clearLed>
			clear_light();
 800053a:	f001 fa31 	bl	80019a0 <clear_light>
			setTimer(3, 250);
 800053e:	21fa      	movs	r1, #250	; 0xfa
 8000540:	2003      	movs	r0, #3
 8000542:	f001 f8cb 	bl	80016dc <setTimer>
			setTimer(4, 500);
 8000546:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800054a:	2004      	movs	r0, #4
 800054c:	f001 f8c6 	bl	80016dc <setTimer>
			status = RED_SETTING;
 8000550:	4b36      	ldr	r3, [pc, #216]	; (800062c <fsm_automatic_run+0x200>)
 8000552:	2205      	movs	r2, #5
 8000554:	601a      	str	r2, [r3, #0]
		}
		break;
 8000556:	e14b      	b.n	80007f0 <fsm_automatic_run+0x3c4>
	case RED1_YELLOW:
		//When just turn status
		if(New == 1){
 8000558:	4b35      	ldr	r3, [pc, #212]	; (8000630 <fsm_automatic_run+0x204>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d109      	bne.n	8000574 <fsm_automatic_run+0x148>
			turn_yellow_2();
 8000560:	f001 fa06 	bl	8001970 <turn_yellow_2>
			led_buffer[3] = yellow_time - 1;
 8000564:	4b39      	ldr	r3, [pc, #228]	; (800064c <fsm_automatic_run+0x220>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	3b01      	subs	r3, #1
 800056a:	4a33      	ldr	r2, [pc, #204]	; (8000638 <fsm_automatic_run+0x20c>)
 800056c:	60d3      	str	r3, [r2, #12]
			New = 0;
 800056e:	4b30      	ldr	r3, [pc, #192]	; (8000630 <fsm_automatic_run+0x204>)
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
		}

		//COUNTDOWN TRAFFIC LIGHTS
		if(timer_flag[1] == 1){
 8000574:	4b32      	ldr	r3, [pc, #200]	; (8000640 <fsm_automatic_run+0x214>)
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d110      	bne.n	800059e <fsm_automatic_run+0x172>
			led_buffer[1] = 2;
 800057c:	4b2e      	ldr	r3, [pc, #184]	; (8000638 <fsm_automatic_run+0x20c>)
 800057e:	2202      	movs	r2, #2
 8000580:	605a      	str	r2, [r3, #4]
			led_buffer[3] = 4;
 8000582:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <fsm_automatic_run+0x20c>)
 8000584:	2204      	movs	r2, #4
 8000586:	60da      	str	r2, [r3, #12]
			status = RED2_GREEN;
 8000588:	4b28      	ldr	r3, [pc, #160]	; (800062c <fsm_automatic_run+0x200>)
 800058a:	2203      	movs	r2, #3
 800058c:	601a      	str	r2, [r3, #0]
			New = 1;
 800058e:	4b28      	ldr	r3, [pc, #160]	; (8000630 <fsm_automatic_run+0x204>)
 8000590:	2201      	movs	r2, #1
 8000592:	601a      	str	r2, [r3, #0]
			setTimer(1, 3000);
 8000594:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000598:	2001      	movs	r0, #1
 800059a:	f001 f89f 	bl	80016dc <setTimer>
		}

		//7-SEGMENT LEDS
		if(idx == 4){
 800059e:	4b29      	ldr	r3, [pc, #164]	; (8000644 <fsm_automatic_run+0x218>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b04      	cmp	r3, #4
 80005a4:	d102      	bne.n	80005ac <fsm_automatic_run+0x180>
			idx = 0;
 80005a6:	4b27      	ldr	r3, [pc, #156]	; (8000644 <fsm_automatic_run+0x218>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[3] == 1){
 80005ac:	4b24      	ldr	r3, [pc, #144]	; (8000640 <fsm_automatic_run+0x214>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d10b      	bne.n	80005cc <fsm_automatic_run+0x1a0>
			update7SEG(idx++);
 80005b4:	4b23      	ldr	r3, [pc, #140]	; (8000644 <fsm_automatic_run+0x218>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	1c5a      	adds	r2, r3, #1
 80005ba:	4922      	ldr	r1, [pc, #136]	; (8000644 <fsm_automatic_run+0x218>)
 80005bc:	600a      	str	r2, [r1, #0]
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 ff58 	bl	8001474 <update7SEG>
			setTimer(3,250);
 80005c4:	21fa      	movs	r1, #250	; 0xfa
 80005c6:	2003      	movs	r0, #3
 80005c8:	f001 f888 	bl	80016dc <setTimer>
		}
		if(timer_flag[2] == 1){
 80005cc:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <fsm_automatic_run+0x214>)
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d10e      	bne.n	80005f2 <fsm_automatic_run+0x1c6>
			led_buffer[3]--;
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <fsm_automatic_run+0x20c>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	3b01      	subs	r3, #1
 80005da:	4a17      	ldr	r2, [pc, #92]	; (8000638 <fsm_automatic_run+0x20c>)
 80005dc:	60d3      	str	r3, [r2, #12]
			led_buffer[1]--;
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <fsm_automatic_run+0x20c>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	3b01      	subs	r3, #1
 80005e4:	4a14      	ldr	r2, [pc, #80]	; (8000638 <fsm_automatic_run+0x20c>)
 80005e6:	6053      	str	r3, [r2, #4]
			setTimer(2, 1000);
 80005e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005ec:	2002      	movs	r0, #2
 80005ee:	f001 f875 	bl	80016dc <setTimer>
		}

		//SETTING TRAFFIC LIGHTS
		if(button_flag[0] == 1){
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <fsm_automatic_run+0x21c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	f040 80fc 	bne.w	80007f4 <fsm_automatic_run+0x3c8>
			button_flag[0] = 0;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <fsm_automatic_run+0x21c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
			New = 1;
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <fsm_automatic_run+0x204>)
 8000604:	2201      	movs	r2, #1
 8000606:	601a      	str	r2, [r3, #0]
			clearLed();
 8000608:	f000 ff16 	bl	8001438 <clearLed>
			clear_light();
 800060c:	f001 f9c8 	bl	80019a0 <clear_light>
			setTimer(3, 250);
 8000610:	21fa      	movs	r1, #250	; 0xfa
 8000612:	2003      	movs	r0, #3
 8000614:	f001 f862 	bl	80016dc <setTimer>
			setTimer(4, 500);
 8000618:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800061c:	2004      	movs	r0, #4
 800061e:	f001 f85d 	bl	80016dc <setTimer>
			status = RED_SETTING;
 8000622:	4b02      	ldr	r3, [pc, #8]	; (800062c <fsm_automatic_run+0x200>)
 8000624:	2205      	movs	r2, #5
 8000626:	601a      	str	r2, [r3, #0]
		}
		break;
 8000628:	e0e4      	b.n	80007f4 <fsm_automatic_run+0x3c8>
 800062a:	bf00      	nop
 800062c:	20000064 	.word	0x20000064
 8000630:	2000006c 	.word	0x2000006c
 8000634:	2000000c 	.word	0x2000000c
 8000638:	20000070 	.word	0x20000070
 800063c:	20000014 	.word	0x20000014
 8000640:	200000a8 	.word	0x200000a8
 8000644:	20000068 	.word	0x20000068
 8000648:	2000004c 	.word	0x2000004c
 800064c:	20000010 	.word	0x20000010
	case RED2_GREEN:
		//When just turn status
		if(New == 1){
 8000650:	4b6c      	ldr	r3, [pc, #432]	; (8000804 <fsm_automatic_run+0x3d8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d110      	bne.n	800067a <fsm_automatic_run+0x24e>
			turn_red_2();
 8000658:	f001 f95a 	bl	8001910 <turn_red_2>
			turn_green();
 800065c:	f001 f92c 	bl	80018b8 <turn_green>
			led_buffer[3] = red_time - 1;
 8000660:	4b69      	ldr	r3, [pc, #420]	; (8000808 <fsm_automatic_run+0x3dc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	3b01      	subs	r3, #1
 8000666:	4a69      	ldr	r2, [pc, #420]	; (800080c <fsm_automatic_run+0x3e0>)
 8000668:	60d3      	str	r3, [r2, #12]
			led_buffer[1] = green_time -1;
 800066a:	4b69      	ldr	r3, [pc, #420]	; (8000810 <fsm_automatic_run+0x3e4>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	3b01      	subs	r3, #1
 8000670:	4a66      	ldr	r2, [pc, #408]	; (800080c <fsm_automatic_run+0x3e0>)
 8000672:	6053      	str	r3, [r2, #4]
			New = 0;
 8000674:	4b63      	ldr	r3, [pc, #396]	; (8000804 <fsm_automatic_run+0x3d8>)
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
		}

		//COUNTDOWN TRAFFIC LIGHTS
		if(timer_flag[1] == 1){
 800067a:	4b66      	ldr	r3, [pc, #408]	; (8000814 <fsm_automatic_run+0x3e8>)
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d10d      	bne.n	800069e <fsm_automatic_run+0x272>
			led_buffer[1] = 1;
 8000682:	4b62      	ldr	r3, [pc, #392]	; (800080c <fsm_automatic_run+0x3e0>)
 8000684:	2201      	movs	r2, #1
 8000686:	605a      	str	r2, [r3, #4]
			status = RED2_YELLOW;
 8000688:	4b63      	ldr	r3, [pc, #396]	; (8000818 <fsm_automatic_run+0x3ec>)
 800068a:	2204      	movs	r2, #4
 800068c:	601a      	str	r2, [r3, #0]
			New = 1;
 800068e:	4b5d      	ldr	r3, [pc, #372]	; (8000804 <fsm_automatic_run+0x3d8>)
 8000690:	2201      	movs	r2, #1
 8000692:	601a      	str	r2, [r3, #0]
			setTimer(1, 2000);
 8000694:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000698:	2001      	movs	r0, #1
 800069a:	f001 f81f 	bl	80016dc <setTimer>
		}

		//7-SEGMENT LEDS
		if(idx == 4){
 800069e:	4b5f      	ldr	r3, [pc, #380]	; (800081c <fsm_automatic_run+0x3f0>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b04      	cmp	r3, #4
 80006a4:	d102      	bne.n	80006ac <fsm_automatic_run+0x280>
			idx = 0;
 80006a6:	4b5d      	ldr	r3, [pc, #372]	; (800081c <fsm_automatic_run+0x3f0>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[3] == 1){
 80006ac:	4b59      	ldr	r3, [pc, #356]	; (8000814 <fsm_automatic_run+0x3e8>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d10b      	bne.n	80006cc <fsm_automatic_run+0x2a0>
			update7SEG(idx++);
 80006b4:	4b59      	ldr	r3, [pc, #356]	; (800081c <fsm_automatic_run+0x3f0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	1c5a      	adds	r2, r3, #1
 80006ba:	4958      	ldr	r1, [pc, #352]	; (800081c <fsm_automatic_run+0x3f0>)
 80006bc:	600a      	str	r2, [r1, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fed8 	bl	8001474 <update7SEG>
			setTimer(3,250);
 80006c4:	21fa      	movs	r1, #250	; 0xfa
 80006c6:	2003      	movs	r0, #3
 80006c8:	f001 f808 	bl	80016dc <setTimer>
		}
		if(timer_flag[2] == 1){
 80006cc:	4b51      	ldr	r3, [pc, #324]	; (8000814 <fsm_automatic_run+0x3e8>)
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d10e      	bne.n	80006f2 <fsm_automatic_run+0x2c6>
			led_buffer[3]--;
 80006d4:	4b4d      	ldr	r3, [pc, #308]	; (800080c <fsm_automatic_run+0x3e0>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	3b01      	subs	r3, #1
 80006da:	4a4c      	ldr	r2, [pc, #304]	; (800080c <fsm_automatic_run+0x3e0>)
 80006dc:	60d3      	str	r3, [r2, #12]
			led_buffer[1]--;
 80006de:	4b4b      	ldr	r3, [pc, #300]	; (800080c <fsm_automatic_run+0x3e0>)
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	4a49      	ldr	r2, [pc, #292]	; (800080c <fsm_automatic_run+0x3e0>)
 80006e6:	6053      	str	r3, [r2, #4]
			setTimer(2, 1000);
 80006e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006ec:	2002      	movs	r0, #2
 80006ee:	f000 fff5 	bl	80016dc <setTimer>
		}

		//SETTING TRAFFIC LIGHTS
		if(button_flag[0] == 1){
 80006f2:	4b4b      	ldr	r3, [pc, #300]	; (8000820 <fsm_automatic_run+0x3f4>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d17e      	bne.n	80007f8 <fsm_automatic_run+0x3cc>
			button_flag[0] = 0;
 80006fa:	4b49      	ldr	r3, [pc, #292]	; (8000820 <fsm_automatic_run+0x3f4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
			New = 1;
 8000700:	4b40      	ldr	r3, [pc, #256]	; (8000804 <fsm_automatic_run+0x3d8>)
 8000702:	2201      	movs	r2, #1
 8000704:	601a      	str	r2, [r3, #0]
			clearLed();
 8000706:	f000 fe97 	bl	8001438 <clearLed>
			clear_light();
 800070a:	f001 f949 	bl	80019a0 <clear_light>
			setTimer(3, 250);
 800070e:	21fa      	movs	r1, #250	; 0xfa
 8000710:	2003      	movs	r0, #3
 8000712:	f000 ffe3 	bl	80016dc <setTimer>
			setTimer(4, 500);
 8000716:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800071a:	2004      	movs	r0, #4
 800071c:	f000 ffde 	bl	80016dc <setTimer>
			status = RED_SETTING;
 8000720:	4b3d      	ldr	r3, [pc, #244]	; (8000818 <fsm_automatic_run+0x3ec>)
 8000722:	2205      	movs	r2, #5
 8000724:	601a      	str	r2, [r3, #0]
		}
		break;
 8000726:	e067      	b.n	80007f8 <fsm_automatic_run+0x3cc>
	case RED2_YELLOW:
		//When just turn status
		if(New == 1){
 8000728:	4b36      	ldr	r3, [pc, #216]	; (8000804 <fsm_automatic_run+0x3d8>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d109      	bne.n	8000744 <fsm_automatic_run+0x318>
			turn_yellow();
 8000730:	f001 f8d8 	bl	80018e4 <turn_yellow>
			led_buffer[1] = yellow_time - 1;
 8000734:	4b3b      	ldr	r3, [pc, #236]	; (8000824 <fsm_automatic_run+0x3f8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	3b01      	subs	r3, #1
 800073a:	4a34      	ldr	r2, [pc, #208]	; (800080c <fsm_automatic_run+0x3e0>)
 800073c:	6053      	str	r3, [r2, #4]
			New = 0;
 800073e:	4b31      	ldr	r3, [pc, #196]	; (8000804 <fsm_automatic_run+0x3d8>)
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
		}

		//COUNTDOWN TRAFFIC LIGHTS
		if(timer_flag[1] == 1){
 8000744:	4b33      	ldr	r3, [pc, #204]	; (8000814 <fsm_automatic_run+0x3e8>)
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d10a      	bne.n	8000762 <fsm_automatic_run+0x336>
			status = RED1_GREEN;
 800074c:	4b32      	ldr	r3, [pc, #200]	; (8000818 <fsm_automatic_run+0x3ec>)
 800074e:	2201      	movs	r2, #1
 8000750:	601a      	str	r2, [r3, #0]
			New = 1;
 8000752:	4b2c      	ldr	r3, [pc, #176]	; (8000804 <fsm_automatic_run+0x3d8>)
 8000754:	2201      	movs	r2, #1
 8000756:	601a      	str	r2, [r3, #0]
			setTimer(1, 3000);
 8000758:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800075c:	2001      	movs	r0, #1
 800075e:	f000 ffbd 	bl	80016dc <setTimer>
		}

		//7-SEGMENT LEDS
		if(idx == 4){
 8000762:	4b2e      	ldr	r3, [pc, #184]	; (800081c <fsm_automatic_run+0x3f0>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b04      	cmp	r3, #4
 8000768:	d102      	bne.n	8000770 <fsm_automatic_run+0x344>
			idx = 0;
 800076a:	4b2c      	ldr	r3, [pc, #176]	; (800081c <fsm_automatic_run+0x3f0>)
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[3] == 1){
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <fsm_automatic_run+0x3e8>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d10b      	bne.n	8000790 <fsm_automatic_run+0x364>
			update7SEG(idx++);
 8000778:	4b28      	ldr	r3, [pc, #160]	; (800081c <fsm_automatic_run+0x3f0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	1c5a      	adds	r2, r3, #1
 800077e:	4927      	ldr	r1, [pc, #156]	; (800081c <fsm_automatic_run+0x3f0>)
 8000780:	600a      	str	r2, [r1, #0]
 8000782:	4618      	mov	r0, r3
 8000784:	f000 fe76 	bl	8001474 <update7SEG>
			setTimer(3,250);
 8000788:	21fa      	movs	r1, #250	; 0xfa
 800078a:	2003      	movs	r0, #3
 800078c:	f000 ffa6 	bl	80016dc <setTimer>
		}
		if(timer_flag[2] == 1){
 8000790:	4b20      	ldr	r3, [pc, #128]	; (8000814 <fsm_automatic_run+0x3e8>)
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d10e      	bne.n	80007b6 <fsm_automatic_run+0x38a>
			led_buffer[3]--;
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <fsm_automatic_run+0x3e0>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	3b01      	subs	r3, #1
 800079e:	4a1b      	ldr	r2, [pc, #108]	; (800080c <fsm_automatic_run+0x3e0>)
 80007a0:	60d3      	str	r3, [r2, #12]
			led_buffer[1]--;
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <fsm_automatic_run+0x3e0>)
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	4a18      	ldr	r2, [pc, #96]	; (800080c <fsm_automatic_run+0x3e0>)
 80007aa:	6053      	str	r3, [r2, #4]
			setTimer(2, 1000);
 80007ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007b0:	2002      	movs	r0, #2
 80007b2:	f000 ff93 	bl	80016dc <setTimer>
		}

		//SETTING TRAFFIC LIGHTS
		if(button_flag[0] == 1){
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <fsm_automatic_run+0x3f4>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d11e      	bne.n	80007fc <fsm_automatic_run+0x3d0>
			button_flag[0] = 0;
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <fsm_automatic_run+0x3f4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
			New = 1;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <fsm_automatic_run+0x3d8>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	601a      	str	r2, [r3, #0]
			clearLed();
 80007ca:	f000 fe35 	bl	8001438 <clearLed>
			clear_light();
 80007ce:	f001 f8e7 	bl	80019a0 <clear_light>
			setTimer(3, 250);
 80007d2:	21fa      	movs	r1, #250	; 0xfa
 80007d4:	2003      	movs	r0, #3
 80007d6:	f000 ff81 	bl	80016dc <setTimer>
			setTimer(4, 500);
 80007da:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80007de:	2004      	movs	r0, #4
 80007e0:	f000 ff7c 	bl	80016dc <setTimer>
			status = RED_SETTING;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <fsm_automatic_run+0x3ec>)
 80007e6:	2205      	movs	r2, #5
 80007e8:	601a      	str	r2, [r3, #0]
		}
		break;
 80007ea:	e007      	b.n	80007fc <fsm_automatic_run+0x3d0>
	default:
		break;
 80007ec:	bf00      	nop
 80007ee:	e006      	b.n	80007fe <fsm_automatic_run+0x3d2>
		break;
 80007f0:	bf00      	nop
 80007f2:	e004      	b.n	80007fe <fsm_automatic_run+0x3d2>
		break;
 80007f4:	bf00      	nop
 80007f6:	e002      	b.n	80007fe <fsm_automatic_run+0x3d2>
		break;
 80007f8:	bf00      	nop
 80007fa:	e000      	b.n	80007fe <fsm_automatic_run+0x3d2>
		break;
 80007fc:	bf00      	nop
	}
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	2000006c 	.word	0x2000006c
 8000808:	2000000c 	.word	0x2000000c
 800080c:	20000070 	.word	0x20000070
 8000810:	20000014 	.word	0x20000014
 8000814:	200000a8 	.word	0x200000a8
 8000818:	20000064 	.word	0x20000064
 800081c:	20000068 	.word	0x20000068
 8000820:	2000004c 	.word	0x2000004c
 8000824:	20000010 	.word	0x20000010

08000828 <fsm_manual_run>:


#include "fsm_manual.h"


void fsm_manual_run(){
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	switch(status){
 800082c:	4b80      	ldr	r3, [pc, #512]	; (8000a30 <fsm_manual_run+0x208>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	3b08      	subs	r3, #8
 8000832:	2b03      	cmp	r3, #3
 8000834:	f200 81e7 	bhi.w	8000c06 <fsm_manual_run+0x3de>
 8000838:	a201      	add	r2, pc, #4	; (adr r2, 8000840 <fsm_manual_run+0x18>)
 800083a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083e:	bf00      	nop
 8000840:	08000851 	.word	0x08000851
 8000844:	08000955 	.word	0x08000955
 8000848:	08000a55 	.word	0x08000a55
 800084c:	08000b39 	.word	0x08000b39
	case RED1_GREEN_MAN:
		//when something wrong
		if((green_time + yellow_time) != red_time){
 8000850:	4b78      	ldr	r3, [pc, #480]	; (8000a34 <fsm_manual_run+0x20c>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4b78      	ldr	r3, [pc, #480]	; (8000a38 <fsm_manual_run+0x210>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	441a      	add	r2, r3
 800085a:	4b78      	ldr	r3, [pc, #480]	; (8000a3c <fsm_manual_run+0x214>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	429a      	cmp	r2, r3
 8000860:	d006      	beq.n	8000870 <fsm_manual_run+0x48>
			green_time = red_time - yellow_time;
 8000862:	4b76      	ldr	r3, [pc, #472]	; (8000a3c <fsm_manual_run+0x214>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4b74      	ldr	r3, [pc, #464]	; (8000a38 <fsm_manual_run+0x210>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	4a71      	ldr	r2, [pc, #452]	; (8000a34 <fsm_manual_run+0x20c>)
 800086e:	6013      	str	r3, [r2, #0]
		}

		//When just turn status
		if(New == 1){
 8000870:	4b73      	ldr	r3, [pc, #460]	; (8000a40 <fsm_manual_run+0x218>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d110      	bne.n	800089a <fsm_manual_run+0x72>
			turn_red();
 8000878:	f001 f808 	bl	800188c <turn_red>
			turn_green_2();
 800087c:	f001 f860 	bl	8001940 <turn_green_2>
			led_buffer[1] = red_time - 1;
 8000880:	4b6e      	ldr	r3, [pc, #440]	; (8000a3c <fsm_manual_run+0x214>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3b01      	subs	r3, #1
 8000886:	4a6f      	ldr	r2, [pc, #444]	; (8000a44 <fsm_manual_run+0x21c>)
 8000888:	6053      	str	r3, [r2, #4]
			led_buffer[3] = green_time -1;
 800088a:	4b6a      	ldr	r3, [pc, #424]	; (8000a34 <fsm_manual_run+0x20c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	3b01      	subs	r3, #1
 8000890:	4a6c      	ldr	r2, [pc, #432]	; (8000a44 <fsm_manual_run+0x21c>)
 8000892:	60d3      	str	r3, [r2, #12]
			New = 0;
 8000894:	4b6a      	ldr	r3, [pc, #424]	; (8000a40 <fsm_manual_run+0x218>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
		}

		//COUNTDOWN TRAFFIC LIGHTS
		if(timer_flag[1] == 1){
 800089a:	4b6b      	ldr	r3, [pc, #428]	; (8000a48 <fsm_manual_run+0x220>)
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d112      	bne.n	80008c8 <fsm_manual_run+0xa0>
			led_buffer[3] = 1;
 80008a2:	4b68      	ldr	r3, [pc, #416]	; (8000a44 <fsm_manual_run+0x21c>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	60da      	str	r2, [r3, #12]
			status = RED1_YELLOW;
 80008a8:	4b61      	ldr	r3, [pc, #388]	; (8000a30 <fsm_manual_run+0x208>)
 80008aa:	2202      	movs	r2, #2
 80008ac:	601a      	str	r2, [r3, #0]
			New = 1;
 80008ae:	4b64      	ldr	r3, [pc, #400]	; (8000a40 <fsm_manual_run+0x218>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	601a      	str	r2, [r3, #0]
			setTimer(1, yellow_time*1000);
 80008b4:	4b60      	ldr	r3, [pc, #384]	; (8000a38 <fsm_manual_run+0x210>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008bc:	fb02 f303 	mul.w	r3, r2, r3
 80008c0:	4619      	mov	r1, r3
 80008c2:	2001      	movs	r0, #1
 80008c4:	f000 ff0a 	bl	80016dc <setTimer>
		}

		//7-SEGMENT LEDS
		if(idx == 4){
 80008c8:	4b60      	ldr	r3, [pc, #384]	; (8000a4c <fsm_manual_run+0x224>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b04      	cmp	r3, #4
 80008ce:	d102      	bne.n	80008d6 <fsm_manual_run+0xae>
			idx = 0;
 80008d0:	4b5e      	ldr	r3, [pc, #376]	; (8000a4c <fsm_manual_run+0x224>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[3] == 1){
 80008d6:	4b5c      	ldr	r3, [pc, #368]	; (8000a48 <fsm_manual_run+0x220>)
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d10b      	bne.n	80008f6 <fsm_manual_run+0xce>
			update7SEG(idx++);
 80008de:	4b5b      	ldr	r3, [pc, #364]	; (8000a4c <fsm_manual_run+0x224>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	1c5a      	adds	r2, r3, #1
 80008e4:	4959      	ldr	r1, [pc, #356]	; (8000a4c <fsm_manual_run+0x224>)
 80008e6:	600a      	str	r2, [r1, #0]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 fdc3 	bl	8001474 <update7SEG>
			setTimer(3,250);
 80008ee:	21fa      	movs	r1, #250	; 0xfa
 80008f0:	2003      	movs	r0, #3
 80008f2:	f000 fef3 	bl	80016dc <setTimer>
		}
		if(timer_flag[2] == 1){
 80008f6:	4b54      	ldr	r3, [pc, #336]	; (8000a48 <fsm_manual_run+0x220>)
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d10e      	bne.n	800091c <fsm_manual_run+0xf4>
			led_buffer[3]--;
 80008fe:	4b51      	ldr	r3, [pc, #324]	; (8000a44 <fsm_manual_run+0x21c>)
 8000900:	68db      	ldr	r3, [r3, #12]
 8000902:	3b01      	subs	r3, #1
 8000904:	4a4f      	ldr	r2, [pc, #316]	; (8000a44 <fsm_manual_run+0x21c>)
 8000906:	60d3      	str	r3, [r2, #12]
			led_buffer[1]--;
 8000908:	4b4e      	ldr	r3, [pc, #312]	; (8000a44 <fsm_manual_run+0x21c>)
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	3b01      	subs	r3, #1
 800090e:	4a4d      	ldr	r2, [pc, #308]	; (8000a44 <fsm_manual_run+0x21c>)
 8000910:	6053      	str	r3, [r2, #4]
			setTimer(2, 1000);
 8000912:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000916:	2002      	movs	r0, #2
 8000918:	f000 fee0 	bl	80016dc <setTimer>
		}

		//SETTING TRAFFIC LIGHTS
		if(button_flag[0] == 1){
 800091c:	4b4c      	ldr	r3, [pc, #304]	; (8000a50 <fsm_manual_run+0x228>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b01      	cmp	r3, #1
 8000922:	f040 8172 	bne.w	8000c0a <fsm_manual_run+0x3e2>
			button_flag[0] = 0;
 8000926:	4b4a      	ldr	r3, [pc, #296]	; (8000a50 <fsm_manual_run+0x228>)
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
			New = 1;
 800092c:	4b44      	ldr	r3, [pc, #272]	; (8000a40 <fsm_manual_run+0x218>)
 800092e:	2201      	movs	r2, #1
 8000930:	601a      	str	r2, [r3, #0]
			clearLed();
 8000932:	f000 fd81 	bl	8001438 <clearLed>
			clear_light();
 8000936:	f001 f833 	bl	80019a0 <clear_light>
			setTimer(3, 250);
 800093a:	21fa      	movs	r1, #250	; 0xfa
 800093c:	2003      	movs	r0, #3
 800093e:	f000 fecd 	bl	80016dc <setTimer>
			setTimer(4, 500);
 8000942:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000946:	2004      	movs	r0, #4
 8000948:	f000 fec8 	bl	80016dc <setTimer>
			status = RED_SETTING;
 800094c:	4b38      	ldr	r3, [pc, #224]	; (8000a30 <fsm_manual_run+0x208>)
 800094e:	2205      	movs	r2, #5
 8000950:	601a      	str	r2, [r3, #0]
		}
		break;
 8000952:	e15a      	b.n	8000c0a <fsm_manual_run+0x3e2>
	case RED1_YELLOW_MAN:
		//When just turn status
		if(New == 1){
 8000954:	4b3a      	ldr	r3, [pc, #232]	; (8000a40 <fsm_manual_run+0x218>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d109      	bne.n	8000970 <fsm_manual_run+0x148>
			turn_yellow_2();
 800095c:	f001 f808 	bl	8001970 <turn_yellow_2>
			led_buffer[3] = yellow_time - 1;
 8000960:	4b35      	ldr	r3, [pc, #212]	; (8000a38 <fsm_manual_run+0x210>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	3b01      	subs	r3, #1
 8000966:	4a37      	ldr	r2, [pc, #220]	; (8000a44 <fsm_manual_run+0x21c>)
 8000968:	60d3      	str	r3, [r2, #12]
			New = 0;
 800096a:	4b35      	ldr	r3, [pc, #212]	; (8000a40 <fsm_manual_run+0x218>)
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
		}

		//COUNTDOWN TRAFFIC LIGHTS
		if(timer_flag[1] == 1){
 8000970:	4b35      	ldr	r3, [pc, #212]	; (8000a48 <fsm_manual_run+0x220>)
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d115      	bne.n	80009a4 <fsm_manual_run+0x17c>
			led_buffer[1] = 2;
 8000978:	4b32      	ldr	r3, [pc, #200]	; (8000a44 <fsm_manual_run+0x21c>)
 800097a:	2202      	movs	r2, #2
 800097c:	605a      	str	r2, [r3, #4]
			led_buffer[3] = 4;
 800097e:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <fsm_manual_run+0x21c>)
 8000980:	2204      	movs	r2, #4
 8000982:	60da      	str	r2, [r3, #12]
			status = RED2_GREEN;
 8000984:	4b2a      	ldr	r3, [pc, #168]	; (8000a30 <fsm_manual_run+0x208>)
 8000986:	2203      	movs	r2, #3
 8000988:	601a      	str	r2, [r3, #0]
			New = 1;
 800098a:	4b2d      	ldr	r3, [pc, #180]	; (8000a40 <fsm_manual_run+0x218>)
 800098c:	2201      	movs	r2, #1
 800098e:	601a      	str	r2, [r3, #0]
			setTimer(1, green_time*1000);
 8000990:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <fsm_manual_run+0x20c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000998:	fb02 f303 	mul.w	r3, r2, r3
 800099c:	4619      	mov	r1, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	f000 fe9c 	bl	80016dc <setTimer>
		}

		//7-SEGMENT LEDS
		if(idx == 4){
 80009a4:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <fsm_manual_run+0x224>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b04      	cmp	r3, #4
 80009aa:	d102      	bne.n	80009b2 <fsm_manual_run+0x18a>
			idx = 0;
 80009ac:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <fsm_manual_run+0x224>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[3] == 1){
 80009b2:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <fsm_manual_run+0x220>)
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d10b      	bne.n	80009d2 <fsm_manual_run+0x1aa>
			update7SEG(idx++);
 80009ba:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <fsm_manual_run+0x224>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	4922      	ldr	r1, [pc, #136]	; (8000a4c <fsm_manual_run+0x224>)
 80009c2:	600a      	str	r2, [r1, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 fd55 	bl	8001474 <update7SEG>
			setTimer(3,250);
 80009ca:	21fa      	movs	r1, #250	; 0xfa
 80009cc:	2003      	movs	r0, #3
 80009ce:	f000 fe85 	bl	80016dc <setTimer>
		}
		if(timer_flag[2] == 1){
 80009d2:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <fsm_manual_run+0x220>)
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d10e      	bne.n	80009f8 <fsm_manual_run+0x1d0>
			led_buffer[3]--;
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <fsm_manual_run+0x21c>)
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	3b01      	subs	r3, #1
 80009e0:	4a18      	ldr	r2, [pc, #96]	; (8000a44 <fsm_manual_run+0x21c>)
 80009e2:	60d3      	str	r3, [r2, #12]
			led_buffer[1]--;
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <fsm_manual_run+0x21c>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	3b01      	subs	r3, #1
 80009ea:	4a16      	ldr	r2, [pc, #88]	; (8000a44 <fsm_manual_run+0x21c>)
 80009ec:	6053      	str	r3, [r2, #4]
			setTimer(2, 1000);
 80009ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009f2:	2002      	movs	r0, #2
 80009f4:	f000 fe72 	bl	80016dc <setTimer>
		}

		//SETTING TRAFFIC LIGHTS
		if(button_flag[0] == 1){
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <fsm_manual_run+0x228>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	f040 8106 	bne.w	8000c0e <fsm_manual_run+0x3e6>
			button_flag[0] = 0;
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <fsm_manual_run+0x228>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
			New = 1;
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <fsm_manual_run+0x218>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	601a      	str	r2, [r3, #0]
			clearLed();
 8000a0e:	f000 fd13 	bl	8001438 <clearLed>
			clear_light();
 8000a12:	f000 ffc5 	bl	80019a0 <clear_light>
			setTimer(3, 250);
 8000a16:	21fa      	movs	r1, #250	; 0xfa
 8000a18:	2003      	movs	r0, #3
 8000a1a:	f000 fe5f 	bl	80016dc <setTimer>
			setTimer(4, 500);
 8000a1e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a22:	2004      	movs	r0, #4
 8000a24:	f000 fe5a 	bl	80016dc <setTimer>
			status = RED_SETTING;
 8000a28:	4b01      	ldr	r3, [pc, #4]	; (8000a30 <fsm_manual_run+0x208>)
 8000a2a:	2205      	movs	r2, #5
 8000a2c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a2e:	e0ee      	b.n	8000c0e <fsm_manual_run+0x3e6>
 8000a30:	20000064 	.word	0x20000064
 8000a34:	20000014 	.word	0x20000014
 8000a38:	20000010 	.word	0x20000010
 8000a3c:	2000000c 	.word	0x2000000c
 8000a40:	2000006c 	.word	0x2000006c
 8000a44:	20000070 	.word	0x20000070
 8000a48:	200000a8 	.word	0x200000a8
 8000a4c:	20000068 	.word	0x20000068
 8000a50:	2000004c 	.word	0x2000004c
	case RED2_GREEN_MAN:
		//When just turn status
		if(New == 1){
 8000a54:	4b71      	ldr	r3, [pc, #452]	; (8000c1c <fsm_manual_run+0x3f4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d110      	bne.n	8000a7e <fsm_manual_run+0x256>
			turn_red_2();
 8000a5c:	f000 ff58 	bl	8001910 <turn_red_2>
			turn_green();
 8000a60:	f000 ff2a 	bl	80018b8 <turn_green>
			led_buffer[3] = red_time - 1;
 8000a64:	4b6e      	ldr	r3, [pc, #440]	; (8000c20 <fsm_manual_run+0x3f8>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	4a6e      	ldr	r2, [pc, #440]	; (8000c24 <fsm_manual_run+0x3fc>)
 8000a6c:	60d3      	str	r3, [r2, #12]
			led_buffer[1] = green_time -1;
 8000a6e:	4b6e      	ldr	r3, [pc, #440]	; (8000c28 <fsm_manual_run+0x400>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	4a6b      	ldr	r2, [pc, #428]	; (8000c24 <fsm_manual_run+0x3fc>)
 8000a76:	6053      	str	r3, [r2, #4]
			New = 0;
 8000a78:	4b68      	ldr	r3, [pc, #416]	; (8000c1c <fsm_manual_run+0x3f4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
		}

		//COUNTDOWN TRAFFIC LIGHTS
		if(timer_flag[1] == 1){
 8000a7e:	4b6b      	ldr	r3, [pc, #428]	; (8000c2c <fsm_manual_run+0x404>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d112      	bne.n	8000aac <fsm_manual_run+0x284>
			led_buffer[1] = 1;
 8000a86:	4b67      	ldr	r3, [pc, #412]	; (8000c24 <fsm_manual_run+0x3fc>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	605a      	str	r2, [r3, #4]
			status = RED2_YELLOW;
 8000a8c:	4b68      	ldr	r3, [pc, #416]	; (8000c30 <fsm_manual_run+0x408>)
 8000a8e:	2204      	movs	r2, #4
 8000a90:	601a      	str	r2, [r3, #0]
			New = 1;
 8000a92:	4b62      	ldr	r3, [pc, #392]	; (8000c1c <fsm_manual_run+0x3f4>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	601a      	str	r2, [r3, #0]
			setTimer(1, yellow_time*1000);
 8000a98:	4b66      	ldr	r3, [pc, #408]	; (8000c34 <fsm_manual_run+0x40c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aa0:	fb02 f303 	mul.w	r3, r2, r3
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f000 fe18 	bl	80016dc <setTimer>
		}

		//7-SEGMENT LEDS
		if(idx == 4){
 8000aac:	4b62      	ldr	r3, [pc, #392]	; (8000c38 <fsm_manual_run+0x410>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	d102      	bne.n	8000aba <fsm_manual_run+0x292>
			idx = 0;
 8000ab4:	4b60      	ldr	r3, [pc, #384]	; (8000c38 <fsm_manual_run+0x410>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[3] == 1){
 8000aba:	4b5c      	ldr	r3, [pc, #368]	; (8000c2c <fsm_manual_run+0x404>)
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d10b      	bne.n	8000ada <fsm_manual_run+0x2b2>
			update7SEG(idx++);
 8000ac2:	4b5d      	ldr	r3, [pc, #372]	; (8000c38 <fsm_manual_run+0x410>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	1c5a      	adds	r2, r3, #1
 8000ac8:	495b      	ldr	r1, [pc, #364]	; (8000c38 <fsm_manual_run+0x410>)
 8000aca:	600a      	str	r2, [r1, #0]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 fcd1 	bl	8001474 <update7SEG>
			setTimer(3,250);
 8000ad2:	21fa      	movs	r1, #250	; 0xfa
 8000ad4:	2003      	movs	r0, #3
 8000ad6:	f000 fe01 	bl	80016dc <setTimer>
		}
		if(timer_flag[2] == 1){
 8000ada:	4b54      	ldr	r3, [pc, #336]	; (8000c2c <fsm_manual_run+0x404>)
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d10e      	bne.n	8000b00 <fsm_manual_run+0x2d8>
			led_buffer[3]--;
 8000ae2:	4b50      	ldr	r3, [pc, #320]	; (8000c24 <fsm_manual_run+0x3fc>)
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	4a4e      	ldr	r2, [pc, #312]	; (8000c24 <fsm_manual_run+0x3fc>)
 8000aea:	60d3      	str	r3, [r2, #12]
			led_buffer[1]--;
 8000aec:	4b4d      	ldr	r3, [pc, #308]	; (8000c24 <fsm_manual_run+0x3fc>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	3b01      	subs	r3, #1
 8000af2:	4a4c      	ldr	r2, [pc, #304]	; (8000c24 <fsm_manual_run+0x3fc>)
 8000af4:	6053      	str	r3, [r2, #4]
			setTimer(2, 1000);
 8000af6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000afa:	2002      	movs	r0, #2
 8000afc:	f000 fdee 	bl	80016dc <setTimer>
		}

		//SETTING TRAFFIC LIGHTS
		if(button_flag[0] == 1){
 8000b00:	4b4e      	ldr	r3, [pc, #312]	; (8000c3c <fsm_manual_run+0x414>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	f040 8084 	bne.w	8000c12 <fsm_manual_run+0x3ea>
			button_flag[0] = 0;
 8000b0a:	4b4c      	ldr	r3, [pc, #304]	; (8000c3c <fsm_manual_run+0x414>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
			New = 1;
 8000b10:	4b42      	ldr	r3, [pc, #264]	; (8000c1c <fsm_manual_run+0x3f4>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	601a      	str	r2, [r3, #0]
			clearLed();
 8000b16:	f000 fc8f 	bl	8001438 <clearLed>
			clear_light();
 8000b1a:	f000 ff41 	bl	80019a0 <clear_light>
			setTimer(3, 250);
 8000b1e:	21fa      	movs	r1, #250	; 0xfa
 8000b20:	2003      	movs	r0, #3
 8000b22:	f000 fddb 	bl	80016dc <setTimer>
			setTimer(4, 500);
 8000b26:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b2a:	2004      	movs	r0, #4
 8000b2c:	f000 fdd6 	bl	80016dc <setTimer>
			status = RED_SETTING;
 8000b30:	4b3f      	ldr	r3, [pc, #252]	; (8000c30 <fsm_manual_run+0x408>)
 8000b32:	2205      	movs	r2, #5
 8000b34:	601a      	str	r2, [r3, #0]
		}
		break;
 8000b36:	e06c      	b.n	8000c12 <fsm_manual_run+0x3ea>
	case RED2_YELLOW_MAN:
		//When just turn status
		if(New == 1){
 8000b38:	4b38      	ldr	r3, [pc, #224]	; (8000c1c <fsm_manual_run+0x3f4>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d109      	bne.n	8000b54 <fsm_manual_run+0x32c>
			turn_yellow();
 8000b40:	f000 fed0 	bl	80018e4 <turn_yellow>
			led_buffer[1] = yellow_time - 1;
 8000b44:	4b3b      	ldr	r3, [pc, #236]	; (8000c34 <fsm_manual_run+0x40c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	4a36      	ldr	r2, [pc, #216]	; (8000c24 <fsm_manual_run+0x3fc>)
 8000b4c:	6053      	str	r3, [r2, #4]
			New = 0;
 8000b4e:	4b33      	ldr	r3, [pc, #204]	; (8000c1c <fsm_manual_run+0x3f4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
		}

		//COUNTDOWN TRAFFIC LIGHTS
		if(timer_flag[1] == 1){
 8000b54:	4b35      	ldr	r3, [pc, #212]	; (8000c2c <fsm_manual_run+0x404>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d10f      	bne.n	8000b7c <fsm_manual_run+0x354>
			status = RED1_GREEN;
 8000b5c:	4b34      	ldr	r3, [pc, #208]	; (8000c30 <fsm_manual_run+0x408>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	601a      	str	r2, [r3, #0]
			New = 1;
 8000b62:	4b2e      	ldr	r3, [pc, #184]	; (8000c1c <fsm_manual_run+0x3f4>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	601a      	str	r2, [r3, #0]
			setTimer(1, green_time*1000);
 8000b68:	4b2f      	ldr	r3, [pc, #188]	; (8000c28 <fsm_manual_run+0x400>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b70:	fb02 f303 	mul.w	r3, r2, r3
 8000b74:	4619      	mov	r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	f000 fdb0 	bl	80016dc <setTimer>
		}

		//7-SEGMENT LEDS
		if(idx == 4){
 8000b7c:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <fsm_manual_run+0x410>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b04      	cmp	r3, #4
 8000b82:	d102      	bne.n	8000b8a <fsm_manual_run+0x362>
			idx = 0;
 8000b84:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <fsm_manual_run+0x410>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[3] == 1){
 8000b8a:	4b28      	ldr	r3, [pc, #160]	; (8000c2c <fsm_manual_run+0x404>)
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d10b      	bne.n	8000baa <fsm_manual_run+0x382>
			update7SEG(idx++);
 8000b92:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <fsm_manual_run+0x410>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	4927      	ldr	r1, [pc, #156]	; (8000c38 <fsm_manual_run+0x410>)
 8000b9a:	600a      	str	r2, [r1, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 fc69 	bl	8001474 <update7SEG>
			setTimer(3,250);
 8000ba2:	21fa      	movs	r1, #250	; 0xfa
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 fd99 	bl	80016dc <setTimer>
		}
		if(timer_flag[2] == 1){
 8000baa:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <fsm_manual_run+0x404>)
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d10e      	bne.n	8000bd0 <fsm_manual_run+0x3a8>
			led_buffer[3]--;
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <fsm_manual_run+0x3fc>)
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	4a1a      	ldr	r2, [pc, #104]	; (8000c24 <fsm_manual_run+0x3fc>)
 8000bba:	60d3      	str	r3, [r2, #12]
			led_buffer[1]--;
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <fsm_manual_run+0x3fc>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	4a18      	ldr	r2, [pc, #96]	; (8000c24 <fsm_manual_run+0x3fc>)
 8000bc4:	6053      	str	r3, [r2, #4]
			setTimer(2, 1000);
 8000bc6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bca:	2002      	movs	r0, #2
 8000bcc:	f000 fd86 	bl	80016dc <setTimer>
		}

		//SETTING TRAFFIC LIGHTS
		if(button_flag[0] == 1){
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <fsm_manual_run+0x414>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d11e      	bne.n	8000c16 <fsm_manual_run+0x3ee>
			button_flag[0] = 0;
 8000bd8:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <fsm_manual_run+0x414>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
			New = 1;
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <fsm_manual_run+0x3f4>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	601a      	str	r2, [r3, #0]
			clearLed();
 8000be4:	f000 fc28 	bl	8001438 <clearLed>
			clear_light();
 8000be8:	f000 feda 	bl	80019a0 <clear_light>
			setTimer(3, 250);
 8000bec:	21fa      	movs	r1, #250	; 0xfa
 8000bee:	2003      	movs	r0, #3
 8000bf0:	f000 fd74 	bl	80016dc <setTimer>
			setTimer(4, 500);
 8000bf4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000bf8:	2004      	movs	r0, #4
 8000bfa:	f000 fd6f 	bl	80016dc <setTimer>
			status = RED_SETTING;
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <fsm_manual_run+0x408>)
 8000c00:	2205      	movs	r2, #5
 8000c02:	601a      	str	r2, [r3, #0]
		}
		break;
 8000c04:	e007      	b.n	8000c16 <fsm_manual_run+0x3ee>
	default:
		break;
 8000c06:	bf00      	nop
 8000c08:	e006      	b.n	8000c18 <fsm_manual_run+0x3f0>
		break;
 8000c0a:	bf00      	nop
 8000c0c:	e004      	b.n	8000c18 <fsm_manual_run+0x3f0>
		break;
 8000c0e:	bf00      	nop
 8000c10:	e002      	b.n	8000c18 <fsm_manual_run+0x3f0>
		break;
 8000c12:	bf00      	nop
 8000c14:	e000      	b.n	8000c18 <fsm_manual_run+0x3f0>
		break;
 8000c16:	bf00      	nop
	}

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	2000006c 	.word	0x2000006c
 8000c20:	2000000c 	.word	0x2000000c
 8000c24:	20000070 	.word	0x20000070
 8000c28:	20000014 	.word	0x20000014
 8000c2c:	200000a8 	.word	0x200000a8
 8000c30:	20000064 	.word	0x20000064
 8000c34:	20000010 	.word	0x20000010
 8000c38:	20000068 	.word	0x20000068
 8000c3c:	2000004c 	.word	0x2000004c

08000c40 <fsm_setting_run>:
 */


#include "fsm_setting.h"

void fsm_setting_run(){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	if(idx == 4){
 8000c44:	4b98      	ldr	r3, [pc, #608]	; (8000ea8 <fsm_setting_run+0x268>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b04      	cmp	r3, #4
 8000c4a:	d102      	bne.n	8000c52 <fsm_setting_run+0x12>
		idx = 0;
 8000c4c:	4b96      	ldr	r3, [pc, #600]	; (8000ea8 <fsm_setting_run+0x268>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
	}
	if(timer_flag[3] == 1){
 8000c52:	4b96      	ldr	r3, [pc, #600]	; (8000eac <fsm_setting_run+0x26c>)
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d10b      	bne.n	8000c72 <fsm_setting_run+0x32>
		update7SEG(idx++);
 8000c5a:	4b93      	ldr	r3, [pc, #588]	; (8000ea8 <fsm_setting_run+0x268>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	1c5a      	adds	r2, r3, #1
 8000c60:	4991      	ldr	r1, [pc, #580]	; (8000ea8 <fsm_setting_run+0x268>)
 8000c62:	600a      	str	r2, [r1, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 fc05 	bl	8001474 <update7SEG>
		setTimer(3,250);
 8000c6a:	21fa      	movs	r1, #250	; 0xfa
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 fd35 	bl	80016dc <setTimer>
	}
	switch(status){
 8000c72:	4b8f      	ldr	r3, [pc, #572]	; (8000eb0 <fsm_setting_run+0x270>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b07      	cmp	r3, #7
 8000c78:	f000 812c 	beq.w	8000ed4 <fsm_setting_run+0x294>
 8000c7c:	2b07      	cmp	r3, #7
 8000c7e:	f300 81b6 	bgt.w	8000fee <fsm_setting_run+0x3ae>
 8000c82:	2b05      	cmp	r3, #5
 8000c84:	d003      	beq.n	8000c8e <fsm_setting_run+0x4e>
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	f000 8089 	beq.w	8000d9e <fsm_setting_run+0x15e>
			setTimer(3, 250);
			status = RED1_GREEN_MAN;
		}
		break;
	default:
		break;
 8000c8c:	e1af      	b.n	8000fee <fsm_setting_run+0x3ae>
		if(New == 1){
 8000c8e:	4b89      	ldr	r3, [pc, #548]	; (8000eb4 <fsm_setting_run+0x274>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d10a      	bne.n	8000cac <fsm_setting_run+0x6c>
			led_buffer[3] = mode2;
 8000c96:	4b88      	ldr	r3, [pc, #544]	; (8000eb8 <fsm_setting_run+0x278>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a88      	ldr	r2, [pc, #544]	; (8000ebc <fsm_setting_run+0x27c>)
 8000c9c:	60d3      	str	r3, [r2, #12]
			led_buffer[1] = red_time;
 8000c9e:	4b88      	ldr	r3, [pc, #544]	; (8000ec0 <fsm_setting_run+0x280>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a86      	ldr	r2, [pc, #536]	; (8000ebc <fsm_setting_run+0x27c>)
 8000ca4:	6053      	str	r3, [r2, #4]
			New = 0;
 8000ca6:	4b83      	ldr	r3, [pc, #524]	; (8000eb4 <fsm_setting_run+0x274>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
		if(timer_flag[4] == 1){
 8000cac:	4b7f      	ldr	r3, [pc, #508]	; (8000eac <fsm_setting_run+0x26c>)
 8000cae:	691b      	ldr	r3, [r3, #16]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d106      	bne.n	8000cc2 <fsm_setting_run+0x82>
			setTimer(4, 500);
 8000cb4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000cb8:	2004      	movs	r0, #4
 8000cba:	f000 fd0f 	bl	80016dc <setTimer>
			toggleRed();
 8000cbe:	f000 fe95 	bl	80019ec <toggleRed>
		if(button_flag[1] == 1){
 8000cc2:	4b80      	ldr	r3, [pc, #512]	; (8000ec4 <fsm_setting_run+0x284>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d10b      	bne.n	8000ce2 <fsm_setting_run+0xa2>
			button_flag[1] = 0;
 8000cca:	4b7e      	ldr	r3, [pc, #504]	; (8000ec4 <fsm_setting_run+0x284>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
			HAL_GPIO_TogglePin(test_button_GPIO_Port, test_button_Pin);
 8000cd0:	2104      	movs	r1, #4
 8000cd2:	487d      	ldr	r0, [pc, #500]	; (8000ec8 <fsm_setting_run+0x288>)
 8000cd4:	f001 f9f7 	bl	80020c6 <HAL_GPIO_TogglePin>
			++led_buffer[1];
 8000cd8:	4b78      	ldr	r3, [pc, #480]	; (8000ebc <fsm_setting_run+0x27c>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	4a77      	ldr	r2, [pc, #476]	; (8000ebc <fsm_setting_run+0x27c>)
 8000ce0:	6053      	str	r3, [r2, #4]
		if(led_buffer[1] >= 10){
 8000ce2:	4b76      	ldr	r3, [pc, #472]	; (8000ebc <fsm_setting_run+0x27c>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b09      	cmp	r3, #9
 8000ce8:	dd07      	ble.n	8000cfa <fsm_setting_run+0xba>
			led_buffer[0]++;
 8000cea:	4b74      	ldr	r3, [pc, #464]	; (8000ebc <fsm_setting_run+0x27c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	4a72      	ldr	r2, [pc, #456]	; (8000ebc <fsm_setting_run+0x27c>)
 8000cf2:	6013      	str	r3, [r2, #0]
			led_buffer[1] = 0;
 8000cf4:	4b71      	ldr	r3, [pc, #452]	; (8000ebc <fsm_setting_run+0x27c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	605a      	str	r2, [r3, #4]
		if((led_buffer[0]*10 + led_buffer[1]) >= 100){
 8000cfa:	4b70      	ldr	r3, [pc, #448]	; (8000ebc <fsm_setting_run+0x27c>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	4413      	add	r3, r2
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	461a      	mov	r2, r3
 8000d08:	4b6c      	ldr	r3, [pc, #432]	; (8000ebc <fsm_setting_run+0x27c>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	2b63      	cmp	r3, #99	; 0x63
 8000d10:	dd05      	ble.n	8000d1e <fsm_setting_run+0xde>
			led_buffer[0] = 9;
 8000d12:	4b6a      	ldr	r3, [pc, #424]	; (8000ebc <fsm_setting_run+0x27c>)
 8000d14:	2209      	movs	r2, #9
 8000d16:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 9;
 8000d18:	4b68      	ldr	r3, [pc, #416]	; (8000ebc <fsm_setting_run+0x27c>)
 8000d1a:	2209      	movs	r2, #9
 8000d1c:	605a      	str	r2, [r3, #4]
		if(button_flag[2] == 1){
 8000d1e:	4b69      	ldr	r3, [pc, #420]	; (8000ec4 <fsm_setting_run+0x284>)
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d112      	bne.n	8000d4c <fsm_setting_run+0x10c>
			button_flag[2] = 0;
 8000d26:	4b67      	ldr	r3, [pc, #412]	; (8000ec4 <fsm_setting_run+0x284>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
			red_time = led_buffer[0]*10 + led_buffer[1];
 8000d2c:	4b63      	ldr	r3, [pc, #396]	; (8000ebc <fsm_setting_run+0x27c>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4613      	mov	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b60      	ldr	r3, [pc, #384]	; (8000ebc <fsm_setting_run+0x27c>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a5f      	ldr	r2, [pc, #380]	; (8000ec0 <fsm_setting_run+0x280>)
 8000d42:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(test_button_GPIO_Port, test_button_Pin);
 8000d44:	2104      	movs	r1, #4
 8000d46:	4860      	ldr	r0, [pc, #384]	; (8000ec8 <fsm_setting_run+0x288>)
 8000d48:	f001 f9bd 	bl	80020c6 <HAL_GPIO_TogglePin>
		if(red_time >= 100){
 8000d4c:	4b5c      	ldr	r3, [pc, #368]	; (8000ec0 <fsm_setting_run+0x280>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b63      	cmp	r3, #99	; 0x63
 8000d52:	dd08      	ble.n	8000d66 <fsm_setting_run+0x126>
			red_time = 99;
 8000d54:	4b5a      	ldr	r3, [pc, #360]	; (8000ec0 <fsm_setting_run+0x280>)
 8000d56:	2263      	movs	r2, #99	; 0x63
 8000d58:	601a      	str	r2, [r3, #0]
			led_buffer[0] = 9;
 8000d5a:	4b58      	ldr	r3, [pc, #352]	; (8000ebc <fsm_setting_run+0x27c>)
 8000d5c:	2209      	movs	r2, #9
 8000d5e:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 9;
 8000d60:	4b56      	ldr	r3, [pc, #344]	; (8000ebc <fsm_setting_run+0x27c>)
 8000d62:	2209      	movs	r2, #9
 8000d64:	605a      	str	r2, [r3, #4]
		if(button_flag[0] == 1){
 8000d66:	4b57      	ldr	r3, [pc, #348]	; (8000ec4 <fsm_setting_run+0x284>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	f040 8141 	bne.w	8000ff2 <fsm_setting_run+0x3b2>
			button_flag[0] = 0;
 8000d70:	4b54      	ldr	r3, [pc, #336]	; (8000ec4 <fsm_setting_run+0x284>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
			clearLed();
 8000d76:	f000 fb5f 	bl	8001438 <clearLed>
			clear_light();
 8000d7a:	f000 fe11 	bl	80019a0 <clear_light>
			setTimer(3, 250);
 8000d7e:	21fa      	movs	r1, #250	; 0xfa
 8000d80:	2003      	movs	r0, #3
 8000d82:	f000 fcab 	bl	80016dc <setTimer>
			setTimer(4, 500);
 8000d86:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d8a:	2004      	movs	r0, #4
 8000d8c:	f000 fca6 	bl	80016dc <setTimer>
			New = 1;
 8000d90:	4b48      	ldr	r3, [pc, #288]	; (8000eb4 <fsm_setting_run+0x274>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	601a      	str	r2, [r3, #0]
			status = YELLOW_SETTING;
 8000d96:	4b46      	ldr	r3, [pc, #280]	; (8000eb0 <fsm_setting_run+0x270>)
 8000d98:	2206      	movs	r2, #6
 8000d9a:	601a      	str	r2, [r3, #0]
		break;
 8000d9c:	e129      	b.n	8000ff2 <fsm_setting_run+0x3b2>
		if(New == 1){
 8000d9e:	4b45      	ldr	r3, [pc, #276]	; (8000eb4 <fsm_setting_run+0x274>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d10a      	bne.n	8000dbc <fsm_setting_run+0x17c>
			led_buffer[3] = mode3;
 8000da6:	4b49      	ldr	r3, [pc, #292]	; (8000ecc <fsm_setting_run+0x28c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a44      	ldr	r2, [pc, #272]	; (8000ebc <fsm_setting_run+0x27c>)
 8000dac:	60d3      	str	r3, [r2, #12]
			led_buffer[1] = yellow_time;
 8000dae:	4b48      	ldr	r3, [pc, #288]	; (8000ed0 <fsm_setting_run+0x290>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a42      	ldr	r2, [pc, #264]	; (8000ebc <fsm_setting_run+0x27c>)
 8000db4:	6053      	str	r3, [r2, #4]
			New = 0;
 8000db6:	4b3f      	ldr	r3, [pc, #252]	; (8000eb4 <fsm_setting_run+0x274>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
		if(timer_flag[4] == 1){
 8000dbc:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <fsm_setting_run+0x26c>)
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d106      	bne.n	8000dd2 <fsm_setting_run+0x192>
			setTimer(4, 500);
 8000dc4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000dc8:	2004      	movs	r0, #4
 8000dca:	f000 fc87 	bl	80016dc <setTimer>
			toggleYellow();
 8000dce:	f000 fe1b 	bl	8001a08 <toggleYellow>
		if(button_flag[1] == 1){
 8000dd2:	4b3c      	ldr	r3, [pc, #240]	; (8000ec4 <fsm_setting_run+0x284>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d10b      	bne.n	8000df2 <fsm_setting_run+0x1b2>
			button_flag[1] = 0;
 8000dda:	4b3a      	ldr	r3, [pc, #232]	; (8000ec4 <fsm_setting_run+0x284>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	605a      	str	r2, [r3, #4]
			HAL_GPIO_TogglePin(test_button_GPIO_Port, test_button_Pin);
 8000de0:	2104      	movs	r1, #4
 8000de2:	4839      	ldr	r0, [pc, #228]	; (8000ec8 <fsm_setting_run+0x288>)
 8000de4:	f001 f96f 	bl	80020c6 <HAL_GPIO_TogglePin>
			++led_buffer[1];
 8000de8:	4b34      	ldr	r3, [pc, #208]	; (8000ebc <fsm_setting_run+0x27c>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	3301      	adds	r3, #1
 8000dee:	4a33      	ldr	r2, [pc, #204]	; (8000ebc <fsm_setting_run+0x27c>)
 8000df0:	6053      	str	r3, [r2, #4]
		if(led_buffer[1] >= 10){
 8000df2:	4b32      	ldr	r3, [pc, #200]	; (8000ebc <fsm_setting_run+0x27c>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2b09      	cmp	r3, #9
 8000df8:	dd07      	ble.n	8000e0a <fsm_setting_run+0x1ca>
			led_buffer[0]++;
 8000dfa:	4b30      	ldr	r3, [pc, #192]	; (8000ebc <fsm_setting_run+0x27c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	4a2e      	ldr	r2, [pc, #184]	; (8000ebc <fsm_setting_run+0x27c>)
 8000e02:	6013      	str	r3, [r2, #0]
			led_buffer[1] = 0;
 8000e04:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <fsm_setting_run+0x27c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	605a      	str	r2, [r3, #4]
		if((led_buffer[0]*10 + led_buffer[1]) >= 100){
 8000e0a:	4b2c      	ldr	r3, [pc, #176]	; (8000ebc <fsm_setting_run+0x27c>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <fsm_setting_run+0x27c>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	2b63      	cmp	r3, #99	; 0x63
 8000e20:	dd05      	ble.n	8000e2e <fsm_setting_run+0x1ee>
			led_buffer[0] = 9;
 8000e22:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <fsm_setting_run+0x27c>)
 8000e24:	2209      	movs	r2, #9
 8000e26:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 9;
 8000e28:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <fsm_setting_run+0x27c>)
 8000e2a:	2209      	movs	r2, #9
 8000e2c:	605a      	str	r2, [r3, #4]
		if(button_flag[2] == 1){
 8000e2e:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <fsm_setting_run+0x284>)
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d10e      	bne.n	8000e54 <fsm_setting_run+0x214>
			button_flag[2] = 0;
 8000e36:	4b23      	ldr	r3, [pc, #140]	; (8000ec4 <fsm_setting_run+0x284>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
			yellow_time = led_buffer[0]*10 + led_buffer[1];
 8000e3c:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <fsm_setting_run+0x27c>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4613      	mov	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <fsm_setting_run+0x27c>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a1f      	ldr	r2, [pc, #124]	; (8000ed0 <fsm_setting_run+0x290>)
 8000e52:	6013      	str	r3, [r2, #0]
		if(yellow_time >= 100){
 8000e54:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <fsm_setting_run+0x290>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b63      	cmp	r3, #99	; 0x63
 8000e5a:	dd08      	ble.n	8000e6e <fsm_setting_run+0x22e>
			yellow_time = 99;
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <fsm_setting_run+0x290>)
 8000e5e:	2263      	movs	r2, #99	; 0x63
 8000e60:	601a      	str	r2, [r3, #0]
			led_buffer[0] = 9;
 8000e62:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <fsm_setting_run+0x27c>)
 8000e64:	2209      	movs	r2, #9
 8000e66:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 9;
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <fsm_setting_run+0x27c>)
 8000e6a:	2209      	movs	r2, #9
 8000e6c:	605a      	str	r2, [r3, #4]
		if(button_flag[0] == 1){
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <fsm_setting_run+0x284>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	f040 80bf 	bne.w	8000ff6 <fsm_setting_run+0x3b6>
			button_flag[0] = 0;
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <fsm_setting_run+0x284>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
			clearLed();
 8000e7e:	f000 fadb 	bl	8001438 <clearLed>
			clear_light();
 8000e82:	f000 fd8d 	bl	80019a0 <clear_light>
			setTimer(3, 250);
 8000e86:	21fa      	movs	r1, #250	; 0xfa
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f000 fc27 	bl	80016dc <setTimer>
			setTimer(4, 500);
 8000e8e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e92:	2004      	movs	r0, #4
 8000e94:	f000 fc22 	bl	80016dc <setTimer>
			New = 1;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <fsm_setting_run+0x274>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	601a      	str	r2, [r3, #0]
			status = GREEN_SETTING;
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <fsm_setting_run+0x270>)
 8000ea0:	2207      	movs	r2, #7
 8000ea2:	601a      	str	r2, [r3, #0]
		break;
 8000ea4:	e0a7      	b.n	8000ff6 <fsm_setting_run+0x3b6>
 8000ea6:	bf00      	nop
 8000ea8:	20000068 	.word	0x20000068
 8000eac:	200000a8 	.word	0x200000a8
 8000eb0:	20000064 	.word	0x20000064
 8000eb4:	2000006c 	.word	0x2000006c
 8000eb8:	20000018 	.word	0x20000018
 8000ebc:	20000070 	.word	0x20000070
 8000ec0:	2000000c 	.word	0x2000000c
 8000ec4:	2000004c 	.word	0x2000004c
 8000ec8:	40010800 	.word	0x40010800
 8000ecc:	2000001c 	.word	0x2000001c
 8000ed0:	20000010 	.word	0x20000010
		if(New == 1){
 8000ed4:	4b4a      	ldr	r3, [pc, #296]	; (8001000 <fsm_setting_run+0x3c0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d10a      	bne.n	8000ef2 <fsm_setting_run+0x2b2>
			led_buffer[3] = mode4;
 8000edc:	4b49      	ldr	r3, [pc, #292]	; (8001004 <fsm_setting_run+0x3c4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a49      	ldr	r2, [pc, #292]	; (8001008 <fsm_setting_run+0x3c8>)
 8000ee2:	60d3      	str	r3, [r2, #12]
			led_buffer[1] = green_time;
 8000ee4:	4b49      	ldr	r3, [pc, #292]	; (800100c <fsm_setting_run+0x3cc>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a47      	ldr	r2, [pc, #284]	; (8001008 <fsm_setting_run+0x3c8>)
 8000eea:	6053      	str	r3, [r2, #4]
			New = 0;
 8000eec:	4b44      	ldr	r3, [pc, #272]	; (8001000 <fsm_setting_run+0x3c0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
		if(timer_flag[4] == 1){
 8000ef2:	4b47      	ldr	r3, [pc, #284]	; (8001010 <fsm_setting_run+0x3d0>)
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d106      	bne.n	8000f08 <fsm_setting_run+0x2c8>
			setTimer(4, 500);
 8000efa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000efe:	2004      	movs	r0, #4
 8000f00:	f000 fbec 	bl	80016dc <setTimer>
			toggleGreen();
 8000f04:	f000 fd90 	bl	8001a28 <toggleGreen>
		if(button_flag[1] == 1){
 8000f08:	4b42      	ldr	r3, [pc, #264]	; (8001014 <fsm_setting_run+0x3d4>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d10b      	bne.n	8000f28 <fsm_setting_run+0x2e8>
			button_flag[1] = 0;
 8000f10:	4b40      	ldr	r3, [pc, #256]	; (8001014 <fsm_setting_run+0x3d4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	605a      	str	r2, [r3, #4]
			HAL_GPIO_TogglePin(test_button_GPIO_Port, test_button_Pin);
 8000f16:	2104      	movs	r1, #4
 8000f18:	483f      	ldr	r0, [pc, #252]	; (8001018 <fsm_setting_run+0x3d8>)
 8000f1a:	f001 f8d4 	bl	80020c6 <HAL_GPIO_TogglePin>
			++led_buffer[1];
 8000f1e:	4b3a      	ldr	r3, [pc, #232]	; (8001008 <fsm_setting_run+0x3c8>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	3301      	adds	r3, #1
 8000f24:	4a38      	ldr	r2, [pc, #224]	; (8001008 <fsm_setting_run+0x3c8>)
 8000f26:	6053      	str	r3, [r2, #4]
		if(led_buffer[1] >= 10){
 8000f28:	4b37      	ldr	r3, [pc, #220]	; (8001008 <fsm_setting_run+0x3c8>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b09      	cmp	r3, #9
 8000f2e:	dd07      	ble.n	8000f40 <fsm_setting_run+0x300>
			led_buffer[0]++;
 8000f30:	4b35      	ldr	r3, [pc, #212]	; (8001008 <fsm_setting_run+0x3c8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	4a34      	ldr	r2, [pc, #208]	; (8001008 <fsm_setting_run+0x3c8>)
 8000f38:	6013      	str	r3, [r2, #0]
			led_buffer[1] = 0;
 8000f3a:	4b33      	ldr	r3, [pc, #204]	; (8001008 <fsm_setting_run+0x3c8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	605a      	str	r2, [r3, #4]
		if((led_buffer[0]*10 + led_buffer[1]) >= 100){
 8000f40:	4b31      	ldr	r3, [pc, #196]	; (8001008 <fsm_setting_run+0x3c8>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4613      	mov	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <fsm_setting_run+0x3c8>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	4413      	add	r3, r2
 8000f54:	2b63      	cmp	r3, #99	; 0x63
 8000f56:	dd05      	ble.n	8000f64 <fsm_setting_run+0x324>
			led_buffer[0] = 9;
 8000f58:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <fsm_setting_run+0x3c8>)
 8000f5a:	2209      	movs	r2, #9
 8000f5c:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 9;
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <fsm_setting_run+0x3c8>)
 8000f60:	2209      	movs	r2, #9
 8000f62:	605a      	str	r2, [r3, #4]
		if(button_flag[2] == 1){
 8000f64:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <fsm_setting_run+0x3d4>)
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d10e      	bne.n	8000f8a <fsm_setting_run+0x34a>
			button_flag[2] = 0;
 8000f6c:	4b29      	ldr	r3, [pc, #164]	; (8001014 <fsm_setting_run+0x3d4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
			green_time = led_buffer[0]*10 + led_buffer[1];
 8000f72:	4b25      	ldr	r3, [pc, #148]	; (8001008 <fsm_setting_run+0x3c8>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b21      	ldr	r3, [pc, #132]	; (8001008 <fsm_setting_run+0x3c8>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a21      	ldr	r2, [pc, #132]	; (800100c <fsm_setting_run+0x3cc>)
 8000f88:	6013      	str	r3, [r2, #0]
		if(green_time >= 100){
 8000f8a:	4b20      	ldr	r3, [pc, #128]	; (800100c <fsm_setting_run+0x3cc>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b63      	cmp	r3, #99	; 0x63
 8000f90:	dd08      	ble.n	8000fa4 <fsm_setting_run+0x364>
			green_time = 99;
 8000f92:	4b1e      	ldr	r3, [pc, #120]	; (800100c <fsm_setting_run+0x3cc>)
 8000f94:	2263      	movs	r2, #99	; 0x63
 8000f96:	601a      	str	r2, [r3, #0]
			led_buffer[0] = 9;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <fsm_setting_run+0x3c8>)
 8000f9a:	2209      	movs	r2, #9
 8000f9c:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 9;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <fsm_setting_run+0x3c8>)
 8000fa0:	2209      	movs	r2, #9
 8000fa2:	605a      	str	r2, [r3, #4]
		if(button_flag[0] == 1){
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <fsm_setting_run+0x3d4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d126      	bne.n	8000ffa <fsm_setting_run+0x3ba>
			button_flag[0] = 0;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <fsm_setting_run+0x3d4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
			clearLed();
 8000fb2:	f000 fa41 	bl	8001438 <clearLed>
			clear_light();
 8000fb6:	f000 fcf3 	bl	80019a0 <clear_light>
			New = 1;
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <fsm_setting_run+0x3c0>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]
			setTimer(1, green_time*1000);
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <fsm_setting_run+0x3cc>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fc8:	fb02 f303 	mul.w	r3, r2, r3
 8000fcc:	4619      	mov	r1, r3
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f000 fb84 	bl	80016dc <setTimer>
			setTimer(2, 1000);
 8000fd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fd8:	2002      	movs	r0, #2
 8000fda:	f000 fb7f 	bl	80016dc <setTimer>
			setTimer(3, 250);
 8000fde:	21fa      	movs	r1, #250	; 0xfa
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	f000 fb7b 	bl	80016dc <setTimer>
			status = RED1_GREEN_MAN;
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <fsm_setting_run+0x3dc>)
 8000fe8:	2208      	movs	r2, #8
 8000fea:	601a      	str	r2, [r3, #0]
		break;
 8000fec:	e005      	b.n	8000ffa <fsm_setting_run+0x3ba>
		break;
 8000fee:	bf00      	nop
 8000ff0:	e004      	b.n	8000ffc <fsm_setting_run+0x3bc>
		break;
 8000ff2:	bf00      	nop
 8000ff4:	e002      	b.n	8000ffc <fsm_setting_run+0x3bc>
		break;
 8000ff6:	bf00      	nop
 8000ff8:	e000      	b.n	8000ffc <fsm_setting_run+0x3bc>
		break;
 8000ffa:	bf00      	nop
	}
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2000006c 	.word	0x2000006c
 8001004:	20000020 	.word	0x20000020
 8001008:	20000070 	.word	0x20000070
 800100c:	20000014 	.word	0x20000014
 8001010:	200000a8 	.word	0x200000a8
 8001014:	2000004c 	.word	0x2000004c
 8001018:	40010800 	.word	0x40010800
 800101c:	20000064 	.word	0x20000064

08001020 <display7SEG>:

#include "led7_segment.h"


int led_buffer[4] = {0};
void display7SEG(int num){
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b09      	cmp	r3, #9
 800102c:	f200 8180 	bhi.w	8001330 <display7SEG+0x310>
 8001030:	a201      	add	r2, pc, #4	; (adr r2, 8001038 <display7SEG+0x18>)
 8001032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001036:	bf00      	nop
 8001038:	08001061 	.word	0x08001061
 800103c:	080010a9 	.word	0x080010a9
 8001040:	080010f1 	.word	0x080010f1
 8001044:	08001139 	.word	0x08001139
 8001048:	08001181 	.word	0x08001181
 800104c:	080011c9 	.word	0x080011c9
 8001050:	08001211 	.word	0x08001211
 8001054:	08001259 	.word	0x08001259
 8001058:	080012a1 	.word	0x080012a1
 800105c:	080012e9 	.word	0x080012e9
	 //1
	 switch(num){
	 case 0:
		 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	2101      	movs	r1, #1
 8001064:	48b4      	ldr	r0, [pc, #720]	; (8001338 <display7SEG+0x318>)
 8001066:	f001 f816 	bl	8002096 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	2102      	movs	r1, #2
 800106e:	48b2      	ldr	r0, [pc, #712]	; (8001338 <display7SEG+0x318>)
 8001070:	f001 f811 	bl	8002096 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	2104      	movs	r1, #4
 8001078:	48af      	ldr	r0, [pc, #700]	; (8001338 <display7SEG+0x318>)
 800107a:	f001 f80c 	bl	8002096 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2108      	movs	r1, #8
 8001082:	48ad      	ldr	r0, [pc, #692]	; (8001338 <display7SEG+0x318>)
 8001084:	f001 f807 	bl	8002096 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	2110      	movs	r1, #16
 800108c:	48aa      	ldr	r0, [pc, #680]	; (8001338 <display7SEG+0x318>)
 800108e:	f001 f802 	bl	8002096 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2120      	movs	r1, #32
 8001096:	48a8      	ldr	r0, [pc, #672]	; (8001338 <display7SEG+0x318>)
 8001098:	f000 fffd 	bl	8002096 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_SET);
 800109c:	2201      	movs	r2, #1
 800109e:	2140      	movs	r1, #64	; 0x40
 80010a0:	48a5      	ldr	r0, [pc, #660]	; (8001338 <display7SEG+0x318>)
 80010a2:	f000 fff8 	bl	8002096 <HAL_GPIO_WritePin>
	 break;
 80010a6:	e143      	b.n	8001330 <display7SEG+0x310>
	 case 1:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2101      	movs	r1, #1
 80010ac:	48a2      	ldr	r0, [pc, #648]	; (8001338 <display7SEG+0x318>)
 80010ae:	f000 fff2 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2102      	movs	r1, #2
 80010b6:	48a0      	ldr	r0, [pc, #640]	; (8001338 <display7SEG+0x318>)
 80010b8:	f000 ffed 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	2104      	movs	r1, #4
 80010c0:	489d      	ldr	r0, [pc, #628]	; (8001338 <display7SEG+0x318>)
 80010c2:	f000 ffe8 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	2108      	movs	r1, #8
 80010ca:	489b      	ldr	r0, [pc, #620]	; (8001338 <display7SEG+0x318>)
 80010cc:	f000 ffe3 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	2110      	movs	r1, #16
 80010d4:	4898      	ldr	r0, [pc, #608]	; (8001338 <display7SEG+0x318>)
 80010d6:	f000 ffde 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	2120      	movs	r1, #32
 80010de:	4896      	ldr	r0, [pc, #600]	; (8001338 <display7SEG+0x318>)
 80010e0:	f000 ffd9 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2140      	movs	r1, #64	; 0x40
 80010e8:	4893      	ldr	r0, [pc, #588]	; (8001338 <display7SEG+0x318>)
 80010ea:	f000 ffd4 	bl	8002096 <HAL_GPIO_WritePin>
	 	 break;
 80010ee:	e11f      	b.n	8001330 <display7SEG+0x310>
	 case 2:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2101      	movs	r1, #1
 80010f4:	4890      	ldr	r0, [pc, #576]	; (8001338 <display7SEG+0x318>)
 80010f6:	f000 ffce 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2102      	movs	r1, #2
 80010fe:	488e      	ldr	r0, [pc, #568]	; (8001338 <display7SEG+0x318>)
 8001100:	f000 ffc9 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	2104      	movs	r1, #4
 8001108:	488b      	ldr	r0, [pc, #556]	; (8001338 <display7SEG+0x318>)
 800110a:	f000 ffc4 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	2108      	movs	r1, #8
 8001112:	4889      	ldr	r0, [pc, #548]	; (8001338 <display7SEG+0x318>)
 8001114:	f000 ffbf 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	2110      	movs	r1, #16
 800111c:	4886      	ldr	r0, [pc, #536]	; (8001338 <display7SEG+0x318>)
 800111e:	f000 ffba 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	2120      	movs	r1, #32
 8001126:	4884      	ldr	r0, [pc, #528]	; (8001338 <display7SEG+0x318>)
 8001128:	f000 ffb5 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2140      	movs	r1, #64	; 0x40
 8001130:	4881      	ldr	r0, [pc, #516]	; (8001338 <display7SEG+0x318>)
 8001132:	f000 ffb0 	bl	8002096 <HAL_GPIO_WritePin>
	 	 break;
 8001136:	e0fb      	b.n	8001330 <display7SEG+0x310>
	 case 3:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	2101      	movs	r1, #1
 800113c:	487e      	ldr	r0, [pc, #504]	; (8001338 <display7SEG+0x318>)
 800113e:	f000 ffaa 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2102      	movs	r1, #2
 8001146:	487c      	ldr	r0, [pc, #496]	; (8001338 <display7SEG+0x318>)
 8001148:	f000 ffa5 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	2104      	movs	r1, #4
 8001150:	4879      	ldr	r0, [pc, #484]	; (8001338 <display7SEG+0x318>)
 8001152:	f000 ffa0 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	2108      	movs	r1, #8
 800115a:	4877      	ldr	r0, [pc, #476]	; (8001338 <display7SEG+0x318>)
 800115c:	f000 ff9b 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	2110      	movs	r1, #16
 8001164:	4874      	ldr	r0, [pc, #464]	; (8001338 <display7SEG+0x318>)
 8001166:	f000 ff96 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	2120      	movs	r1, #32
 800116e:	4872      	ldr	r0, [pc, #456]	; (8001338 <display7SEG+0x318>)
 8001170:	f000 ff91 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	2140      	movs	r1, #64	; 0x40
 8001178:	486f      	ldr	r0, [pc, #444]	; (8001338 <display7SEG+0x318>)
 800117a:	f000 ff8c 	bl	8002096 <HAL_GPIO_WritePin>
	 	 break;
 800117e:	e0d7      	b.n	8001330 <display7SEG+0x310>
	 case 4:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 8001180:	2201      	movs	r2, #1
 8001182:	2101      	movs	r1, #1
 8001184:	486c      	ldr	r0, [pc, #432]	; (8001338 <display7SEG+0x318>)
 8001186:	f000 ff86 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2102      	movs	r1, #2
 800118e:	486a      	ldr	r0, [pc, #424]	; (8001338 <display7SEG+0x318>)
 8001190:	f000 ff81 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	2104      	movs	r1, #4
 8001198:	4867      	ldr	r0, [pc, #412]	; (8001338 <display7SEG+0x318>)
 800119a:	f000 ff7c 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 800119e:	2201      	movs	r2, #1
 80011a0:	2108      	movs	r1, #8
 80011a2:	4865      	ldr	r0, [pc, #404]	; (8001338 <display7SEG+0x318>)
 80011a4:	f000 ff77 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2110      	movs	r1, #16
 80011ac:	4862      	ldr	r0, [pc, #392]	; (8001338 <display7SEG+0x318>)
 80011ae:	f000 ff72 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2120      	movs	r1, #32
 80011b6:	4860      	ldr	r0, [pc, #384]	; (8001338 <display7SEG+0x318>)
 80011b8:	f000 ff6d 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	2140      	movs	r1, #64	; 0x40
 80011c0:	485d      	ldr	r0, [pc, #372]	; (8001338 <display7SEG+0x318>)
 80011c2:	f000 ff68 	bl	8002096 <HAL_GPIO_WritePin>
	 	 break;
 80011c6:	e0b3      	b.n	8001330 <display7SEG+0x310>
	 case 5:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2101      	movs	r1, #1
 80011cc:	485a      	ldr	r0, [pc, #360]	; (8001338 <display7SEG+0x318>)
 80011ce:	f000 ff62 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2102      	movs	r1, #2
 80011d6:	4858      	ldr	r0, [pc, #352]	; (8001338 <display7SEG+0x318>)
 80011d8:	f000 ff5d 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	2104      	movs	r1, #4
 80011e0:	4855      	ldr	r0, [pc, #340]	; (8001338 <display7SEG+0x318>)
 80011e2:	f000 ff58 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2108      	movs	r1, #8
 80011ea:	4853      	ldr	r0, [pc, #332]	; (8001338 <display7SEG+0x318>)
 80011ec:	f000 ff53 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	2110      	movs	r1, #16
 80011f4:	4850      	ldr	r0, [pc, #320]	; (8001338 <display7SEG+0x318>)
 80011f6:	f000 ff4e 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2120      	movs	r1, #32
 80011fe:	484e      	ldr	r0, [pc, #312]	; (8001338 <display7SEG+0x318>)
 8001200:	f000 ff49 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2140      	movs	r1, #64	; 0x40
 8001208:	484b      	ldr	r0, [pc, #300]	; (8001338 <display7SEG+0x318>)
 800120a:	f000 ff44 	bl	8002096 <HAL_GPIO_WritePin>
	 	 break;
 800120e:	e08f      	b.n	8001330 <display7SEG+0x310>
	 case 6:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	2101      	movs	r1, #1
 8001214:	4848      	ldr	r0, [pc, #288]	; (8001338 <display7SEG+0x318>)
 8001216:	f000 ff3e 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 800121a:	2201      	movs	r2, #1
 800121c:	2102      	movs	r1, #2
 800121e:	4846      	ldr	r0, [pc, #280]	; (8001338 <display7SEG+0x318>)
 8001220:	f000 ff39 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	2104      	movs	r1, #4
 8001228:	4843      	ldr	r0, [pc, #268]	; (8001338 <display7SEG+0x318>)
 800122a:	f000 ff34 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	2108      	movs	r1, #8
 8001232:	4841      	ldr	r0, [pc, #260]	; (8001338 <display7SEG+0x318>)
 8001234:	f000 ff2f 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	2110      	movs	r1, #16
 800123c:	483e      	ldr	r0, [pc, #248]	; (8001338 <display7SEG+0x318>)
 800123e:	f000 ff2a 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2120      	movs	r1, #32
 8001246:	483c      	ldr	r0, [pc, #240]	; (8001338 <display7SEG+0x318>)
 8001248:	f000 ff25 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	2140      	movs	r1, #64	; 0x40
 8001250:	4839      	ldr	r0, [pc, #228]	; (8001338 <display7SEG+0x318>)
 8001252:	f000 ff20 	bl	8002096 <HAL_GPIO_WritePin>
	 	 break;
 8001256:	e06b      	b.n	8001330 <display7SEG+0x310>
	 case 7:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	2101      	movs	r1, #1
 800125c:	4836      	ldr	r0, [pc, #216]	; (8001338 <display7SEG+0x318>)
 800125e:	f000 ff1a 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	2102      	movs	r1, #2
 8001266:	4834      	ldr	r0, [pc, #208]	; (8001338 <display7SEG+0x318>)
 8001268:	f000 ff15 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	2104      	movs	r1, #4
 8001270:	4831      	ldr	r0, [pc, #196]	; (8001338 <display7SEG+0x318>)
 8001272:	f000 ff10 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8001276:	2201      	movs	r2, #1
 8001278:	2108      	movs	r1, #8
 800127a:	482f      	ldr	r0, [pc, #188]	; (8001338 <display7SEG+0x318>)
 800127c:	f000 ff0b 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8001280:	2201      	movs	r2, #1
 8001282:	2110      	movs	r1, #16
 8001284:	482c      	ldr	r0, [pc, #176]	; (8001338 <display7SEG+0x318>)
 8001286:	f000 ff06 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 800128a:	2201      	movs	r2, #1
 800128c:	2120      	movs	r1, #32
 800128e:	482a      	ldr	r0, [pc, #168]	; (8001338 <display7SEG+0x318>)
 8001290:	f000 ff01 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_SET);
 8001294:	2201      	movs	r2, #1
 8001296:	2140      	movs	r1, #64	; 0x40
 8001298:	4827      	ldr	r0, [pc, #156]	; (8001338 <display7SEG+0x318>)
 800129a:	f000 fefc 	bl	8002096 <HAL_GPIO_WritePin>
	 	 break;
 800129e:	e047      	b.n	8001330 <display7SEG+0x310>
	 case 8:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2101      	movs	r1, #1
 80012a4:	4824      	ldr	r0, [pc, #144]	; (8001338 <display7SEG+0x318>)
 80012a6:	f000 fef6 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2102      	movs	r1, #2
 80012ae:	4822      	ldr	r0, [pc, #136]	; (8001338 <display7SEG+0x318>)
 80012b0:	f000 fef1 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2104      	movs	r1, #4
 80012b8:	481f      	ldr	r0, [pc, #124]	; (8001338 <display7SEG+0x318>)
 80012ba:	f000 feec 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	2108      	movs	r1, #8
 80012c2:	481d      	ldr	r0, [pc, #116]	; (8001338 <display7SEG+0x318>)
 80012c4:	f000 fee7 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2110      	movs	r1, #16
 80012cc:	481a      	ldr	r0, [pc, #104]	; (8001338 <display7SEG+0x318>)
 80012ce:	f000 fee2 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2120      	movs	r1, #32
 80012d6:	4818      	ldr	r0, [pc, #96]	; (8001338 <display7SEG+0x318>)
 80012d8:	f000 fedd 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	2140      	movs	r1, #64	; 0x40
 80012e0:	4815      	ldr	r0, [pc, #84]	; (8001338 <display7SEG+0x318>)
 80012e2:	f000 fed8 	bl	8002096 <HAL_GPIO_WritePin>
	 	 break;
 80012e6:	e023      	b.n	8001330 <display7SEG+0x310>
	 case 9:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2101      	movs	r1, #1
 80012ec:	4812      	ldr	r0, [pc, #72]	; (8001338 <display7SEG+0x318>)
 80012ee:	f000 fed2 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2102      	movs	r1, #2
 80012f6:	4810      	ldr	r0, [pc, #64]	; (8001338 <display7SEG+0x318>)
 80012f8:	f000 fecd 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2104      	movs	r1, #4
 8001300:	480d      	ldr	r0, [pc, #52]	; (8001338 <display7SEG+0x318>)
 8001302:	f000 fec8 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	2108      	movs	r1, #8
 800130a:	480b      	ldr	r0, [pc, #44]	; (8001338 <display7SEG+0x318>)
 800130c:	f000 fec3 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8001310:	2201      	movs	r2, #1
 8001312:	2110      	movs	r1, #16
 8001314:	4808      	ldr	r0, [pc, #32]	; (8001338 <display7SEG+0x318>)
 8001316:	f000 febe 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2120      	movs	r1, #32
 800131e:	4806      	ldr	r0, [pc, #24]	; (8001338 <display7SEG+0x318>)
 8001320:	f000 feb9 	bl	8002096 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	2140      	movs	r1, #64	; 0x40
 8001328:	4803      	ldr	r0, [pc, #12]	; (8001338 <display7SEG+0x318>)
 800132a:	f000 feb4 	bl	8002096 <HAL_GPIO_WritePin>
	 	 break;
 800132e:	bf00      	nop
	 }
 }
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40010c00 	.word	0x40010c00

0800133c <enableLed>:



void enableLed(int index){
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b03      	cmp	r3, #3
 8001348:	d86e      	bhi.n	8001428 <enableLed+0xec>
 800134a:	a201      	add	r2, pc, #4	; (adr r2, 8001350 <enableLed+0x14>)
 800134c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001350:	08001361 	.word	0x08001361
 8001354:	08001393 	.word	0x08001393
 8001358:	080013c5 	.word	0x080013c5
 800135c:	080013f7 	.word	0x080013f7
	switch(index){
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8001360:	2201      	movs	r2, #1
 8001362:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001366:	4833      	ldr	r0, [pc, #204]	; (8001434 <enableLed+0xf8>)
 8001368:	f000 fe95 	bl	8002096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001372:	4830      	ldr	r0, [pc, #192]	; (8001434 <enableLed+0xf8>)
 8001374:	f000 fe8f 	bl	8002096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800137e:	482d      	ldr	r0, [pc, #180]	; (8001434 <enableLed+0xf8>)
 8001380:	f000 fe89 	bl	8002096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800138a:	482a      	ldr	r0, [pc, #168]	; (8001434 <enableLed+0xf8>)
 800138c:	f000 fe83 	bl	8002096 <HAL_GPIO_WritePin>
		break;
 8001390:	e04b      	b.n	800142a <enableLed+0xee>
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001398:	4826      	ldr	r0, [pc, #152]	; (8001434 <enableLed+0xf8>)
 800139a:	f000 fe7c 	bl	8002096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a4:	4823      	ldr	r0, [pc, #140]	; (8001434 <enableLed+0xf8>)
 80013a6:	f000 fe76 	bl	8002096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013b0:	4820      	ldr	r0, [pc, #128]	; (8001434 <enableLed+0xf8>)
 80013b2:	f000 fe70 	bl	8002096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013bc:	481d      	ldr	r0, [pc, #116]	; (8001434 <enableLed+0xf8>)
 80013be:	f000 fe6a 	bl	8002096 <HAL_GPIO_WritePin>
		break;
 80013c2:	e032      	b.n	800142a <enableLed+0xee>
	case 2:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ca:	481a      	ldr	r0, [pc, #104]	; (8001434 <enableLed+0xf8>)
 80013cc:	f000 fe63 	bl	8002096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013d6:	4817      	ldr	r0, [pc, #92]	; (8001434 <enableLed+0xf8>)
 80013d8:	f000 fe5d 	bl	8002096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e2:	4814      	ldr	r0, [pc, #80]	; (8001434 <enableLed+0xf8>)
 80013e4:	f000 fe57 	bl	8002096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ee:	4811      	ldr	r0, [pc, #68]	; (8001434 <enableLed+0xf8>)
 80013f0:	f000 fe51 	bl	8002096 <HAL_GPIO_WritePin>
		break;
 80013f4:	e019      	b.n	800142a <enableLed+0xee>
	case 3:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013fc:	480d      	ldr	r0, [pc, #52]	; (8001434 <enableLed+0xf8>)
 80013fe:	f000 fe4a 	bl	8002096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001408:	480a      	ldr	r0, [pc, #40]	; (8001434 <enableLed+0xf8>)
 800140a:	f000 fe44 	bl	8002096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001414:	4807      	ldr	r0, [pc, #28]	; (8001434 <enableLed+0xf8>)
 8001416:	f000 fe3e 	bl	8002096 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800141a:	2201      	movs	r2, #1
 800141c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001420:	4804      	ldr	r0, [pc, #16]	; (8001434 <enableLed+0xf8>)
 8001422:	f000 fe38 	bl	8002096 <HAL_GPIO_WritePin>
		break;
 8001426:	e000      	b.n	800142a <enableLed+0xee>
	default:
		break;
 8001428:	bf00      	nop
	}
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40010800 	.word	0x40010800

08001438 <clearLed>:

void clearLed(){
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001442:	480b      	ldr	r0, [pc, #44]	; (8001470 <clearLed+0x38>)
 8001444:	f000 fe27 	bl	8002096 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800144e:	4808      	ldr	r0, [pc, #32]	; (8001470 <clearLed+0x38>)
 8001450:	f000 fe21 	bl	8002096 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <clearLed+0x38>)
 800145c:	f000 fe1b 	bl	8002096 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001466:	4802      	ldr	r0, [pc, #8]	; (8001470 <clearLed+0x38>)
 8001468:	f000 fe15 	bl	8002096 <HAL_GPIO_WritePin>
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40010800 	.word	0x40010800

08001474 <update7SEG>:

void update7SEG(int index){
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	enableLed(index);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff5d 	bl	800133c <enableLed>
	display7SEG(led_buffer[index]);
 8001482:	4a05      	ldr	r2, [pc, #20]	; (8001498 <update7SEG+0x24>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fdc8 	bl	8001020 <display7SEG>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000070 	.word	0x20000070

0800149c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a0:	f000 faf8 	bl	8001a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a4:	f000 f810 	bl	80014c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80014a8:	f000 f84a 	bl	8001540 <MX_TIM2_Init>
  MX_GPIO_Init();
 80014ac:	f000 f894 	bl	80015d8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <main+0x28>)
 80014b2:	f001 fa4d 	bl	8002950 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_automatic_run();
 80014b6:	f7fe ffb9 	bl	800042c <fsm_automatic_run>
	  fsm_setting_run();
 80014ba:	f7ff fbc1 	bl	8000c40 <fsm_setting_run>
	  fsm_manual_run();
 80014be:	f7ff f9b3 	bl	8000828 <fsm_manual_run>
	  fsm_automatic_run();
 80014c2:	e7f8      	b.n	80014b6 <main+0x1a>
 80014c4:	200000d0 	.word	0x200000d0

080014c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b090      	sub	sp, #64	; 0x40
 80014cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ce:	f107 0318 	add.w	r3, r7, #24
 80014d2:	2228      	movs	r2, #40	; 0x28
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f001 fdea 	bl	80030b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ee:	2301      	movs	r3, #1
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014f2:	2310      	movs	r3, #16
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fa:	f107 0318 	add.w	r3, r7, #24
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fdfa 	bl	80020f8 <HAL_RCC_OscConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800150a:	f000 f8e1 	bl	80016d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150e:	230f      	movs	r3, #15
 8001510:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f001 f866 	bl	80025f8 <HAL_RCC_ClockConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001532:	f000 f8cd 	bl	80016d0 <Error_Handler>
  }
}
 8001536:	bf00      	nop
 8001538:	3740      	adds	r7, #64	; 0x40
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001554:	463b      	mov	r3, r7
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800155c:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <MX_TIM2_Init+0x94>)
 800155e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001562:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <MX_TIM2_Init+0x94>)
 8001566:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800156a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <MX_TIM2_Init+0x94>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <MX_TIM2_Init+0x94>)
 8001574:	2209      	movs	r2, #9
 8001576:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <MX_TIM2_Init+0x94>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <MX_TIM2_Init+0x94>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001584:	4813      	ldr	r0, [pc, #76]	; (80015d4 <MX_TIM2_Init+0x94>)
 8001586:	f001 f993 	bl	80028b0 <HAL_TIM_Base_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001590:	f000 f89e 	bl	80016d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001598:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	4619      	mov	r1, r3
 80015a0:	480c      	ldr	r0, [pc, #48]	; (80015d4 <MX_TIM2_Init+0x94>)
 80015a2:	f001 fb11 	bl	8002bc8 <HAL_TIM_ConfigClockSource>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015ac:	f000 f890 	bl	80016d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b0:	2300      	movs	r3, #0
 80015b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015b8:	463b      	mov	r3, r7
 80015ba:	4619      	mov	r1, r3
 80015bc:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_TIM2_Init+0x94>)
 80015be:	f001 fce9 	bl	8002f94 <HAL_TIMEx_MasterConfigSynchronization>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015c8:	f000 f882 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200000d0 	.word	0x200000d0

080015d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 0310 	add.w	r3, r7, #16
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ec:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <MX_GPIO_Init+0xd0>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	4a2d      	ldr	r2, [pc, #180]	; (80016a8 <MX_GPIO_Init+0xd0>)
 80015f2:	f043 0310 	orr.w	r3, r3, #16
 80015f6:	6193      	str	r3, [r2, #24]
 80015f8:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <MX_GPIO_Init+0xd0>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0310 	and.w	r3, r3, #16
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001604:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <MX_GPIO_Init+0xd0>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	4a27      	ldr	r2, [pc, #156]	; (80016a8 <MX_GPIO_Init+0xd0>)
 800160a:	f043 0304 	orr.w	r3, r3, #4
 800160e:	6193      	str	r3, [r2, #24]
 8001610:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <MX_GPIO_Init+0xd0>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161c:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <MX_GPIO_Init+0xd0>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4a21      	ldr	r2, [pc, #132]	; (80016a8 <MX_GPIO_Init+0xd0>)
 8001622:	f043 0308 	orr.w	r3, r3, #8
 8001626:	6193      	str	r3, [r2, #24]
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <MX_GPIO_Init+0xd0>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, test_timer_Pin|test_button_Pin|LED_RED_Pin|LED_YELLOW_Pin
 8001634:	2200      	movs	r2, #0
 8001636:	f24f 31f6 	movw	r1, #62454	; 0xf3f6
 800163a:	481c      	ldr	r0, [pc, #112]	; (80016ac <MX_GPIO_Init+0xd4>)
 800163c:	f000 fd2b 	bl	8002096 <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin|LED_RED_2_Pin|LED_YELLOW_2_Pin|LED_GREEN_2_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_4_Pin
 8001640:	2200      	movs	r2, #0
 8001642:	217f      	movs	r1, #127	; 0x7f
 8001644:	481a      	ldr	r0, [pc, #104]	; (80016b0 <MX_GPIO_Init+0xd8>)
 8001646:	f000 fd26 	bl	8002096 <HAL_GPIO_WritePin>
                          |SEG_5_Pin|SEG_6_Pin|SEG_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 800164a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800164e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001654:	2301      	movs	r3, #1
 8001656:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	4619      	mov	r1, r3
 800165e:	4815      	ldr	r0, [pc, #84]	; (80016b4 <MX_GPIO_Init+0xdc>)
 8001660:	f000 fb88 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : test_timer_Pin test_button_Pin LED_RED_Pin LED_YELLOW_Pin
                           LED_GREEN_Pin LED_RED_2_Pin LED_YELLOW_2_Pin LED_GREEN_2_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = test_timer_Pin|test_button_Pin|LED_RED_Pin|LED_YELLOW_Pin
 8001664:	f24f 33f6 	movw	r3, #62454	; 0xf3f6
 8001668:	613b      	str	r3, [r7, #16]
                          |LED_GREEN_Pin|LED_RED_2_Pin|LED_YELLOW_2_Pin|LED_GREEN_2_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166a:	2301      	movs	r3, #1
 800166c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2302      	movs	r3, #2
 8001674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 0310 	add.w	r3, r7, #16
 800167a:	4619      	mov	r1, r3
 800167c:	480b      	ldr	r0, [pc, #44]	; (80016ac <MX_GPIO_Init+0xd4>)
 800167e:	f000 fb79 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_1_Pin SEG_2_Pin SEG_3_Pin SEG_4_Pin
                           SEG_5_Pin SEG_6_Pin SEG_7_Pin */
  GPIO_InitStruct.Pin = SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_4_Pin
 8001682:	237f      	movs	r3, #127	; 0x7f
 8001684:	613b      	str	r3, [r7, #16]
                          |SEG_5_Pin|SEG_6_Pin|SEG_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001686:	2301      	movs	r3, #1
 8001688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2302      	movs	r3, #2
 8001690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001692:	f107 0310 	add.w	r3, r7, #16
 8001696:	4619      	mov	r1, r3
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_GPIO_Init+0xd8>)
 800169a:	f000 fb6b 	bl	8001d74 <HAL_GPIO_Init>

}
 800169e:	bf00      	nop
 80016a0:	3720      	adds	r7, #32
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40010800 	.word	0x40010800
 80016b0:	40010c00 	.word	0x40010c00
 80016b4:	40011000 	.word	0x40011000

080016b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	timerRun();
 80016c0:	f000 f82c 	bl	800171c <timerRun>
	getKeyInput();
 80016c4:	f7fe fd42 	bl	800014c <getKeyInput>
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d4:	b672      	cpsid	i
}
 80016d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <Error_Handler+0x8>
	...

080016dc <setTimer>:
#define ClockCycle 10

int timer_counter[10] = {0};
int timer_flag[10] = {0};

void setTimer(int index, int duration){
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/ClockCycle;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	4a09      	ldr	r2, [pc, #36]	; (8001710 <setTimer+0x34>)
 80016ea:	fb82 1203 	smull	r1, r2, r2, r3
 80016ee:	1092      	asrs	r2, r2, #2
 80016f0:	17db      	asrs	r3, r3, #31
 80016f2:	1ad2      	subs	r2, r2, r3
 80016f4:	4907      	ldr	r1, [pc, #28]	; (8001714 <setTimer+0x38>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 80016fc:	4a06      	ldr	r2, [pc, #24]	; (8001718 <setTimer+0x3c>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2100      	movs	r1, #0
 8001702:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	66666667 	.word	0x66666667
 8001714:	20000080 	.word	0x20000080
 8001718:	200000a8 	.word	0x200000a8

0800171c <timerRun>:

void timerRun(){
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
	for(int i=0; i<10; i++){
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	e016      	b.n	8001756 <timerRun+0x3a>
		timer_counter[i]--;
 8001728:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <timerRun+0x4c>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001730:	1e5a      	subs	r2, r3, #1
 8001732:	490d      	ldr	r1, [pc, #52]	; (8001768 <timerRun+0x4c>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[i] <= 0){
 800173a:	4a0b      	ldr	r2, [pc, #44]	; (8001768 <timerRun+0x4c>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001742:	2b00      	cmp	r3, #0
 8001744:	dc04      	bgt.n	8001750 <timerRun+0x34>
			timer_flag[i] = 1;
 8001746:	4a09      	ldr	r2, [pc, #36]	; (800176c <timerRun+0x50>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2101      	movs	r1, #1
 800174c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i<10; i++){
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3301      	adds	r3, #1
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b09      	cmp	r3, #9
 800175a:	dde5      	ble.n	8001728 <timerRun+0xc>
		}
	}
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	20000080 	.word	0x20000080
 800176c:	200000a8 	.word	0x200000a8

08001770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_MspInit+0x5c>)
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	4a14      	ldr	r2, [pc, #80]	; (80017cc <HAL_MspInit+0x5c>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6193      	str	r3, [r2, #24]
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_MspInit+0x5c>)
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_MspInit+0x5c>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <HAL_MspInit+0x5c>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	61d3      	str	r3, [r2, #28]
 800179a:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <HAL_MspInit+0x5c>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_MspInit+0x60>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <HAL_MspInit+0x60>)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c2:	bf00      	nop
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40010000 	.word	0x40010000

080017d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e4:	d113      	bne.n	800180e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017e6:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <HAL_TIM_Base_MspInit+0x44>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <HAL_TIM_Base_MspInit+0x44>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	61d3      	str	r3, [r2, #28]
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <HAL_TIM_Base_MspInit+0x44>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	201c      	movs	r0, #28
 8001804:	f000 fa7f 	bl	8001d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001808:	201c      	movs	r0, #28
 800180a:	f000 fa98 	bl	8001d3e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40021000 	.word	0x40021000

0800181c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <NMI_Handler+0x4>

08001822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <HardFault_Handler+0x4>

08001828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <MemManage_Handler+0x4>

0800182e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001832:	e7fe      	b.n	8001832 <BusFault_Handler+0x4>

08001834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <UsageFault_Handler+0x4>

0800183a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr

08001846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001862:	f000 f95d 	bl	8001b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <TIM2_IRQHandler+0x10>)
 8001872:	f001 f8b9 	bl	80029e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200000d0 	.word	0x200000d0

08001880 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <turn_red>:
 *      Author: Admin
 */

#include "traffic_light.h"

void turn_red(){
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001890:	2201      	movs	r2, #1
 8001892:	2110      	movs	r1, #16
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <turn_red+0x28>)
 8001896:	f000 fbfe 	bl	8002096 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	2120      	movs	r1, #32
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <turn_red+0x28>)
 80018a0:	f000 fbf9 	bl	8002096 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2140      	movs	r1, #64	; 0x40
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <turn_red+0x28>)
 80018aa:	f000 fbf4 	bl	8002096 <HAL_GPIO_WritePin>
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40010800 	.word	0x40010800

080018b8 <turn_green>:
void turn_green(){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80018bc:	2200      	movs	r2, #0
 80018be:	2110      	movs	r1, #16
 80018c0:	4807      	ldr	r0, [pc, #28]	; (80018e0 <turn_green+0x28>)
 80018c2:	f000 fbe8 	bl	8002096 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2120      	movs	r1, #32
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <turn_green+0x28>)
 80018cc:	f000 fbe3 	bl	8002096 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80018d0:	2201      	movs	r2, #1
 80018d2:	2140      	movs	r1, #64	; 0x40
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <turn_green+0x28>)
 80018d6:	f000 fbde 	bl	8002096 <HAL_GPIO_WritePin>
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40010800 	.word	0x40010800

080018e4 <turn_yellow>:
void turn_yellow(){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2110      	movs	r1, #16
 80018ec:	4807      	ldr	r0, [pc, #28]	; (800190c <turn_yellow+0x28>)
 80018ee:	f000 fbd2 	bl	8002096 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80018f2:	2201      	movs	r2, #1
 80018f4:	2120      	movs	r1, #32
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <turn_yellow+0x28>)
 80018f8:	f000 fbcd 	bl	8002096 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2140      	movs	r1, #64	; 0x40
 8001900:	4802      	ldr	r0, [pc, #8]	; (800190c <turn_yellow+0x28>)
 8001902:	f000 fbc8 	bl	8002096 <HAL_GPIO_WritePin>
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40010800 	.word	0x40010800

08001910 <turn_red_2>:
void turn_red_2(){
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8001914:	2201      	movs	r2, #1
 8001916:	2180      	movs	r1, #128	; 0x80
 8001918:	4808      	ldr	r0, [pc, #32]	; (800193c <turn_red_2+0x2c>)
 800191a:	f000 fbbc 	bl	8002096 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001924:	4805      	ldr	r0, [pc, #20]	; (800193c <turn_red_2+0x2c>)
 8001926:	f000 fbb6 	bl	8002096 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <turn_red_2+0x2c>)
 8001932:	f000 fbb0 	bl	8002096 <HAL_GPIO_WritePin>
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40010800 	.word	0x40010800

08001940 <turn_green_2>:
void turn_green_2(){
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	2180      	movs	r1, #128	; 0x80
 8001948:	4808      	ldr	r0, [pc, #32]	; (800196c <turn_green_2+0x2c>)
 800194a:	f000 fba4 	bl	8002096 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001954:	4805      	ldr	r0, [pc, #20]	; (800196c <turn_green_2+0x2c>)
 8001956:	f000 fb9e 	bl	8002096 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 800195a:	2201      	movs	r2, #1
 800195c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001960:	4802      	ldr	r0, [pc, #8]	; (800196c <turn_green_2+0x2c>)
 8001962:	f000 fb98 	bl	8002096 <HAL_GPIO_WritePin>
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40010800 	.word	0x40010800

08001970 <turn_yellow_2>:
void turn_yellow_2(){
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	2180      	movs	r1, #128	; 0x80
 8001978:	4808      	ldr	r0, [pc, #32]	; (800199c <turn_yellow_2+0x2c>)
 800197a:	f000 fb8c 	bl	8002096 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_SET);
 800197e:	2201      	movs	r2, #1
 8001980:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <turn_yellow_2+0x2c>)
 8001986:	f000 fb86 	bl	8002096 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <turn_yellow_2+0x2c>)
 8001992:	f000 fb80 	bl	8002096 <HAL_GPIO_WritePin>
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40010800 	.word	0x40010800

080019a0 <clear_light>:

void clear_light(){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2110      	movs	r1, #16
 80019a8:	480f      	ldr	r0, [pc, #60]	; (80019e8 <clear_light+0x48>)
 80019aa:	f000 fb74 	bl	8002096 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2120      	movs	r1, #32
 80019b2:	480d      	ldr	r0, [pc, #52]	; (80019e8 <clear_light+0x48>)
 80019b4:	f000 fb6f 	bl	8002096 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	2140      	movs	r1, #64	; 0x40
 80019bc:	480a      	ldr	r0, [pc, #40]	; (80019e8 <clear_light+0x48>)
 80019be:	f000 fb6a 	bl	8002096 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2180      	movs	r1, #128	; 0x80
 80019c6:	4808      	ldr	r0, [pc, #32]	; (80019e8 <clear_light+0x48>)
 80019c8:	f000 fb65 	bl	8002096 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 80019cc:	2200      	movs	r2, #0
 80019ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019d2:	4805      	ldr	r0, [pc, #20]	; (80019e8 <clear_light+0x48>)
 80019d4:	f000 fb5f 	bl	8002096 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 80019d8:	2200      	movs	r2, #0
 80019da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019de:	4802      	ldr	r0, [pc, #8]	; (80019e8 <clear_light+0x48>)
 80019e0:	f000 fb59 	bl	8002096 <HAL_GPIO_WritePin>
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40010800 	.word	0x40010800

080019ec <toggleRed>:

void toggleRed(){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80019f0:	2110      	movs	r1, #16
 80019f2:	4804      	ldr	r0, [pc, #16]	; (8001a04 <toggleRed+0x18>)
 80019f4:	f000 fb67 	bl	80020c6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	4802      	ldr	r0, [pc, #8]	; (8001a04 <toggleRed+0x18>)
 80019fc:	f000 fb63 	bl	80020c6 <HAL_GPIO_TogglePin>
}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40010800 	.word	0x40010800

08001a08 <toggleYellow>:
void toggleYellow(){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8001a0c:	2120      	movs	r1, #32
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <toggleYellow+0x1c>)
 8001a10:	f000 fb59 	bl	80020c6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin);
 8001a14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <toggleYellow+0x1c>)
 8001a1a:	f000 fb54 	bl	80020c6 <HAL_GPIO_TogglePin>
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40010800 	.word	0x40010800

08001a28 <toggleGreen>:
void toggleGreen(){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001a2c:	2140      	movs	r1, #64	; 0x40
 8001a2e:	4805      	ldr	r0, [pc, #20]	; (8001a44 <toggleGreen+0x1c>)
 8001a30:	f000 fb49 	bl	80020c6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
 8001a34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <toggleGreen+0x1c>)
 8001a3a:	f000 fb44 	bl	80020c6 <HAL_GPIO_TogglePin>
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40010800 	.word	0x40010800

08001a48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a48:	f7ff ff1a 	bl	8001880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a4c:	480b      	ldr	r0, [pc, #44]	; (8001a7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a4e:	490c      	ldr	r1, [pc, #48]	; (8001a80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a50:	4a0c      	ldr	r2, [pc, #48]	; (8001a84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a54:	e002      	b.n	8001a5c <LoopCopyDataInit>

08001a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5a:	3304      	adds	r3, #4

08001a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a60:	d3f9      	bcc.n	8001a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a62:	4a09      	ldr	r2, [pc, #36]	; (8001a88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a64:	4c09      	ldr	r4, [pc, #36]	; (8001a8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a68:	e001      	b.n	8001a6e <LoopFillZerobss>

08001a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a6c:	3204      	adds	r2, #4

08001a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a70:	d3fb      	bcc.n	8001a6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a72:	f001 faf9 	bl	8003068 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a76:	f7ff fd11 	bl	800149c <main>
  bx lr
 8001a7a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a80:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001a84:	08003104 	.word	0x08003104
  ldr r2, =_sbss
 8001a88:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001a8c:	2000011c 	.word	0x2000011c

08001a90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a90:	e7fe      	b.n	8001a90 <ADC1_2_IRQHandler>
	...

08001a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <HAL_Init+0x28>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a07      	ldr	r2, [pc, #28]	; (8001abc <HAL_Init+0x28>)
 8001a9e:	f043 0310 	orr.w	r3, r3, #16
 8001aa2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa4:	2003      	movs	r0, #3
 8001aa6:	f000 f923 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aaa:	200f      	movs	r0, #15
 8001aac:	f000 f808 	bl	8001ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab0:	f7ff fe5e 	bl	8001770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40022000 	.word	0x40022000

08001ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_InitTick+0x54>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_InitTick+0x58>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f93b 	bl	8001d5a <HAL_SYSTICK_Config>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00e      	b.n	8001b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b0f      	cmp	r3, #15
 8001af2:	d80a      	bhi.n	8001b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af4:	2200      	movs	r2, #0
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295
 8001afc:	f000 f903 	bl	8001d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b00:	4a06      	ldr	r2, [pc, #24]	; (8001b1c <HAL_InitTick+0x5c>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e000      	b.n	8001b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000024 	.word	0x20000024
 8001b18:	2000002c 	.word	0x2000002c
 8001b1c:	20000028 	.word	0x20000028

08001b20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_IncTick+0x1c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_IncTick+0x20>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4413      	add	r3, r2
 8001b30:	4a03      	ldr	r2, [pc, #12]	; (8001b40 <HAL_IncTick+0x20>)
 8001b32:	6013      	str	r3, [r2, #0]
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	2000002c 	.word	0x2000002c
 8001b40:	20000118 	.word	0x20000118

08001b44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return uwTick;
 8001b48:	4b02      	ldr	r3, [pc, #8]	; (8001b54 <HAL_GetTick+0x10>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	20000118 	.word	0x20000118

08001b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b74:	4013      	ands	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8a:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	60d3      	str	r3, [r2, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba4:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	f003 0307 	and.w	r3, r3, #7
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	db0b      	blt.n	8001be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f003 021f 	and.w	r2, r3, #31
 8001bd4:	4906      	ldr	r1, [pc, #24]	; (8001bf0 <__NVIC_EnableIRQ+0x34>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	2001      	movs	r0, #1
 8001bde:	fa00 f202 	lsl.w	r2, r0, r2
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	e000e100 	.word	0xe000e100

08001bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	6039      	str	r1, [r7, #0]
 8001bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	db0a      	blt.n	8001c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	490c      	ldr	r1, [pc, #48]	; (8001c40 <__NVIC_SetPriority+0x4c>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	0112      	lsls	r2, r2, #4
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	440b      	add	r3, r1
 8001c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c1c:	e00a      	b.n	8001c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4908      	ldr	r1, [pc, #32]	; (8001c44 <__NVIC_SetPriority+0x50>)
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	3b04      	subs	r3, #4
 8001c2c:	0112      	lsls	r2, r2, #4
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	440b      	add	r3, r1
 8001c32:	761a      	strb	r2, [r3, #24]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000e100 	.word	0xe000e100
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f1c3 0307 	rsb	r3, r3, #7
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	bf28      	it	cs
 8001c66:	2304      	movcs	r3, #4
 8001c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	2b06      	cmp	r3, #6
 8001c70:	d902      	bls.n	8001c78 <NVIC_EncodePriority+0x30>
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3b03      	subs	r3, #3
 8001c76:	e000      	b.n	8001c7a <NVIC_EncodePriority+0x32>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43da      	mvns	r2, r3
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c90:	f04f 31ff 	mov.w	r1, #4294967295
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9a:	43d9      	mvns	r1, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	4313      	orrs	r3, r2
         );
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3724      	adds	r7, #36	; 0x24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cbc:	d301      	bcc.n	8001cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00f      	b.n	8001ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <SysTick_Config+0x40>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cca:	210f      	movs	r1, #15
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd0:	f7ff ff90 	bl	8001bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <SysTick_Config+0x40>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cda:	4b04      	ldr	r3, [pc, #16]	; (8001cec <SysTick_Config+0x40>)
 8001cdc:	2207      	movs	r2, #7
 8001cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	e000e010 	.word	0xe000e010

08001cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ff2d 	bl	8001b58 <__NVIC_SetPriorityGrouping>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d18:	f7ff ff42 	bl	8001ba0 <__NVIC_GetPriorityGrouping>
 8001d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	6978      	ldr	r0, [r7, #20]
 8001d24:	f7ff ff90 	bl	8001c48 <NVIC_EncodePriority>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff5f 	bl	8001bf4 <__NVIC_SetPriority>
}
 8001d36:	bf00      	nop
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff35 	bl	8001bbc <__NVIC_EnableIRQ>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff ffa2 	bl	8001cac <SysTick_Config>
 8001d68:	4603      	mov	r3, r0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b08b      	sub	sp, #44	; 0x2c
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d86:	e148      	b.n	800201a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d88:	2201      	movs	r2, #1
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	f040 8137 	bne.w	8002014 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	4aa3      	ldr	r2, [pc, #652]	; (8002038 <HAL_GPIO_Init+0x2c4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d05e      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
 8001db0:	4aa1      	ldr	r2, [pc, #644]	; (8002038 <HAL_GPIO_Init+0x2c4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d875      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001db6:	4aa1      	ldr	r2, [pc, #644]	; (800203c <HAL_GPIO_Init+0x2c8>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d058      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
 8001dbc:	4a9f      	ldr	r2, [pc, #636]	; (800203c <HAL_GPIO_Init+0x2c8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d86f      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001dc2:	4a9f      	ldr	r2, [pc, #636]	; (8002040 <HAL_GPIO_Init+0x2cc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d052      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
 8001dc8:	4a9d      	ldr	r2, [pc, #628]	; (8002040 <HAL_GPIO_Init+0x2cc>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d869      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001dce:	4a9d      	ldr	r2, [pc, #628]	; (8002044 <HAL_GPIO_Init+0x2d0>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d04c      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
 8001dd4:	4a9b      	ldr	r2, [pc, #620]	; (8002044 <HAL_GPIO_Init+0x2d0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d863      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001dda:	4a9b      	ldr	r2, [pc, #620]	; (8002048 <HAL_GPIO_Init+0x2d4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d046      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
 8001de0:	4a99      	ldr	r2, [pc, #612]	; (8002048 <HAL_GPIO_Init+0x2d4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d85d      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001de6:	2b12      	cmp	r3, #18
 8001de8:	d82a      	bhi.n	8001e40 <HAL_GPIO_Init+0xcc>
 8001dea:	2b12      	cmp	r3, #18
 8001dec:	d859      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001dee:	a201      	add	r2, pc, #4	; (adr r2, 8001df4 <HAL_GPIO_Init+0x80>)
 8001df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df4:	08001e6f 	.word	0x08001e6f
 8001df8:	08001e49 	.word	0x08001e49
 8001dfc:	08001e5b 	.word	0x08001e5b
 8001e00:	08001e9d 	.word	0x08001e9d
 8001e04:	08001ea3 	.word	0x08001ea3
 8001e08:	08001ea3 	.word	0x08001ea3
 8001e0c:	08001ea3 	.word	0x08001ea3
 8001e10:	08001ea3 	.word	0x08001ea3
 8001e14:	08001ea3 	.word	0x08001ea3
 8001e18:	08001ea3 	.word	0x08001ea3
 8001e1c:	08001ea3 	.word	0x08001ea3
 8001e20:	08001ea3 	.word	0x08001ea3
 8001e24:	08001ea3 	.word	0x08001ea3
 8001e28:	08001ea3 	.word	0x08001ea3
 8001e2c:	08001ea3 	.word	0x08001ea3
 8001e30:	08001ea3 	.word	0x08001ea3
 8001e34:	08001ea3 	.word	0x08001ea3
 8001e38:	08001e51 	.word	0x08001e51
 8001e3c:	08001e65 	.word	0x08001e65
 8001e40:	4a82      	ldr	r2, [pc, #520]	; (800204c <HAL_GPIO_Init+0x2d8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d013      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e46:	e02c      	b.n	8001ea2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	623b      	str	r3, [r7, #32]
          break;
 8001e4e:	e029      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	3304      	adds	r3, #4
 8001e56:	623b      	str	r3, [r7, #32]
          break;
 8001e58:	e024      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	3308      	adds	r3, #8
 8001e60:	623b      	str	r3, [r7, #32]
          break;
 8001e62:	e01f      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	330c      	adds	r3, #12
 8001e6a:	623b      	str	r3, [r7, #32]
          break;
 8001e6c:	e01a      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d102      	bne.n	8001e7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e76:	2304      	movs	r3, #4
 8001e78:	623b      	str	r3, [r7, #32]
          break;
 8001e7a:	e013      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d105      	bne.n	8001e90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e84:	2308      	movs	r3, #8
 8001e86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	611a      	str	r2, [r3, #16]
          break;
 8001e8e:	e009      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e90:	2308      	movs	r3, #8
 8001e92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	615a      	str	r2, [r3, #20]
          break;
 8001e9a:	e003      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	623b      	str	r3, [r7, #32]
          break;
 8001ea0:	e000      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          break;
 8001ea2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	2bff      	cmp	r3, #255	; 0xff
 8001ea8:	d801      	bhi.n	8001eae <HAL_GPIO_Init+0x13a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	e001      	b.n	8001eb2 <HAL_GPIO_Init+0x13e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	2bff      	cmp	r3, #255	; 0xff
 8001eb8:	d802      	bhi.n	8001ec0 <HAL_GPIO_Init+0x14c>
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	e002      	b.n	8001ec6 <HAL_GPIO_Init+0x152>
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	3b08      	subs	r3, #8
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	210f      	movs	r1, #15
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	6a39      	ldr	r1, [r7, #32]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 8090 	beq.w	8002014 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ef4:	4b56      	ldr	r3, [pc, #344]	; (8002050 <HAL_GPIO_Init+0x2dc>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4a55      	ldr	r2, [pc, #340]	; (8002050 <HAL_GPIO_Init+0x2dc>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6193      	str	r3, [r2, #24]
 8001f00:	4b53      	ldr	r3, [pc, #332]	; (8002050 <HAL_GPIO_Init+0x2dc>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f0c:	4a51      	ldr	r2, [pc, #324]	; (8002054 <HAL_GPIO_Init+0x2e0>)
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	089b      	lsrs	r3, r3, #2
 8001f12:	3302      	adds	r3, #2
 8001f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	220f      	movs	r2, #15
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a49      	ldr	r2, [pc, #292]	; (8002058 <HAL_GPIO_Init+0x2e4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d00d      	beq.n	8001f54 <HAL_GPIO_Init+0x1e0>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a48      	ldr	r2, [pc, #288]	; (800205c <HAL_GPIO_Init+0x2e8>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d007      	beq.n	8001f50 <HAL_GPIO_Init+0x1dc>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a47      	ldr	r2, [pc, #284]	; (8002060 <HAL_GPIO_Init+0x2ec>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d101      	bne.n	8001f4c <HAL_GPIO_Init+0x1d8>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e004      	b.n	8001f56 <HAL_GPIO_Init+0x1e2>
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e002      	b.n	8001f56 <HAL_GPIO_Init+0x1e2>
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <HAL_GPIO_Init+0x1e2>
 8001f54:	2300      	movs	r3, #0
 8001f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f58:	f002 0203 	and.w	r2, r2, #3
 8001f5c:	0092      	lsls	r2, r2, #2
 8001f5e:	4093      	lsls	r3, r2
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f66:	493b      	ldr	r1, [pc, #236]	; (8002054 <HAL_GPIO_Init+0x2e0>)
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d006      	beq.n	8001f8e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f80:	4b38      	ldr	r3, [pc, #224]	; (8002064 <HAL_GPIO_Init+0x2f0>)
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	4937      	ldr	r1, [pc, #220]	; (8002064 <HAL_GPIO_Init+0x2f0>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	608b      	str	r3, [r1, #8]
 8001f8c:	e006      	b.n	8001f9c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f8e:	4b35      	ldr	r3, [pc, #212]	; (8002064 <HAL_GPIO_Init+0x2f0>)
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	4933      	ldr	r1, [pc, #204]	; (8002064 <HAL_GPIO_Init+0x2f0>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d006      	beq.n	8001fb6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fa8:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <HAL_GPIO_Init+0x2f0>)
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	492d      	ldr	r1, [pc, #180]	; (8002064 <HAL_GPIO_Init+0x2f0>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	60cb      	str	r3, [r1, #12]
 8001fb4:	e006      	b.n	8001fc4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fb6:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <HAL_GPIO_Init+0x2f0>)
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	4929      	ldr	r1, [pc, #164]	; (8002064 <HAL_GPIO_Init+0x2f0>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d006      	beq.n	8001fde <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fd0:	4b24      	ldr	r3, [pc, #144]	; (8002064 <HAL_GPIO_Init+0x2f0>)
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	4923      	ldr	r1, [pc, #140]	; (8002064 <HAL_GPIO_Init+0x2f0>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
 8001fdc:	e006      	b.n	8001fec <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fde:	4b21      	ldr	r3, [pc, #132]	; (8002064 <HAL_GPIO_Init+0x2f0>)
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	491f      	ldr	r1, [pc, #124]	; (8002064 <HAL_GPIO_Init+0x2f0>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d006      	beq.n	8002006 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ff8:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <HAL_GPIO_Init+0x2f0>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4919      	ldr	r1, [pc, #100]	; (8002064 <HAL_GPIO_Init+0x2f0>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]
 8002004:	e006      	b.n	8002014 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002006:	4b17      	ldr	r3, [pc, #92]	; (8002064 <HAL_GPIO_Init+0x2f0>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	43db      	mvns	r3, r3
 800200e:	4915      	ldr	r1, [pc, #84]	; (8002064 <HAL_GPIO_Init+0x2f0>)
 8002010:	4013      	ands	r3, r2
 8002012:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	3301      	adds	r3, #1
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	fa22 f303 	lsr.w	r3, r2, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	f47f aeaf 	bne.w	8001d88 <HAL_GPIO_Init+0x14>
  }
}
 800202a:	bf00      	nop
 800202c:	bf00      	nop
 800202e:	372c      	adds	r7, #44	; 0x2c
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	10320000 	.word	0x10320000
 800203c:	10310000 	.word	0x10310000
 8002040:	10220000 	.word	0x10220000
 8002044:	10210000 	.word	0x10210000
 8002048:	10120000 	.word	0x10120000
 800204c:	10110000 	.word	0x10110000
 8002050:	40021000 	.word	0x40021000
 8002054:	40010000 	.word	0x40010000
 8002058:	40010800 	.word	0x40010800
 800205c:	40010c00 	.word	0x40010c00
 8002060:	40011000 	.word	0x40011000
 8002064:	40010400 	.word	0x40010400

08002068 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	887b      	ldrh	r3, [r7, #2]
 800207a:	4013      	ands	r3, r2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d002      	beq.n	8002086 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002080:	2301      	movs	r3, #1
 8002082:	73fb      	strb	r3, [r7, #15]
 8002084:	e001      	b.n	800208a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002086:	2300      	movs	r3, #0
 8002088:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800208a:	7bfb      	ldrb	r3, [r7, #15]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr

08002096 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	460b      	mov	r3, r1
 80020a0:	807b      	strh	r3, [r7, #2]
 80020a2:	4613      	mov	r3, r2
 80020a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020a6:	787b      	ldrb	r3, [r7, #1]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ac:	887a      	ldrh	r2, [r7, #2]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020b2:	e003      	b.n	80020bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020b4:	887b      	ldrh	r3, [r7, #2]
 80020b6:	041a      	lsls	r2, r3, #16
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	611a      	str	r2, [r3, #16]
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr

080020c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b085      	sub	sp, #20
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	460b      	mov	r3, r1
 80020d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020d8:	887a      	ldrh	r2, [r7, #2]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4013      	ands	r3, r2
 80020de:	041a      	lsls	r2, r3, #16
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	43d9      	mvns	r1, r3
 80020e4:	887b      	ldrh	r3, [r7, #2]
 80020e6:	400b      	ands	r3, r1
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	611a      	str	r2, [r3, #16]
}
 80020ee:	bf00      	nop
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e26c      	b.n	80025e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8087 	beq.w	8002226 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002118:	4b92      	ldr	r3, [pc, #584]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	2b04      	cmp	r3, #4
 8002122:	d00c      	beq.n	800213e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002124:	4b8f      	ldr	r3, [pc, #572]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 030c 	and.w	r3, r3, #12
 800212c:	2b08      	cmp	r3, #8
 800212e:	d112      	bne.n	8002156 <HAL_RCC_OscConfig+0x5e>
 8002130:	4b8c      	ldr	r3, [pc, #560]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213c:	d10b      	bne.n	8002156 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213e:	4b89      	ldr	r3, [pc, #548]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d06c      	beq.n	8002224 <HAL_RCC_OscConfig+0x12c>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d168      	bne.n	8002224 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e246      	b.n	80025e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800215e:	d106      	bne.n	800216e <HAL_RCC_OscConfig+0x76>
 8002160:	4b80      	ldr	r3, [pc, #512]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a7f      	ldr	r2, [pc, #508]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	e02e      	b.n	80021cc <HAL_RCC_OscConfig+0xd4>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10c      	bne.n	8002190 <HAL_RCC_OscConfig+0x98>
 8002176:	4b7b      	ldr	r3, [pc, #492]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a7a      	ldr	r2, [pc, #488]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 800217c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	4b78      	ldr	r3, [pc, #480]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a77      	ldr	r2, [pc, #476]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	e01d      	b.n	80021cc <HAL_RCC_OscConfig+0xd4>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0xbc>
 800219a:	4b72      	ldr	r3, [pc, #456]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a71      	ldr	r2, [pc, #452]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b6f      	ldr	r3, [pc, #444]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a6e      	ldr	r2, [pc, #440]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e00b      	b.n	80021cc <HAL_RCC_OscConfig+0xd4>
 80021b4:	4b6b      	ldr	r3, [pc, #428]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a6a      	ldr	r2, [pc, #424]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	4b68      	ldr	r3, [pc, #416]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a67      	ldr	r2, [pc, #412]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d013      	beq.n	80021fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7ff fcb6 	bl	8001b44 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021dc:	f7ff fcb2 	bl	8001b44 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e1fa      	b.n	80025e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ee:	4b5d      	ldr	r3, [pc, #372]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0xe4>
 80021fa:	e014      	b.n	8002226 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fc:	f7ff fca2 	bl	8001b44 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002204:	f7ff fc9e 	bl	8001b44 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	; 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e1e6      	b.n	80025e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002216:	4b53      	ldr	r3, [pc, #332]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x10c>
 8002222:	e000      	b.n	8002226 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d063      	beq.n	80022fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002232:	4b4c      	ldr	r3, [pc, #304]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00b      	beq.n	8002256 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800223e:	4b49      	ldr	r3, [pc, #292]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b08      	cmp	r3, #8
 8002248:	d11c      	bne.n	8002284 <HAL_RCC_OscConfig+0x18c>
 800224a:	4b46      	ldr	r3, [pc, #280]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d116      	bne.n	8002284 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002256:	4b43      	ldr	r3, [pc, #268]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_RCC_OscConfig+0x176>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d001      	beq.n	800226e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e1ba      	b.n	80025e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226e:	4b3d      	ldr	r3, [pc, #244]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4939      	ldr	r1, [pc, #228]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002282:	e03a      	b.n	80022fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d020      	beq.n	80022ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800228c:	4b36      	ldr	r3, [pc, #216]	; (8002368 <HAL_RCC_OscConfig+0x270>)
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002292:	f7ff fc57 	bl	8001b44 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800229a:	f7ff fc53 	bl	8001b44 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e19b      	b.n	80025e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ac:	4b2d      	ldr	r3, [pc, #180]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f0      	beq.n	800229a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b8:	4b2a      	ldr	r3, [pc, #168]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4927      	ldr	r1, [pc, #156]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	600b      	str	r3, [r1, #0]
 80022cc:	e015      	b.n	80022fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ce:	4b26      	ldr	r3, [pc, #152]	; (8002368 <HAL_RCC_OscConfig+0x270>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7ff fc36 	bl	8001b44 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022dc:	f7ff fc32 	bl	8001b44 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e17a      	b.n	80025e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ee:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d03a      	beq.n	800237c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d019      	beq.n	8002342 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230e:	4b17      	ldr	r3, [pc, #92]	; (800236c <HAL_RCC_OscConfig+0x274>)
 8002310:	2201      	movs	r2, #1
 8002312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002314:	f7ff fc16 	bl	8001b44 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800231c:	f7ff fc12 	bl	8001b44 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e15a      	b.n	80025e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232e:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800233a:	2001      	movs	r0, #1
 800233c:	f000 fa9a 	bl	8002874 <RCC_Delay>
 8002340:	e01c      	b.n	800237c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_RCC_OscConfig+0x274>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002348:	f7ff fbfc 	bl	8001b44 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234e:	e00f      	b.n	8002370 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002350:	f7ff fbf8 	bl	8001b44 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d908      	bls.n	8002370 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e140      	b.n	80025e4 <HAL_RCC_OscConfig+0x4ec>
 8002362:	bf00      	nop
 8002364:	40021000 	.word	0x40021000
 8002368:	42420000 	.word	0x42420000
 800236c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002370:	4b9e      	ldr	r3, [pc, #632]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1e9      	bne.n	8002350 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 80a6 	beq.w	80024d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800238a:	2300      	movs	r3, #0
 800238c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238e:	4b97      	ldr	r3, [pc, #604]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10d      	bne.n	80023b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	4b94      	ldr	r3, [pc, #592]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4a93      	ldr	r2, [pc, #588]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a4:	61d3      	str	r3, [r2, #28]
 80023a6:	4b91      	ldr	r3, [pc, #580]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b2:	2301      	movs	r3, #1
 80023b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	4b8e      	ldr	r3, [pc, #568]	; (80025f0 <HAL_RCC_OscConfig+0x4f8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d118      	bne.n	80023f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c2:	4b8b      	ldr	r3, [pc, #556]	; (80025f0 <HAL_RCC_OscConfig+0x4f8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a8a      	ldr	r2, [pc, #552]	; (80025f0 <HAL_RCC_OscConfig+0x4f8>)
 80023c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ce:	f7ff fbb9 	bl	8001b44 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d6:	f7ff fbb5 	bl	8001b44 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b64      	cmp	r3, #100	; 0x64
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e0fd      	b.n	80025e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e8:	4b81      	ldr	r3, [pc, #516]	; (80025f0 <HAL_RCC_OscConfig+0x4f8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d106      	bne.n	800240a <HAL_RCC_OscConfig+0x312>
 80023fc:	4b7b      	ldr	r3, [pc, #492]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	4a7a      	ldr	r2, [pc, #488]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6213      	str	r3, [r2, #32]
 8002408:	e02d      	b.n	8002466 <HAL_RCC_OscConfig+0x36e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10c      	bne.n	800242c <HAL_RCC_OscConfig+0x334>
 8002412:	4b76      	ldr	r3, [pc, #472]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	4a75      	ldr	r2, [pc, #468]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	6213      	str	r3, [r2, #32]
 800241e:	4b73      	ldr	r3, [pc, #460]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4a72      	ldr	r2, [pc, #456]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 8002424:	f023 0304 	bic.w	r3, r3, #4
 8002428:	6213      	str	r3, [r2, #32]
 800242a:	e01c      	b.n	8002466 <HAL_RCC_OscConfig+0x36e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b05      	cmp	r3, #5
 8002432:	d10c      	bne.n	800244e <HAL_RCC_OscConfig+0x356>
 8002434:	4b6d      	ldr	r3, [pc, #436]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4a6c      	ldr	r2, [pc, #432]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 800243a:	f043 0304 	orr.w	r3, r3, #4
 800243e:	6213      	str	r3, [r2, #32]
 8002440:	4b6a      	ldr	r3, [pc, #424]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	4a69      	ldr	r2, [pc, #420]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6213      	str	r3, [r2, #32]
 800244c:	e00b      	b.n	8002466 <HAL_RCC_OscConfig+0x36e>
 800244e:	4b67      	ldr	r3, [pc, #412]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4a66      	ldr	r2, [pc, #408]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 8002454:	f023 0301 	bic.w	r3, r3, #1
 8002458:	6213      	str	r3, [r2, #32]
 800245a:	4b64      	ldr	r3, [pc, #400]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4a63      	ldr	r2, [pc, #396]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 8002460:	f023 0304 	bic.w	r3, r3, #4
 8002464:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d015      	beq.n	800249a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246e:	f7ff fb69 	bl	8001b44 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002474:	e00a      	b.n	800248c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002476:	f7ff fb65 	bl	8001b44 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	f241 3288 	movw	r2, #5000	; 0x1388
 8002484:	4293      	cmp	r3, r2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e0ab      	b.n	80025e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248c:	4b57      	ldr	r3, [pc, #348]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0ee      	beq.n	8002476 <HAL_RCC_OscConfig+0x37e>
 8002498:	e014      	b.n	80024c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249a:	f7ff fb53 	bl	8001b44 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a0:	e00a      	b.n	80024b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a2:	f7ff fb4f 	bl	8001b44 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e095      	b.n	80025e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b8:	4b4c      	ldr	r3, [pc, #304]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1ee      	bne.n	80024a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024c4:	7dfb      	ldrb	r3, [r7, #23]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d105      	bne.n	80024d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ca:	4b48      	ldr	r3, [pc, #288]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	4a47      	ldr	r2, [pc, #284]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 80024d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 8081 	beq.w	80025e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024e0:	4b42      	ldr	r3, [pc, #264]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d061      	beq.n	80025b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d146      	bne.n	8002582 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f4:	4b3f      	ldr	r3, [pc, #252]	; (80025f4 <HAL_RCC_OscConfig+0x4fc>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fa:	f7ff fb23 	bl	8001b44 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002502:	f7ff fb1f 	bl	8001b44 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e067      	b.n	80025e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002514:	4b35      	ldr	r3, [pc, #212]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1f0      	bne.n	8002502 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002528:	d108      	bne.n	800253c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	492d      	ldr	r1, [pc, #180]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800253c:	4b2b      	ldr	r3, [pc, #172]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a19      	ldr	r1, [r3, #32]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	430b      	orrs	r3, r1
 800254e:	4927      	ldr	r1, [pc, #156]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 8002550:	4313      	orrs	r3, r2
 8002552:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002554:	4b27      	ldr	r3, [pc, #156]	; (80025f4 <HAL_RCC_OscConfig+0x4fc>)
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7ff faf3 	bl	8001b44 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002562:	f7ff faef 	bl	8001b44 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e037      	b.n	80025e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x46a>
 8002580:	e02f      	b.n	80025e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002582:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <HAL_RCC_OscConfig+0x4fc>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7ff fadc 	bl	8001b44 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002590:	f7ff fad8 	bl	8001b44 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e020      	b.n	80025e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a2:	4b12      	ldr	r3, [pc, #72]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x498>
 80025ae:	e018      	b.n	80025e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e013      	b.n	80025e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025bc:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <HAL_RCC_OscConfig+0x4f4>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d106      	bne.n	80025de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d001      	beq.n	80025e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40007000 	.word	0x40007000
 80025f4:	42420060 	.word	0x42420060

080025f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0d0      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800260c:	4b6a      	ldr	r3, [pc, #424]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d910      	bls.n	800263c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b67      	ldr	r3, [pc, #412]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 0207 	bic.w	r2, r3, #7
 8002622:	4965      	ldr	r1, [pc, #404]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	4313      	orrs	r3, r2
 8002628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262a:	4b63      	ldr	r3, [pc, #396]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d001      	beq.n	800263c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0b8      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d020      	beq.n	800268a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002654:	4b59      	ldr	r3, [pc, #356]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4a58      	ldr	r2, [pc, #352]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800265e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800266c:	4b53      	ldr	r3, [pc, #332]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4a52      	ldr	r2, [pc, #328]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002676:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002678:	4b50      	ldr	r3, [pc, #320]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	494d      	ldr	r1, [pc, #308]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	4313      	orrs	r3, r2
 8002688:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d040      	beq.n	8002718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d107      	bne.n	80026ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	4b47      	ldr	r3, [pc, #284]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d115      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e07f      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d107      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b6:	4b41      	ldr	r3, [pc, #260]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e073      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c6:	4b3d      	ldr	r3, [pc, #244]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e06b      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026d6:	4b39      	ldr	r3, [pc, #228]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f023 0203 	bic.w	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4936      	ldr	r1, [pc, #216]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e8:	f7ff fa2c 	bl	8001b44 <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f0:	f7ff fa28 	bl	8001b44 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e053      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002706:	4b2d      	ldr	r3, [pc, #180]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 020c 	and.w	r2, r3, #12
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	429a      	cmp	r2, r3
 8002716:	d1eb      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002718:	4b27      	ldr	r3, [pc, #156]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d210      	bcs.n	8002748 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 0207 	bic.w	r2, r3, #7
 800272e:	4922      	ldr	r1, [pc, #136]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	4313      	orrs	r3, r2
 8002734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e032      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4916      	ldr	r1, [pc, #88]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	4313      	orrs	r3, r2
 8002764:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d009      	beq.n	8002786 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002772:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	490e      	ldr	r1, [pc, #56]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002786:	f000 f821 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 800278a:	4602      	mov	r2, r0
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	091b      	lsrs	r3, r3, #4
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	490a      	ldr	r1, [pc, #40]	; (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002798:	5ccb      	ldrb	r3, [r1, r3]
 800279a:	fa22 f303 	lsr.w	r3, r2, r3
 800279e:	4a09      	ldr	r2, [pc, #36]	; (80027c4 <HAL_RCC_ClockConfig+0x1cc>)
 80027a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027a2:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <HAL_RCC_ClockConfig+0x1d0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff f98a 	bl	8001ac0 <HAL_InitTick>

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40022000 	.word	0x40022000
 80027bc:	40021000 	.word	0x40021000
 80027c0:	080030d8 	.word	0x080030d8
 80027c4:	20000024 	.word	0x20000024
 80027c8:	20000028 	.word	0x20000028

080027cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	2300      	movs	r3, #0
 80027e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027e6:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <HAL_RCC_GetSysClockFreq+0x94>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d002      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x30>
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d003      	beq.n	8002802 <HAL_RCC_GetSysClockFreq+0x36>
 80027fa:	e027      	b.n	800284c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027fc:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_RCC_GetSysClockFreq+0x98>)
 80027fe:	613b      	str	r3, [r7, #16]
      break;
 8002800:	e027      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	0c9b      	lsrs	r3, r3, #18
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	4a17      	ldr	r2, [pc, #92]	; (8002868 <HAL_RCC_GetSysClockFreq+0x9c>)
 800280c:	5cd3      	ldrb	r3, [r2, r3]
 800280e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d010      	beq.n	800283c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <HAL_RCC_GetSysClockFreq+0x94>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	0c5b      	lsrs	r3, r3, #17
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	4a11      	ldr	r2, [pc, #68]	; (800286c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002826:	5cd3      	ldrb	r3, [r2, r3]
 8002828:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a0d      	ldr	r2, [pc, #52]	; (8002864 <HAL_RCC_GetSysClockFreq+0x98>)
 800282e:	fb02 f203 	mul.w	r2, r2, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	fbb2 f3f3 	udiv	r3, r2, r3
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	e004      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a0c      	ldr	r2, [pc, #48]	; (8002870 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002840:	fb02 f303 	mul.w	r3, r2, r3
 8002844:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	613b      	str	r3, [r7, #16]
      break;
 800284a:	e002      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_RCC_GetSysClockFreq+0x98>)
 800284e:	613b      	str	r3, [r7, #16]
      break;
 8002850:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002852:	693b      	ldr	r3, [r7, #16]
}
 8002854:	4618      	mov	r0, r3
 8002856:	371c      	adds	r7, #28
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	007a1200 	.word	0x007a1200
 8002868:	080030e8 	.word	0x080030e8
 800286c:	080030f8 	.word	0x080030f8
 8002870:	003d0900 	.word	0x003d0900

08002874 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800287c:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <RCC_Delay+0x34>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <RCC_Delay+0x38>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	0a5b      	lsrs	r3, r3, #9
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	fb02 f303 	mul.w	r3, r2, r3
 800288e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002890:	bf00      	nop
  }
  while (Delay --);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1e5a      	subs	r2, r3, #1
 8002896:	60fa      	str	r2, [r7, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f9      	bne.n	8002890 <RCC_Delay+0x1c>
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	20000024 	.word	0x20000024
 80028ac:	10624dd3 	.word	0x10624dd3

080028b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e041      	b.n	8002946 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fe ff7c 	bl	80017d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3304      	adds	r3, #4
 80028ec:	4619      	mov	r1, r3
 80028ee:	4610      	mov	r0, r2
 80028f0:	f000 fa56 	bl	8002da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	d001      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e035      	b.n	80029d4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a16      	ldr	r2, [pc, #88]	; (80029e0 <HAL_TIM_Base_Start_IT+0x90>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d009      	beq.n	800299e <HAL_TIM_Base_Start_IT+0x4e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002992:	d004      	beq.n	800299e <HAL_TIM_Base_Start_IT+0x4e>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a12      	ldr	r2, [pc, #72]	; (80029e4 <HAL_TIM_Base_Start_IT+0x94>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d111      	bne.n	80029c2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b06      	cmp	r3, #6
 80029ae:	d010      	beq.n	80029d2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c0:	e007      	b.n	80029d2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0201 	orr.w	r2, r2, #1
 80029d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40012c00 	.word	0x40012c00
 80029e4:	40000400 	.word	0x40000400

080029e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d020      	beq.n	8002a4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d01b      	beq.n	8002a4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f06f 0202 	mvn.w	r2, #2
 8002a1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f998 	bl	8002d68 <HAL_TIM_IC_CaptureCallback>
 8002a38:	e005      	b.n	8002a46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f98b 	bl	8002d56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f99a 	bl	8002d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d020      	beq.n	8002a98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01b      	beq.n	8002a98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0204 	mvn.w	r2, #4
 8002a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f972 	bl	8002d68 <HAL_TIM_IC_CaptureCallback>
 8002a84:	e005      	b.n	8002a92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f965 	bl	8002d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f974 	bl	8002d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d020      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01b      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0208 	mvn.w	r2, #8
 8002ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2204      	movs	r2, #4
 8002aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f94c 	bl	8002d68 <HAL_TIM_IC_CaptureCallback>
 8002ad0:	e005      	b.n	8002ade <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f93f 	bl	8002d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f94e 	bl	8002d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d020      	beq.n	8002b30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d01b      	beq.n	8002b30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0210 	mvn.w	r2, #16
 8002b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2208      	movs	r2, #8
 8002b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f926 	bl	8002d68 <HAL_TIM_IC_CaptureCallback>
 8002b1c:	e005      	b.n	8002b2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f919 	bl	8002d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f928 	bl	8002d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00c      	beq.n	8002b54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d007      	beq.n	8002b54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0201 	mvn.w	r2, #1
 8002b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fe fdb2 	bl	80016b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00c      	beq.n	8002b78 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d007      	beq.n	8002b78 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 fa6f 	bl	8003056 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00c      	beq.n	8002b9c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d007      	beq.n	8002b9c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f8f8 	bl	8002d8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00c      	beq.n	8002bc0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f003 0320 	and.w	r3, r3, #32
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d007      	beq.n	8002bc0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0220 	mvn.w	r2, #32
 8002bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 fa42 	bl	8003044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_TIM_ConfigClockSource+0x1c>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e0b4      	b.n	8002d4e <HAL_TIM_ConfigClockSource+0x186>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c1c:	d03e      	beq.n	8002c9c <HAL_TIM_ConfigClockSource+0xd4>
 8002c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c22:	f200 8087 	bhi.w	8002d34 <HAL_TIM_ConfigClockSource+0x16c>
 8002c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2a:	f000 8086 	beq.w	8002d3a <HAL_TIM_ConfigClockSource+0x172>
 8002c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c32:	d87f      	bhi.n	8002d34 <HAL_TIM_ConfigClockSource+0x16c>
 8002c34:	2b70      	cmp	r3, #112	; 0x70
 8002c36:	d01a      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0xa6>
 8002c38:	2b70      	cmp	r3, #112	; 0x70
 8002c3a:	d87b      	bhi.n	8002d34 <HAL_TIM_ConfigClockSource+0x16c>
 8002c3c:	2b60      	cmp	r3, #96	; 0x60
 8002c3e:	d050      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x11a>
 8002c40:	2b60      	cmp	r3, #96	; 0x60
 8002c42:	d877      	bhi.n	8002d34 <HAL_TIM_ConfigClockSource+0x16c>
 8002c44:	2b50      	cmp	r3, #80	; 0x50
 8002c46:	d03c      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0xfa>
 8002c48:	2b50      	cmp	r3, #80	; 0x50
 8002c4a:	d873      	bhi.n	8002d34 <HAL_TIM_ConfigClockSource+0x16c>
 8002c4c:	2b40      	cmp	r3, #64	; 0x40
 8002c4e:	d058      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x13a>
 8002c50:	2b40      	cmp	r3, #64	; 0x40
 8002c52:	d86f      	bhi.n	8002d34 <HAL_TIM_ConfigClockSource+0x16c>
 8002c54:	2b30      	cmp	r3, #48	; 0x30
 8002c56:	d064      	beq.n	8002d22 <HAL_TIM_ConfigClockSource+0x15a>
 8002c58:	2b30      	cmp	r3, #48	; 0x30
 8002c5a:	d86b      	bhi.n	8002d34 <HAL_TIM_ConfigClockSource+0x16c>
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	d060      	beq.n	8002d22 <HAL_TIM_ConfigClockSource+0x15a>
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	d867      	bhi.n	8002d34 <HAL_TIM_ConfigClockSource+0x16c>
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d05c      	beq.n	8002d22 <HAL_TIM_ConfigClockSource+0x15a>
 8002c68:	2b10      	cmp	r3, #16
 8002c6a:	d05a      	beq.n	8002d22 <HAL_TIM_ConfigClockSource+0x15a>
 8002c6c:	e062      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6899      	ldr	r1, [r3, #8]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f000 f96a 	bl	8002f56 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	609a      	str	r2, [r3, #8]
      break;
 8002c9a:	e04f      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6818      	ldr	r0, [r3, #0]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	6899      	ldr	r1, [r3, #8]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f000 f953 	bl	8002f56 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cbe:	609a      	str	r2, [r3, #8]
      break;
 8002cc0:	e03c      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6859      	ldr	r1, [r3, #4]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f000 f8ca 	bl	8002e68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2150      	movs	r1, #80	; 0x50
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f921 	bl	8002f22 <TIM_ITRx_SetConfig>
      break;
 8002ce0:	e02c      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6859      	ldr	r1, [r3, #4]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	f000 f8e8 	bl	8002ec4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2160      	movs	r1, #96	; 0x60
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 f911 	bl	8002f22 <TIM_ITRx_SetConfig>
      break;
 8002d00:	e01c      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6859      	ldr	r1, [r3, #4]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	f000 f8aa 	bl	8002e68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2140      	movs	r1, #64	; 0x40
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f901 	bl	8002f22 <TIM_ITRx_SetConfig>
      break;
 8002d20:	e00c      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	f000 f8f8 	bl	8002f22 <TIM_ITRx_SetConfig>
      break;
 8002d32:	e003      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
      break;
 8002d38:	e000      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr

08002d7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr
	...

08002da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a2b      	ldr	r2, [pc, #172]	; (8002e60 <TIM_Base_SetConfig+0xc0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d007      	beq.n	8002dc8 <TIM_Base_SetConfig+0x28>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbe:	d003      	beq.n	8002dc8 <TIM_Base_SetConfig+0x28>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a28      	ldr	r2, [pc, #160]	; (8002e64 <TIM_Base_SetConfig+0xc4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d108      	bne.n	8002dda <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a20      	ldr	r2, [pc, #128]	; (8002e60 <TIM_Base_SetConfig+0xc0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d007      	beq.n	8002df2 <TIM_Base_SetConfig+0x52>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de8:	d003      	beq.n	8002df2 <TIM_Base_SetConfig+0x52>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a1d      	ldr	r2, [pc, #116]	; (8002e64 <TIM_Base_SetConfig+0xc4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d108      	bne.n	8002e04 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a0d      	ldr	r2, [pc, #52]	; (8002e60 <TIM_Base_SetConfig+0xc0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d103      	bne.n	8002e38 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f023 0201 	bic.w	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	611a      	str	r2, [r3, #16]
  }
}
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr
 8002e60:	40012c00 	.word	0x40012c00
 8002e64:	40000400 	.word	0x40000400

08002e68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	f023 0201 	bic.w	r2, r3, #1
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f023 030a 	bic.w	r3, r3, #10
 8002ea4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	621a      	str	r2, [r3, #32]
}
 8002eba:	bf00      	nop
 8002ebc:	371c      	adds	r7, #28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	f023 0210 	bic.w	r2, r3, #16
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	031b      	lsls	r3, r3, #12
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f00:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	621a      	str	r2, [r3, #32]
}
 8002f18:	bf00      	nop
 8002f1a:	371c      	adds	r7, #28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr

08002f22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b085      	sub	sp, #20
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f043 0307 	orr.w	r3, r3, #7
 8002f44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	609a      	str	r2, [r3, #8]
}
 8002f4c:	bf00      	nop
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr

08002f56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b087      	sub	sp, #28
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f70:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	021a      	lsls	r2, r3, #8
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	609a      	str	r2, [r3, #8]
}
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e041      	b.n	8003030 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a14      	ldr	r2, [pc, #80]	; (800303c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d009      	beq.n	8003004 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff8:	d004      	beq.n	8003004 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a10      	ldr	r2, [pc, #64]	; (8003040 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d10c      	bne.n	800301e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800300a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	4313      	orrs	r3, r2
 8003014:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40012c00 	.word	0x40012c00
 8003040:	40000400 	.word	0x40000400

08003044 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr

08003056 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <__libc_init_array>:
 8003068:	b570      	push	{r4, r5, r6, lr}
 800306a:	2600      	movs	r6, #0
 800306c:	4d0c      	ldr	r5, [pc, #48]	; (80030a0 <__libc_init_array+0x38>)
 800306e:	4c0d      	ldr	r4, [pc, #52]	; (80030a4 <__libc_init_array+0x3c>)
 8003070:	1b64      	subs	r4, r4, r5
 8003072:	10a4      	asrs	r4, r4, #2
 8003074:	42a6      	cmp	r6, r4
 8003076:	d109      	bne.n	800308c <__libc_init_array+0x24>
 8003078:	f000 f822 	bl	80030c0 <_init>
 800307c:	2600      	movs	r6, #0
 800307e:	4d0a      	ldr	r5, [pc, #40]	; (80030a8 <__libc_init_array+0x40>)
 8003080:	4c0a      	ldr	r4, [pc, #40]	; (80030ac <__libc_init_array+0x44>)
 8003082:	1b64      	subs	r4, r4, r5
 8003084:	10a4      	asrs	r4, r4, #2
 8003086:	42a6      	cmp	r6, r4
 8003088:	d105      	bne.n	8003096 <__libc_init_array+0x2e>
 800308a:	bd70      	pop	{r4, r5, r6, pc}
 800308c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003090:	4798      	blx	r3
 8003092:	3601      	adds	r6, #1
 8003094:	e7ee      	b.n	8003074 <__libc_init_array+0xc>
 8003096:	f855 3b04 	ldr.w	r3, [r5], #4
 800309a:	4798      	blx	r3
 800309c:	3601      	adds	r6, #1
 800309e:	e7f2      	b.n	8003086 <__libc_init_array+0x1e>
 80030a0:	080030fc 	.word	0x080030fc
 80030a4:	080030fc 	.word	0x080030fc
 80030a8:	080030fc 	.word	0x080030fc
 80030ac:	08003100 	.word	0x08003100

080030b0 <memset>:
 80030b0:	4603      	mov	r3, r0
 80030b2:	4402      	add	r2, r0
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d100      	bne.n	80030ba <memset+0xa>
 80030b8:	4770      	bx	lr
 80030ba:	f803 1b01 	strb.w	r1, [r3], #1
 80030be:	e7f9      	b.n	80030b4 <memset+0x4>

080030c0 <_init>:
 80030c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c2:	bf00      	nop
 80030c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c6:	bc08      	pop	{r3}
 80030c8:	469e      	mov	lr, r3
 80030ca:	4770      	bx	lr

080030cc <_fini>:
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ce:	bf00      	nop
 80030d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d2:	bc08      	pop	{r3}
 80030d4:	469e      	mov	lr, r3
 80030d6:	4770      	bx	lr
