
stm32_lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ea8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002fb4  08002fb4  00012fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fd8  08002fd8  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08002fd8  08002fd8  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fd8  08002fd8  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fd8  08002fd8  00012fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fdc  08002fdc  00012fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000030  08003010  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08003010  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009cf8  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d59  00000000  00000000  00029d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002bab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002c558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001740e  00000000  00000000  0002ced0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2c9  00000000  00000000  000442de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008254e  00000000  00000000  000515a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3af5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f4  00000000  00000000  000d3b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f9c 	.word	0x08002f9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08002f9c 	.word	0x08002f9c

0800014c <getKeyInput>:
void getKeyInput1();
void getKeyInput2();
void getKeyInput3();


void getKeyInput(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int i=0; i<3; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e011      	b.n	800017c <getKeyInput+0x30>
		if(i == 0){
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	2b00      	cmp	r3, #0
 800015c:	d101      	bne.n	8000162 <getKeyInput+0x16>
			getKeyInput1();
 800015e:	f000 f815 	bl	800018c <getKeyInput1>
		}
		if(i == 1){
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2b01      	cmp	r3, #1
 8000166:	d101      	bne.n	800016c <getKeyInput+0x20>
			getKeyInput2();
 8000168:	f000 f880 	bl	800026c <getKeyInput2>
		}
		if(i == 2){
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2b02      	cmp	r3, #2
 8000170:	d101      	bne.n	8000176 <getKeyInput+0x2a>
			getKeyInput3();
 8000172:	f000 f8eb 	bl	800034c <getKeyInput3>
	for(int i=0; i<3; i++){
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	3301      	adds	r3, #1
 800017a:	607b      	str	r3, [r7, #4]
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b02      	cmp	r3, #2
 8000180:	ddea      	ble.n	8000158 <getKeyInput+0xc>
		}
	}
}
 8000182:	bf00      	nop
 8000184:	bf00      	nop
 8000186:	3708      	adds	r7, #8
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}

0800018c <getKeyInput1>:


void getKeyInput1() {
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
    // BUTTON 1
    switch(pressType[0]) {
 8000190:	4b32      	ldr	r3, [pc, #200]	; (800025c <getKeyInput1+0xd0>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	2b04      	cmp	r3, #4
 8000196:	d85a      	bhi.n	800024e <getKeyInput1+0xc2>
 8000198:	a201      	add	r2, pc, #4	; (adr r2, 80001a0 <getKeyInput1+0x14>)
 800019a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800019e:	bf00      	nop
 80001a0:	080001b5 	.word	0x080001b5
 80001a4:	080001cd 	.word	0x080001cd
 80001a8:	080001ed 	.word	0x080001ed
 80001ac:	0800024f 	.word	0x0800024f
 80001b0:	08000219 	.word	0x08000219
    case ZERO:
        if (HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin) == NORMAL_STATE) {
 80001b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001b8:	4829      	ldr	r0, [pc, #164]	; (8000260 <getKeyInput1+0xd4>)
 80001ba:	f001 fec3 	bl	8001f44 <HAL_GPIO_ReadPin>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d046      	beq.n	8000252 <getKeyInput1+0xc6>
            return;
        }
        pressType[0] = PRESS_RELEASE_1;
 80001c4:	4b25      	ldr	r3, [pc, #148]	; (800025c <getKeyInput1+0xd0>)
 80001c6:	2201      	movs	r2, #1
 80001c8:	601a      	str	r2, [r3, #0]
        break;
 80001ca:	e045      	b.n	8000258 <getKeyInput1+0xcc>
    case PRESS_RELEASE_1:
        if (HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin) == NORMAL_STATE) {
 80001cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d0:	4823      	ldr	r0, [pc, #140]	; (8000260 <getKeyInput1+0xd4>)
 80001d2:	f001 feb7 	bl	8001f44 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b01      	cmp	r3, #1
 80001da:	d103      	bne.n	80001e4 <getKeyInput1+0x58>
            pressType[0] = ZERO;
 80001dc:	4b1f      	ldr	r3, [pc, #124]	; (800025c <getKeyInput1+0xd0>)
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
            return;
 80001e2:	e039      	b.n	8000258 <getKeyInput1+0xcc>
        }
        pressType[0] = PRESS_RELEASE_2;
 80001e4:	4b1d      	ldr	r3, [pc, #116]	; (800025c <getKeyInput1+0xd0>)
 80001e6:	2202      	movs	r2, #2
 80001e8:	601a      	str	r2, [r3, #0]
        break;
 80001ea:	e035      	b.n	8000258 <getKeyInput1+0xcc>
    case PRESS_RELEASE_2:
        if (HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin) == NORMAL_STATE) {
 80001ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f0:	481b      	ldr	r0, [pc, #108]	; (8000260 <getKeyInput1+0xd4>)
 80001f2:	f001 fea7 	bl	8001f44 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d103      	bne.n	8000204 <getKeyInput1+0x78>
            pressType[0] = ZERO;
 80001fc:	4b17      	ldr	r3, [pc, #92]	; (800025c <getKeyInput1+0xd0>)
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
            return;
 8000202:	e029      	b.n	8000258 <getKeyInput1+0xcc>
        }
        button_flag[0] = 1;
 8000204:	4b17      	ldr	r3, [pc, #92]	; (8000264 <getKeyInput1+0xd8>)
 8000206:	2201      	movs	r2, #1
 8000208:	601a      	str	r2, [r3, #0]
        pressType[0] = PRESS_OVER;
 800020a:	4b14      	ldr	r3, [pc, #80]	; (800025c <getKeyInput1+0xd0>)
 800020c:	2204      	movs	r2, #4
 800020e:	601a      	str	r2, [r3, #0]
        TimeOutForKeyPress[0] = 200;
 8000210:	4b15      	ldr	r3, [pc, #84]	; (8000268 <getKeyInput1+0xdc>)
 8000212:	22c8      	movs	r2, #200	; 0xc8
 8000214:	601a      	str	r2, [r3, #0]
        break;
 8000216:	e01f      	b.n	8000258 <getKeyInput1+0xcc>
    case PRESS_OVER:
        --TimeOutForKeyPress[0];
 8000218:	4b13      	ldr	r3, [pc, #76]	; (8000268 <getKeyInput1+0xdc>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	3b01      	subs	r3, #1
 800021e:	4a12      	ldr	r2, [pc, #72]	; (8000268 <getKeyInput1+0xdc>)
 8000220:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress[0] == 0) {
 8000222:	4b11      	ldr	r3, [pc, #68]	; (8000268 <getKeyInput1+0xdc>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d105      	bne.n	8000236 <getKeyInput1+0xaa>
            TimeOutForKeyPress[0] = 200;
 800022a:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <getKeyInput1+0xdc>)
 800022c:	22c8      	movs	r2, #200	; 0xc8
 800022e:	601a      	str	r2, [r3, #0]
            button_flag[0] = 1;
 8000230:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <getKeyInput1+0xd8>)
 8000232:	2201      	movs	r2, #1
 8000234:	601a      	str	r2, [r3, #0]
        }
        if (HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin) == NORMAL_STATE) {
 8000236:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800023a:	4809      	ldr	r0, [pc, #36]	; (8000260 <getKeyInput1+0xd4>)
 800023c:	f001 fe82 	bl	8001f44 <HAL_GPIO_ReadPin>
 8000240:	4603      	mov	r3, r0
 8000242:	2b01      	cmp	r3, #1
 8000244:	d107      	bne.n	8000256 <getKeyInput1+0xca>
            pressType[0] = ZERO;
 8000246:	4b05      	ldr	r3, [pc, #20]	; (800025c <getKeyInput1+0xd0>)
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
        }
        break;
 800024c:	e003      	b.n	8000256 <getKeyInput1+0xca>
    default:
        break;
 800024e:	bf00      	nop
 8000250:	e002      	b.n	8000258 <getKeyInput1+0xcc>
            return;
 8000252:	bf00      	nop
 8000254:	e000      	b.n	8000258 <getKeyInput1+0xcc>
        break;
 8000256:	bf00      	nop
    }
}
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000058 	.word	0x20000058
 8000260:	40011000 	.word	0x40011000
 8000264:	2000004c 	.word	0x2000004c
 8000268:	20000000 	.word	0x20000000

0800026c <getKeyInput2>:

void getKeyInput2(){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
    // BUTTON 2
    switch(pressType[1]) {
 8000270:	4b32      	ldr	r3, [pc, #200]	; (800033c <getKeyInput2+0xd0>)
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	2b04      	cmp	r3, #4
 8000276:	d85a      	bhi.n	800032e <getKeyInput2+0xc2>
 8000278:	a201      	add	r2, pc, #4	; (adr r2, 8000280 <getKeyInput2+0x14>)
 800027a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800027e:	bf00      	nop
 8000280:	08000295 	.word	0x08000295
 8000284:	080002ad 	.word	0x080002ad
 8000288:	080002cd 	.word	0x080002cd
 800028c:	0800032f 	.word	0x0800032f
 8000290:	080002f9 	.word	0x080002f9
    case ZERO:
        if (HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin) == NORMAL_STATE) {
 8000294:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000298:	4829      	ldr	r0, [pc, #164]	; (8000340 <getKeyInput2+0xd4>)
 800029a:	f001 fe53 	bl	8001f44 <HAL_GPIO_ReadPin>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d046      	beq.n	8000332 <getKeyInput2+0xc6>
            return;
        }
        pressType[1] = PRESS_RELEASE_1;
 80002a4:	4b25      	ldr	r3, [pc, #148]	; (800033c <getKeyInput2+0xd0>)
 80002a6:	2201      	movs	r2, #1
 80002a8:	605a      	str	r2, [r3, #4]
        break;
 80002aa:	e045      	b.n	8000338 <getKeyInput2+0xcc>
    case PRESS_RELEASE_1:
        if (HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin) == NORMAL_STATE) {
 80002ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002b0:	4823      	ldr	r0, [pc, #140]	; (8000340 <getKeyInput2+0xd4>)
 80002b2:	f001 fe47 	bl	8001f44 <HAL_GPIO_ReadPin>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d103      	bne.n	80002c4 <getKeyInput2+0x58>
            pressType[1] = ZERO;
 80002bc:	4b1f      	ldr	r3, [pc, #124]	; (800033c <getKeyInput2+0xd0>)
 80002be:	2200      	movs	r2, #0
 80002c0:	605a      	str	r2, [r3, #4]
            return;
 80002c2:	e039      	b.n	8000338 <getKeyInput2+0xcc>
        }
        pressType[1] = PRESS_RELEASE_2;
 80002c4:	4b1d      	ldr	r3, [pc, #116]	; (800033c <getKeyInput2+0xd0>)
 80002c6:	2202      	movs	r2, #2
 80002c8:	605a      	str	r2, [r3, #4]
        break;
 80002ca:	e035      	b.n	8000338 <getKeyInput2+0xcc>
    case PRESS_RELEASE_2:
        if (HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin) == NORMAL_STATE) {
 80002cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002d0:	481b      	ldr	r0, [pc, #108]	; (8000340 <getKeyInput2+0xd4>)
 80002d2:	f001 fe37 	bl	8001f44 <HAL_GPIO_ReadPin>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d103      	bne.n	80002e4 <getKeyInput2+0x78>
            pressType[1] = ZERO;
 80002dc:	4b17      	ldr	r3, [pc, #92]	; (800033c <getKeyInput2+0xd0>)
 80002de:	2200      	movs	r2, #0
 80002e0:	605a      	str	r2, [r3, #4]
            return;
 80002e2:	e029      	b.n	8000338 <getKeyInput2+0xcc>
        }
        button_flag[1] = 1;
 80002e4:	4b17      	ldr	r3, [pc, #92]	; (8000344 <getKeyInput2+0xd8>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	605a      	str	r2, [r3, #4]
        pressType[1] = PRESS_OVER;
 80002ea:	4b14      	ldr	r3, [pc, #80]	; (800033c <getKeyInput2+0xd0>)
 80002ec:	2204      	movs	r2, #4
 80002ee:	605a      	str	r2, [r3, #4]
        TimeOutForKeyPress[1] = 200;
 80002f0:	4b15      	ldr	r3, [pc, #84]	; (8000348 <getKeyInput2+0xdc>)
 80002f2:	22c8      	movs	r2, #200	; 0xc8
 80002f4:	605a      	str	r2, [r3, #4]
        break;
 80002f6:	e01f      	b.n	8000338 <getKeyInput2+0xcc>
    case PRESS_OVER:
        --TimeOutForKeyPress[1];
 80002f8:	4b13      	ldr	r3, [pc, #76]	; (8000348 <getKeyInput2+0xdc>)
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	3b01      	subs	r3, #1
 80002fe:	4a12      	ldr	r2, [pc, #72]	; (8000348 <getKeyInput2+0xdc>)
 8000300:	6053      	str	r3, [r2, #4]
        if (TimeOutForKeyPress[1] == 0) {
 8000302:	4b11      	ldr	r3, [pc, #68]	; (8000348 <getKeyInput2+0xdc>)
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d105      	bne.n	8000316 <getKeyInput2+0xaa>
            TimeOutForKeyPress[1] = 200;
 800030a:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <getKeyInput2+0xdc>)
 800030c:	22c8      	movs	r2, #200	; 0xc8
 800030e:	605a      	str	r2, [r3, #4]
            button_flag[1] = 1;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <getKeyInput2+0xd8>)
 8000312:	2201      	movs	r2, #1
 8000314:	605a      	str	r2, [r3, #4]
        }
        if (HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin) == NORMAL_STATE) {
 8000316:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800031a:	4809      	ldr	r0, [pc, #36]	; (8000340 <getKeyInput2+0xd4>)
 800031c:	f001 fe12 	bl	8001f44 <HAL_GPIO_ReadPin>
 8000320:	4603      	mov	r3, r0
 8000322:	2b01      	cmp	r3, #1
 8000324:	d107      	bne.n	8000336 <getKeyInput2+0xca>
            pressType[1] = ZERO;
 8000326:	4b05      	ldr	r3, [pc, #20]	; (800033c <getKeyInput2+0xd0>)
 8000328:	2200      	movs	r2, #0
 800032a:	605a      	str	r2, [r3, #4]
        }
        break;
 800032c:	e003      	b.n	8000336 <getKeyInput2+0xca>
    default:
        break;
 800032e:	bf00      	nop
 8000330:	e002      	b.n	8000338 <getKeyInput2+0xcc>
            return;
 8000332:	bf00      	nop
 8000334:	e000      	b.n	8000338 <getKeyInput2+0xcc>
        break;
 8000336:	bf00      	nop
    }
}
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000058 	.word	0x20000058
 8000340:	40011000 	.word	0x40011000
 8000344:	2000004c 	.word	0x2000004c
 8000348:	20000000 	.word	0x20000000

0800034c <getKeyInput3>:

void getKeyInput3(){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
    // BUTTON 3
    switch(pressType[2]) {
 8000350:	4b32      	ldr	r3, [pc, #200]	; (800041c <getKeyInput3+0xd0>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	2b04      	cmp	r3, #4
 8000356:	d85a      	bhi.n	800040e <getKeyInput3+0xc2>
 8000358:	a201      	add	r2, pc, #4	; (adr r2, 8000360 <getKeyInput3+0x14>)
 800035a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800035e:	bf00      	nop
 8000360:	08000375 	.word	0x08000375
 8000364:	0800038d 	.word	0x0800038d
 8000368:	080003ad 	.word	0x080003ad
 800036c:	0800040f 	.word	0x0800040f
 8000370:	080003d9 	.word	0x080003d9
    case ZERO:
        if (HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin) == NORMAL_STATE) {
 8000374:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000378:	4829      	ldr	r0, [pc, #164]	; (8000420 <getKeyInput3+0xd4>)
 800037a:	f001 fde3 	bl	8001f44 <HAL_GPIO_ReadPin>
 800037e:	4603      	mov	r3, r0
 8000380:	2b01      	cmp	r3, #1
 8000382:	d046      	beq.n	8000412 <getKeyInput3+0xc6>
            return;
        }
        pressType[2] = PRESS_RELEASE_1;
 8000384:	4b25      	ldr	r3, [pc, #148]	; (800041c <getKeyInput3+0xd0>)
 8000386:	2201      	movs	r2, #1
 8000388:	609a      	str	r2, [r3, #8]
        break;
 800038a:	e045      	b.n	8000418 <getKeyInput3+0xcc>
    case PRESS_RELEASE_1:
        if (HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin) == NORMAL_STATE) {
 800038c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000390:	4823      	ldr	r0, [pc, #140]	; (8000420 <getKeyInput3+0xd4>)
 8000392:	f001 fdd7 	bl	8001f44 <HAL_GPIO_ReadPin>
 8000396:	4603      	mov	r3, r0
 8000398:	2b01      	cmp	r3, #1
 800039a:	d103      	bne.n	80003a4 <getKeyInput3+0x58>
            pressType[2] = ZERO;
 800039c:	4b1f      	ldr	r3, [pc, #124]	; (800041c <getKeyInput3+0xd0>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
            return;
 80003a2:	e039      	b.n	8000418 <getKeyInput3+0xcc>
        }
        pressType[2] = PRESS_RELEASE_2;
 80003a4:	4b1d      	ldr	r3, [pc, #116]	; (800041c <getKeyInput3+0xd0>)
 80003a6:	2202      	movs	r2, #2
 80003a8:	609a      	str	r2, [r3, #8]
        break;
 80003aa:	e035      	b.n	8000418 <getKeyInput3+0xcc>
    case PRESS_RELEASE_2:
        if (HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin) == NORMAL_STATE) {
 80003ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003b0:	481b      	ldr	r0, [pc, #108]	; (8000420 <getKeyInput3+0xd4>)
 80003b2:	f001 fdc7 	bl	8001f44 <HAL_GPIO_ReadPin>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d103      	bne.n	80003c4 <getKeyInput3+0x78>
            pressType[2] = ZERO;
 80003bc:	4b17      	ldr	r3, [pc, #92]	; (800041c <getKeyInput3+0xd0>)
 80003be:	2200      	movs	r2, #0
 80003c0:	609a      	str	r2, [r3, #8]
            return;
 80003c2:	e029      	b.n	8000418 <getKeyInput3+0xcc>
        }
        button_flag[2] = 1;
 80003c4:	4b17      	ldr	r3, [pc, #92]	; (8000424 <getKeyInput3+0xd8>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	609a      	str	r2, [r3, #8]
        pressType[2] = PRESS_OVER;
 80003ca:	4b14      	ldr	r3, [pc, #80]	; (800041c <getKeyInput3+0xd0>)
 80003cc:	2204      	movs	r2, #4
 80003ce:	609a      	str	r2, [r3, #8]
        TimeOutForKeyPress[2] = 200;
 80003d0:	4b15      	ldr	r3, [pc, #84]	; (8000428 <getKeyInput3+0xdc>)
 80003d2:	22c8      	movs	r2, #200	; 0xc8
 80003d4:	609a      	str	r2, [r3, #8]
        break;
 80003d6:	e01f      	b.n	8000418 <getKeyInput3+0xcc>
    case PRESS_OVER:
        --TimeOutForKeyPress[2];
 80003d8:	4b13      	ldr	r3, [pc, #76]	; (8000428 <getKeyInput3+0xdc>)
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	3b01      	subs	r3, #1
 80003de:	4a12      	ldr	r2, [pc, #72]	; (8000428 <getKeyInput3+0xdc>)
 80003e0:	6093      	str	r3, [r2, #8]
        if (TimeOutForKeyPress[2] == 0) {
 80003e2:	4b11      	ldr	r3, [pc, #68]	; (8000428 <getKeyInput3+0xdc>)
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d105      	bne.n	80003f6 <getKeyInput3+0xaa>
            TimeOutForKeyPress[2] = 200;
 80003ea:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <getKeyInput3+0xdc>)
 80003ec:	22c8      	movs	r2, #200	; 0xc8
 80003ee:	609a      	str	r2, [r3, #8]
            button_flag[2] = 1;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <getKeyInput3+0xd8>)
 80003f2:	2201      	movs	r2, #1
 80003f4:	609a      	str	r2, [r3, #8]
        }
        if (HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin) == NORMAL_STATE) {
 80003f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003fa:	4809      	ldr	r0, [pc, #36]	; (8000420 <getKeyInput3+0xd4>)
 80003fc:	f001 fda2 	bl	8001f44 <HAL_GPIO_ReadPin>
 8000400:	4603      	mov	r3, r0
 8000402:	2b01      	cmp	r3, #1
 8000404:	d107      	bne.n	8000416 <getKeyInput3+0xca>
            pressType[2] = ZERO;
 8000406:	4b05      	ldr	r3, [pc, #20]	; (800041c <getKeyInput3+0xd0>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
        }
        break;
 800040c:	e003      	b.n	8000416 <getKeyInput3+0xca>
    default:
        break;
 800040e:	bf00      	nop
 8000410:	e002      	b.n	8000418 <getKeyInput3+0xcc>
            return;
 8000412:	bf00      	nop
 8000414:	e000      	b.n	8000418 <getKeyInput3+0xcc>
        break;
 8000416:	bf00      	nop
    }
}
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000058 	.word	0x20000058
 8000420:	40011000 	.word	0x40011000
 8000424:	2000004c 	.word	0x2000004c
 8000428:	20000000 	.word	0x20000000

0800042c <fsm_automatic_run>:
 */

#include "fsm_automatic.h"

int status = INIT;
void fsm_automatic_run(){
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	switch(status){
 8000430:	4b6c      	ldr	r3, [pc, #432]	; (80005e4 <fsm_automatic_run+0x1b8>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	2b04      	cmp	r3, #4
 8000436:	f200 827d 	bhi.w	8000934 <fsm_automatic_run+0x508>
 800043a:	a201      	add	r2, pc, #4	; (adr r2, 8000440 <fsm_automatic_run+0x14>)
 800043c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000440:	08000455 	.word	0x08000455
 8000444:	080004df 	.word	0x080004df
 8000448:	08000609 	.word	0x08000609
 800044c:	0800070d 	.word	0x0800070d
 8000450:	0800083d 	.word	0x0800083d
	case INIT:
		//when something wrong
		if((green_time + yellow_time) != red_time){
 8000454:	4b64      	ldr	r3, [pc, #400]	; (80005e8 <fsm_automatic_run+0x1bc>)
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	4b64      	ldr	r3, [pc, #400]	; (80005ec <fsm_automatic_run+0x1c0>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	441a      	add	r2, r3
 800045e:	4b64      	ldr	r3, [pc, #400]	; (80005f0 <fsm_automatic_run+0x1c4>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	429a      	cmp	r2, r3
 8000464:	d006      	beq.n	8000474 <fsm_automatic_run+0x48>
			green_time = red_time - yellow_time;
 8000466:	4b62      	ldr	r3, [pc, #392]	; (80005f0 <fsm_automatic_run+0x1c4>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b60      	ldr	r3, [pc, #384]	; (80005ec <fsm_automatic_run+0x1c0>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	4a5d      	ldr	r2, [pc, #372]	; (80005e8 <fsm_automatic_run+0x1bc>)
 8000472:	6013      	str	r3, [r2, #0]
		}
		if(green_time < yellow_time){
 8000474:	4b5c      	ldr	r3, [pc, #368]	; (80005e8 <fsm_automatic_run+0x1bc>)
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	4b5c      	ldr	r3, [pc, #368]	; (80005ec <fsm_automatic_run+0x1c0>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	429a      	cmp	r2, r3
 800047e:	da14      	bge.n	80004aa <fsm_automatic_run+0x7e>
			green_time += yellow_time;
 8000480:	4b59      	ldr	r3, [pc, #356]	; (80005e8 <fsm_automatic_run+0x1bc>)
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	4b59      	ldr	r3, [pc, #356]	; (80005ec <fsm_automatic_run+0x1c0>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4413      	add	r3, r2
 800048a:	4a57      	ldr	r2, [pc, #348]	; (80005e8 <fsm_automatic_run+0x1bc>)
 800048c:	6013      	str	r3, [r2, #0]
			yellow_time = green_time - yellow_time;
 800048e:	4b56      	ldr	r3, [pc, #344]	; (80005e8 <fsm_automatic_run+0x1bc>)
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	4b56      	ldr	r3, [pc, #344]	; (80005ec <fsm_automatic_run+0x1c0>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	1ad3      	subs	r3, r2, r3
 8000498:	4a54      	ldr	r2, [pc, #336]	; (80005ec <fsm_automatic_run+0x1c0>)
 800049a:	6013      	str	r3, [r2, #0]
			green_time -= yellow_time;
 800049c:	4b52      	ldr	r3, [pc, #328]	; (80005e8 <fsm_automatic_run+0x1bc>)
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	4b52      	ldr	r3, [pc, #328]	; (80005ec <fsm_automatic_run+0x1c0>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	1ad3      	subs	r3, r2, r3
 80004a6:	4a50      	ldr	r2, [pc, #320]	; (80005e8 <fsm_automatic_run+0x1bc>)
 80004a8:	6013      	str	r3, [r2, #0]
		}

		setTimer(1, green_time*1000);
 80004aa:	4b4f      	ldr	r3, [pc, #316]	; (80005e8 <fsm_automatic_run+0x1bc>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004b2:	fb02 f303 	mul.w	r3, r2, r3
 80004b6:	4619      	mov	r1, r3
 80004b8:	2001      	movs	r0, #1
 80004ba:	f001 f87d 	bl	80015b8 <setTimer>
		setTimer(2, 1000);
 80004be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004c2:	2002      	movs	r0, #2
 80004c4:	f001 f878 	bl	80015b8 <setTimer>
		setTimer(3, 250);
 80004c8:	21fa      	movs	r1, #250	; 0xfa
 80004ca:	2003      	movs	r0, #3
 80004cc:	f001 f874 	bl	80015b8 <setTimer>
		New = 1;
 80004d0:	4b48      	ldr	r3, [pc, #288]	; (80005f4 <fsm_automatic_run+0x1c8>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	601a      	str	r2, [r3, #0]
		status = RED1_GREEN;
 80004d6:	4b43      	ldr	r3, [pc, #268]	; (80005e4 <fsm_automatic_run+0x1b8>)
 80004d8:	2201      	movs	r2, #1
 80004da:	601a      	str	r2, [r3, #0]
		break;
 80004dc:	e233      	b.n	8000946 <fsm_automatic_run+0x51a>
	case RED1_GREEN:
		//When just turn status
		if(New == 1){
 80004de:	4b45      	ldr	r3, [pc, #276]	; (80005f4 <fsm_automatic_run+0x1c8>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d110      	bne.n	8000508 <fsm_automatic_run+0xdc>
			turn_red();
 80004e6:	f001 f93f 	bl	8001768 <turn_red>
			turn_green_2();
 80004ea:	f001 f997 	bl	800181c <turn_green_2>
			led_buffer[1] = red_time - 1;
 80004ee:	4b40      	ldr	r3, [pc, #256]	; (80005f0 <fsm_automatic_run+0x1c4>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	3b01      	subs	r3, #1
 80004f4:	4a40      	ldr	r2, [pc, #256]	; (80005f8 <fsm_automatic_run+0x1cc>)
 80004f6:	6053      	str	r3, [r2, #4]
			led_buffer[3] = green_time -1;
 80004f8:	4b3b      	ldr	r3, [pc, #236]	; (80005e8 <fsm_automatic_run+0x1bc>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	3b01      	subs	r3, #1
 80004fe:	4a3e      	ldr	r2, [pc, #248]	; (80005f8 <fsm_automatic_run+0x1cc>)
 8000500:	60d3      	str	r3, [r2, #12]
			New = 0;
 8000502:	4b3c      	ldr	r3, [pc, #240]	; (80005f4 <fsm_automatic_run+0x1c8>)
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
		}

		//COUNTDOWN TRAFFIC LIGHTS
		if(timer_flag[1] == 1){
 8000508:	4b3c      	ldr	r3, [pc, #240]	; (80005fc <fsm_automatic_run+0x1d0>)
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d112      	bne.n	8000536 <fsm_automatic_run+0x10a>
			led_buffer[3] = 1;
 8000510:	4b39      	ldr	r3, [pc, #228]	; (80005f8 <fsm_automatic_run+0x1cc>)
 8000512:	2201      	movs	r2, #1
 8000514:	60da      	str	r2, [r3, #12]
			status = RED1_YELLOW;
 8000516:	4b33      	ldr	r3, [pc, #204]	; (80005e4 <fsm_automatic_run+0x1b8>)
 8000518:	2202      	movs	r2, #2
 800051a:	601a      	str	r2, [r3, #0]
			New = 1;
 800051c:	4b35      	ldr	r3, [pc, #212]	; (80005f4 <fsm_automatic_run+0x1c8>)
 800051e:	2201      	movs	r2, #1
 8000520:	601a      	str	r2, [r3, #0]
			setTimer(1, yellow_time*1000);
 8000522:	4b32      	ldr	r3, [pc, #200]	; (80005ec <fsm_automatic_run+0x1c0>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800052a:	fb02 f303 	mul.w	r3, r2, r3
 800052e:	4619      	mov	r1, r3
 8000530:	2001      	movs	r0, #1
 8000532:	f001 f841 	bl	80015b8 <setTimer>
		}

		//7-SEGMENT LEDS
		if(idx == 4){
 8000536:	4b32      	ldr	r3, [pc, #200]	; (8000600 <fsm_automatic_run+0x1d4>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b04      	cmp	r3, #4
 800053c:	d102      	bne.n	8000544 <fsm_automatic_run+0x118>
			idx = 0;
 800053e:	4b30      	ldr	r3, [pc, #192]	; (8000600 <fsm_automatic_run+0x1d4>)
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[3] == 1){
 8000544:	4b2d      	ldr	r3, [pc, #180]	; (80005fc <fsm_automatic_run+0x1d0>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d10b      	bne.n	8000564 <fsm_automatic_run+0x138>
			update7SEG(idx++);
 800054c:	4b2c      	ldr	r3, [pc, #176]	; (8000600 <fsm_automatic_run+0x1d4>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	1c5a      	adds	r2, r3, #1
 8000552:	492b      	ldr	r1, [pc, #172]	; (8000600 <fsm_automatic_run+0x1d4>)
 8000554:	600a      	str	r2, [r1, #0]
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fefa 	bl	8001350 <update7SEG>
			setTimer(3,250);
 800055c:	21fa      	movs	r1, #250	; 0xfa
 800055e:	2003      	movs	r0, #3
 8000560:	f001 f82a 	bl	80015b8 <setTimer>
		}
		if(timer_flag[2] == 1){
 8000564:	4b25      	ldr	r3, [pc, #148]	; (80005fc <fsm_automatic_run+0x1d0>)
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d10e      	bne.n	800058a <fsm_automatic_run+0x15e>
			led_buffer[3]--;
 800056c:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <fsm_automatic_run+0x1cc>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	3b01      	subs	r3, #1
 8000572:	4a21      	ldr	r2, [pc, #132]	; (80005f8 <fsm_automatic_run+0x1cc>)
 8000574:	60d3      	str	r3, [r2, #12]
			led_buffer[1]--;
 8000576:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <fsm_automatic_run+0x1cc>)
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	3b01      	subs	r3, #1
 800057c:	4a1e      	ldr	r2, [pc, #120]	; (80005f8 <fsm_automatic_run+0x1cc>)
 800057e:	6053      	str	r3, [r2, #4]
			setTimer(2, 1000);
 8000580:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000584:	2002      	movs	r0, #2
 8000586:	f001 f817 	bl	80015b8 <setTimer>
		}

		//SETTING TRAFFIC LIGHTS
		if(button_flag[0] == 1){
 800058a:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <fsm_automatic_run+0x1d8>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d115      	bne.n	80005be <fsm_automatic_run+0x192>
			button_flag[0] = 0;
 8000592:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <fsm_automatic_run+0x1d8>)
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
			New = 1;
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <fsm_automatic_run+0x1c8>)
 800059a:	2201      	movs	r2, #1
 800059c:	601a      	str	r2, [r3, #0]
			clearLed();
 800059e:	f000 feb9 	bl	8001314 <clearLed>
			clear_light();
 80005a2:	f001 f96b 	bl	800187c <clear_light>
			setTimer(3, 250);
 80005a6:	21fa      	movs	r1, #250	; 0xfa
 80005a8:	2003      	movs	r0, #3
 80005aa:	f001 f805 	bl	80015b8 <setTimer>
			setTimer(4, 500);
 80005ae:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005b2:	2004      	movs	r0, #4
 80005b4:	f001 f800 	bl	80015b8 <setTimer>
			status = RED_SETTING;
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <fsm_automatic_run+0x1b8>)
 80005ba:	2205      	movs	r2, #5
 80005bc:	601a      	str	r2, [r3, #0]
		}

		//MANUAL TRAFFIC LIGHTS
		if(button_flag[1] == 1){
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <fsm_automatic_run+0x1d8>)
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	f040 81b8 	bne.w	8000938 <fsm_automatic_run+0x50c>
			New = 1;
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <fsm_automatic_run+0x1c8>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	601a      	str	r2, [r3, #0]
			button_flag[1] = 0;
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <fsm_automatic_run+0x1d8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	605a      	str	r2, [r3, #4]
			clearLed();
 80005d4:	f000 fe9e 	bl	8001314 <clearLed>
			clear_light();
 80005d8:	f001 f950 	bl	800187c <clear_light>
			status = RED_MAN;
 80005dc:	4b01      	ldr	r3, [pc, #4]	; (80005e4 <fsm_automatic_run+0x1b8>)
 80005de:	2208      	movs	r2, #8
 80005e0:	601a      	str	r2, [r3, #0]
		}
		break;
 80005e2:	e1a9      	b.n	8000938 <fsm_automatic_run+0x50c>
 80005e4:	20000064 	.word	0x20000064
 80005e8:	20000014 	.word	0x20000014
 80005ec:	20000010 	.word	0x20000010
 80005f0:	2000000c 	.word	0x2000000c
 80005f4:	2000006c 	.word	0x2000006c
 80005f8:	20000070 	.word	0x20000070
 80005fc:	200000a8 	.word	0x200000a8
 8000600:	20000068 	.word	0x20000068
 8000604:	2000004c 	.word	0x2000004c
	case RED1_YELLOW:
		//When just turn status
		if(New == 1){
 8000608:	4b83      	ldr	r3, [pc, #524]	; (8000818 <fsm_automatic_run+0x3ec>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d109      	bne.n	8000624 <fsm_automatic_run+0x1f8>
			turn_yellow_2();
 8000610:	f001 f91c 	bl	800184c <turn_yellow_2>
			led_buffer[3] = yellow_time - 1;
 8000614:	4b81      	ldr	r3, [pc, #516]	; (800081c <fsm_automatic_run+0x3f0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	3b01      	subs	r3, #1
 800061a:	4a81      	ldr	r2, [pc, #516]	; (8000820 <fsm_automatic_run+0x3f4>)
 800061c:	60d3      	str	r3, [r2, #12]
			New = 0;
 800061e:	4b7e      	ldr	r3, [pc, #504]	; (8000818 <fsm_automatic_run+0x3ec>)
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
		}

		//COUNTDOWN TRAFFIC LIGHTS
		if(timer_flag[1] == 1){
 8000624:	4b7f      	ldr	r3, [pc, #508]	; (8000824 <fsm_automatic_run+0x3f8>)
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d115      	bne.n	8000658 <fsm_automatic_run+0x22c>
			led_buffer[1] = 2;
 800062c:	4b7c      	ldr	r3, [pc, #496]	; (8000820 <fsm_automatic_run+0x3f4>)
 800062e:	2202      	movs	r2, #2
 8000630:	605a      	str	r2, [r3, #4]
			led_buffer[3] = 4;
 8000632:	4b7b      	ldr	r3, [pc, #492]	; (8000820 <fsm_automatic_run+0x3f4>)
 8000634:	2204      	movs	r2, #4
 8000636:	60da      	str	r2, [r3, #12]
			status = RED2_GREEN;
 8000638:	4b7b      	ldr	r3, [pc, #492]	; (8000828 <fsm_automatic_run+0x3fc>)
 800063a:	2203      	movs	r2, #3
 800063c:	601a      	str	r2, [r3, #0]
			New = 1;
 800063e:	4b76      	ldr	r3, [pc, #472]	; (8000818 <fsm_automatic_run+0x3ec>)
 8000640:	2201      	movs	r2, #1
 8000642:	601a      	str	r2, [r3, #0]
			setTimer(1, green_time*1000);
 8000644:	4b79      	ldr	r3, [pc, #484]	; (800082c <fsm_automatic_run+0x400>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800064c:	fb02 f303 	mul.w	r3, r2, r3
 8000650:	4619      	mov	r1, r3
 8000652:	2001      	movs	r0, #1
 8000654:	f000 ffb0 	bl	80015b8 <setTimer>
		}

		//7-SEGMENT LEDS
		if(idx == 4){
 8000658:	4b75      	ldr	r3, [pc, #468]	; (8000830 <fsm_automatic_run+0x404>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b04      	cmp	r3, #4
 800065e:	d102      	bne.n	8000666 <fsm_automatic_run+0x23a>
			idx = 0;
 8000660:	4b73      	ldr	r3, [pc, #460]	; (8000830 <fsm_automatic_run+0x404>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[3] == 1){
 8000666:	4b6f      	ldr	r3, [pc, #444]	; (8000824 <fsm_automatic_run+0x3f8>)
 8000668:	68db      	ldr	r3, [r3, #12]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d10b      	bne.n	8000686 <fsm_automatic_run+0x25a>
			update7SEG(idx++);
 800066e:	4b70      	ldr	r3, [pc, #448]	; (8000830 <fsm_automatic_run+0x404>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	496e      	ldr	r1, [pc, #440]	; (8000830 <fsm_automatic_run+0x404>)
 8000676:	600a      	str	r2, [r1, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fe69 	bl	8001350 <update7SEG>
			setTimer(3,250);
 800067e:	21fa      	movs	r1, #250	; 0xfa
 8000680:	2003      	movs	r0, #3
 8000682:	f000 ff99 	bl	80015b8 <setTimer>
		}
		if(timer_flag[2] == 1){
 8000686:	4b67      	ldr	r3, [pc, #412]	; (8000824 <fsm_automatic_run+0x3f8>)
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d10e      	bne.n	80006ac <fsm_automatic_run+0x280>
			led_buffer[3]--;
 800068e:	4b64      	ldr	r3, [pc, #400]	; (8000820 <fsm_automatic_run+0x3f4>)
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	3b01      	subs	r3, #1
 8000694:	4a62      	ldr	r2, [pc, #392]	; (8000820 <fsm_automatic_run+0x3f4>)
 8000696:	60d3      	str	r3, [r2, #12]
			led_buffer[1]--;
 8000698:	4b61      	ldr	r3, [pc, #388]	; (8000820 <fsm_automatic_run+0x3f4>)
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	3b01      	subs	r3, #1
 800069e:	4a60      	ldr	r2, [pc, #384]	; (8000820 <fsm_automatic_run+0x3f4>)
 80006a0:	6053      	str	r3, [r2, #4]
			setTimer(2, 1000);
 80006a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006a6:	2002      	movs	r0, #2
 80006a8:	f000 ff86 	bl	80015b8 <setTimer>
		}

		//SETTING TRAFFIC LIGHTS
		if(button_flag[0] == 1){
 80006ac:	4b61      	ldr	r3, [pc, #388]	; (8000834 <fsm_automatic_run+0x408>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d115      	bne.n	80006e0 <fsm_automatic_run+0x2b4>
			button_flag[0] = 0;
 80006b4:	4b5f      	ldr	r3, [pc, #380]	; (8000834 <fsm_automatic_run+0x408>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
			New = 1;
 80006ba:	4b57      	ldr	r3, [pc, #348]	; (8000818 <fsm_automatic_run+0x3ec>)
 80006bc:	2201      	movs	r2, #1
 80006be:	601a      	str	r2, [r3, #0]
			clearLed();
 80006c0:	f000 fe28 	bl	8001314 <clearLed>
			clear_light();
 80006c4:	f001 f8da 	bl	800187c <clear_light>
			setTimer(3, 250);
 80006c8:	21fa      	movs	r1, #250	; 0xfa
 80006ca:	2003      	movs	r0, #3
 80006cc:	f000 ff74 	bl	80015b8 <setTimer>
			setTimer(4, 500);
 80006d0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80006d4:	2004      	movs	r0, #4
 80006d6:	f000 ff6f 	bl	80015b8 <setTimer>
			status = RED_SETTING;
 80006da:	4b53      	ldr	r3, [pc, #332]	; (8000828 <fsm_automatic_run+0x3fc>)
 80006dc:	2205      	movs	r2, #5
 80006de:	601a      	str	r2, [r3, #0]
		}

		//MANUAL TRAFFIC LIGHTS
		if(button_flag[1] == 1){
 80006e0:	4b54      	ldr	r3, [pc, #336]	; (8000834 <fsm_automatic_run+0x408>)
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	f040 8129 	bne.w	800093c <fsm_automatic_run+0x510>
			New = 1;
 80006ea:	4b4b      	ldr	r3, [pc, #300]	; (8000818 <fsm_automatic_run+0x3ec>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	601a      	str	r2, [r3, #0]
			button_flag[1] = 0;
 80006f0:	4b50      	ldr	r3, [pc, #320]	; (8000834 <fsm_automatic_run+0x408>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
			clearLed();
 80006f6:	f000 fe0d 	bl	8001314 <clearLed>
			clear_light();
 80006fa:	f001 f8bf 	bl	800187c <clear_light>
			New = 1;
 80006fe:	4b46      	ldr	r3, [pc, #280]	; (8000818 <fsm_automatic_run+0x3ec>)
 8000700:	2201      	movs	r2, #1
 8000702:	601a      	str	r2, [r3, #0]
			status = RED_MAN;
 8000704:	4b48      	ldr	r3, [pc, #288]	; (8000828 <fsm_automatic_run+0x3fc>)
 8000706:	2208      	movs	r2, #8
 8000708:	601a      	str	r2, [r3, #0]
		}
		break;
 800070a:	e117      	b.n	800093c <fsm_automatic_run+0x510>
	case RED2_GREEN:
		//When just turn status
		if(New == 1){
 800070c:	4b42      	ldr	r3, [pc, #264]	; (8000818 <fsm_automatic_run+0x3ec>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d110      	bne.n	8000736 <fsm_automatic_run+0x30a>
			turn_red_2();
 8000714:	f001 f86a 	bl	80017ec <turn_red_2>
			turn_green();
 8000718:	f001 f83c 	bl	8001794 <turn_green>
			led_buffer[3] = red_time - 1;
 800071c:	4b46      	ldr	r3, [pc, #280]	; (8000838 <fsm_automatic_run+0x40c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	3b01      	subs	r3, #1
 8000722:	4a3f      	ldr	r2, [pc, #252]	; (8000820 <fsm_automatic_run+0x3f4>)
 8000724:	60d3      	str	r3, [r2, #12]
			led_buffer[1] = green_time -1;
 8000726:	4b41      	ldr	r3, [pc, #260]	; (800082c <fsm_automatic_run+0x400>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	3b01      	subs	r3, #1
 800072c:	4a3c      	ldr	r2, [pc, #240]	; (8000820 <fsm_automatic_run+0x3f4>)
 800072e:	6053      	str	r3, [r2, #4]
			New = 0;
 8000730:	4b39      	ldr	r3, [pc, #228]	; (8000818 <fsm_automatic_run+0x3ec>)
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
		}

		//COUNTDOWN TRAFFIC LIGHTS
		if(timer_flag[1] == 1){
 8000736:	4b3b      	ldr	r3, [pc, #236]	; (8000824 <fsm_automatic_run+0x3f8>)
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d112      	bne.n	8000764 <fsm_automatic_run+0x338>
			led_buffer[1] = 1;
 800073e:	4b38      	ldr	r3, [pc, #224]	; (8000820 <fsm_automatic_run+0x3f4>)
 8000740:	2201      	movs	r2, #1
 8000742:	605a      	str	r2, [r3, #4]
			status = RED2_YELLOW;
 8000744:	4b38      	ldr	r3, [pc, #224]	; (8000828 <fsm_automatic_run+0x3fc>)
 8000746:	2204      	movs	r2, #4
 8000748:	601a      	str	r2, [r3, #0]
			New = 1;
 800074a:	4b33      	ldr	r3, [pc, #204]	; (8000818 <fsm_automatic_run+0x3ec>)
 800074c:	2201      	movs	r2, #1
 800074e:	601a      	str	r2, [r3, #0]
			setTimer(1, yellow_time*1000);
 8000750:	4b32      	ldr	r3, [pc, #200]	; (800081c <fsm_automatic_run+0x3f0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000758:	fb02 f303 	mul.w	r3, r2, r3
 800075c:	4619      	mov	r1, r3
 800075e:	2001      	movs	r0, #1
 8000760:	f000 ff2a 	bl	80015b8 <setTimer>
		}

		//7-SEGMENT LEDS
		if(idx == 4){
 8000764:	4b32      	ldr	r3, [pc, #200]	; (8000830 <fsm_automatic_run+0x404>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b04      	cmp	r3, #4
 800076a:	d102      	bne.n	8000772 <fsm_automatic_run+0x346>
			idx = 0;
 800076c:	4b30      	ldr	r3, [pc, #192]	; (8000830 <fsm_automatic_run+0x404>)
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[3] == 1){
 8000772:	4b2c      	ldr	r3, [pc, #176]	; (8000824 <fsm_automatic_run+0x3f8>)
 8000774:	68db      	ldr	r3, [r3, #12]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d10b      	bne.n	8000792 <fsm_automatic_run+0x366>
			update7SEG(idx++);
 800077a:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <fsm_automatic_run+0x404>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	1c5a      	adds	r2, r3, #1
 8000780:	492b      	ldr	r1, [pc, #172]	; (8000830 <fsm_automatic_run+0x404>)
 8000782:	600a      	str	r2, [r1, #0]
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fde3 	bl	8001350 <update7SEG>
			setTimer(3,250);
 800078a:	21fa      	movs	r1, #250	; 0xfa
 800078c:	2003      	movs	r0, #3
 800078e:	f000 ff13 	bl	80015b8 <setTimer>
		}
		if(timer_flag[2] == 1){
 8000792:	4b24      	ldr	r3, [pc, #144]	; (8000824 <fsm_automatic_run+0x3f8>)
 8000794:	689b      	ldr	r3, [r3, #8]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d10e      	bne.n	80007b8 <fsm_automatic_run+0x38c>
			led_buffer[3]--;
 800079a:	4b21      	ldr	r3, [pc, #132]	; (8000820 <fsm_automatic_run+0x3f4>)
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	3b01      	subs	r3, #1
 80007a0:	4a1f      	ldr	r2, [pc, #124]	; (8000820 <fsm_automatic_run+0x3f4>)
 80007a2:	60d3      	str	r3, [r2, #12]
			led_buffer[1]--;
 80007a4:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <fsm_automatic_run+0x3f4>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	3b01      	subs	r3, #1
 80007aa:	4a1d      	ldr	r2, [pc, #116]	; (8000820 <fsm_automatic_run+0x3f4>)
 80007ac:	6053      	str	r3, [r2, #4]
			setTimer(2, 1000);
 80007ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007b2:	2002      	movs	r0, #2
 80007b4:	f000 ff00 	bl	80015b8 <setTimer>
		}

		//SETTING TRAFFIC LIGHTS
		if(button_flag[0] == 1){
 80007b8:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <fsm_automatic_run+0x408>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d115      	bne.n	80007ec <fsm_automatic_run+0x3c0>
			button_flag[0] = 0;
 80007c0:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <fsm_automatic_run+0x408>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
			New = 1;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <fsm_automatic_run+0x3ec>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	601a      	str	r2, [r3, #0]
			clearLed();
 80007cc:	f000 fda2 	bl	8001314 <clearLed>
			clear_light();
 80007d0:	f001 f854 	bl	800187c <clear_light>
			setTimer(3, 250);
 80007d4:	21fa      	movs	r1, #250	; 0xfa
 80007d6:	2003      	movs	r0, #3
 80007d8:	f000 feee 	bl	80015b8 <setTimer>
			setTimer(4, 500);
 80007dc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80007e0:	2004      	movs	r0, #4
 80007e2:	f000 fee9 	bl	80015b8 <setTimer>
			status = RED_SETTING;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <fsm_automatic_run+0x3fc>)
 80007e8:	2205      	movs	r2, #5
 80007ea:	601a      	str	r2, [r3, #0]
		}

		//MANUAL TRAFFIC LIGHTS
		if(button_flag[1] == 1){
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <fsm_automatic_run+0x408>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	f040 80a5 	bne.w	8000940 <fsm_automatic_run+0x514>
			New = 1;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <fsm_automatic_run+0x3ec>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	601a      	str	r2, [r3, #0]
			button_flag[1] = 0;
 80007fc:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <fsm_automatic_run+0x408>)
 80007fe:	2200      	movs	r2, #0
 8000800:	605a      	str	r2, [r3, #4]
			clearLed();
 8000802:	f000 fd87 	bl	8001314 <clearLed>
			clear_light();
 8000806:	f001 f839 	bl	800187c <clear_light>
			New = 1;
 800080a:	4b03      	ldr	r3, [pc, #12]	; (8000818 <fsm_automatic_run+0x3ec>)
 800080c:	2201      	movs	r2, #1
 800080e:	601a      	str	r2, [r3, #0]
			status = RED_MAN;
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <fsm_automatic_run+0x3fc>)
 8000812:	2208      	movs	r2, #8
 8000814:	601a      	str	r2, [r3, #0]
		}
		break;
 8000816:	e093      	b.n	8000940 <fsm_automatic_run+0x514>
 8000818:	2000006c 	.word	0x2000006c
 800081c:	20000010 	.word	0x20000010
 8000820:	20000070 	.word	0x20000070
 8000824:	200000a8 	.word	0x200000a8
 8000828:	20000064 	.word	0x20000064
 800082c:	20000014 	.word	0x20000014
 8000830:	20000068 	.word	0x20000068
 8000834:	2000004c 	.word	0x2000004c
 8000838:	2000000c 	.word	0x2000000c
	case RED2_YELLOW:
		//When just turn status
		if(New == 1){
 800083c:	4b43      	ldr	r3, [pc, #268]	; (800094c <fsm_automatic_run+0x520>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d109      	bne.n	8000858 <fsm_automatic_run+0x42c>
			turn_yellow();
 8000844:	f000 ffbc 	bl	80017c0 <turn_yellow>
			led_buffer[1] = yellow_time - 1;
 8000848:	4b41      	ldr	r3, [pc, #260]	; (8000950 <fsm_automatic_run+0x524>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	3b01      	subs	r3, #1
 800084e:	4a41      	ldr	r2, [pc, #260]	; (8000954 <fsm_automatic_run+0x528>)
 8000850:	6053      	str	r3, [r2, #4]
			New = 0;
 8000852:	4b3e      	ldr	r3, [pc, #248]	; (800094c <fsm_automatic_run+0x520>)
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
		}

		//COUNTDOWN TRAFFIC LIGHTS
		if(timer_flag[1] == 1){
 8000858:	4b3f      	ldr	r3, [pc, #252]	; (8000958 <fsm_automatic_run+0x52c>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d10f      	bne.n	8000880 <fsm_automatic_run+0x454>
			status = RED1_GREEN;
 8000860:	4b3e      	ldr	r3, [pc, #248]	; (800095c <fsm_automatic_run+0x530>)
 8000862:	2201      	movs	r2, #1
 8000864:	601a      	str	r2, [r3, #0]
			New = 1;
 8000866:	4b39      	ldr	r3, [pc, #228]	; (800094c <fsm_automatic_run+0x520>)
 8000868:	2201      	movs	r2, #1
 800086a:	601a      	str	r2, [r3, #0]
			setTimer(1, green_time*1000);
 800086c:	4b3c      	ldr	r3, [pc, #240]	; (8000960 <fsm_automatic_run+0x534>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000874:	fb02 f303 	mul.w	r3, r2, r3
 8000878:	4619      	mov	r1, r3
 800087a:	2001      	movs	r0, #1
 800087c:	f000 fe9c 	bl	80015b8 <setTimer>
		}

		//7-SEGMENT LEDS
		if(idx == 4){
 8000880:	4b38      	ldr	r3, [pc, #224]	; (8000964 <fsm_automatic_run+0x538>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b04      	cmp	r3, #4
 8000886:	d102      	bne.n	800088e <fsm_automatic_run+0x462>
			idx = 0;
 8000888:	4b36      	ldr	r3, [pc, #216]	; (8000964 <fsm_automatic_run+0x538>)
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[3] == 1){
 800088e:	4b32      	ldr	r3, [pc, #200]	; (8000958 <fsm_automatic_run+0x52c>)
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d10b      	bne.n	80008ae <fsm_automatic_run+0x482>
			update7SEG(idx++);
 8000896:	4b33      	ldr	r3, [pc, #204]	; (8000964 <fsm_automatic_run+0x538>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	4931      	ldr	r1, [pc, #196]	; (8000964 <fsm_automatic_run+0x538>)
 800089e:	600a      	str	r2, [r1, #0]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 fd55 	bl	8001350 <update7SEG>
			setTimer(3,250);
 80008a6:	21fa      	movs	r1, #250	; 0xfa
 80008a8:	2003      	movs	r0, #3
 80008aa:	f000 fe85 	bl	80015b8 <setTimer>
		}
		if(timer_flag[2] == 1){
 80008ae:	4b2a      	ldr	r3, [pc, #168]	; (8000958 <fsm_automatic_run+0x52c>)
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d10e      	bne.n	80008d4 <fsm_automatic_run+0x4a8>
			led_buffer[3]--;
 80008b6:	4b27      	ldr	r3, [pc, #156]	; (8000954 <fsm_automatic_run+0x528>)
 80008b8:	68db      	ldr	r3, [r3, #12]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	4a25      	ldr	r2, [pc, #148]	; (8000954 <fsm_automatic_run+0x528>)
 80008be:	60d3      	str	r3, [r2, #12]
			led_buffer[1]--;
 80008c0:	4b24      	ldr	r3, [pc, #144]	; (8000954 <fsm_automatic_run+0x528>)
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	3b01      	subs	r3, #1
 80008c6:	4a23      	ldr	r2, [pc, #140]	; (8000954 <fsm_automatic_run+0x528>)
 80008c8:	6053      	str	r3, [r2, #4]
			setTimer(2, 1000);
 80008ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008ce:	2002      	movs	r0, #2
 80008d0:	f000 fe72 	bl	80015b8 <setTimer>
		}

		//SETTING TRAFFIC LIGHTS
		if(button_flag[0] == 1){
 80008d4:	4b24      	ldr	r3, [pc, #144]	; (8000968 <fsm_automatic_run+0x53c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d115      	bne.n	8000908 <fsm_automatic_run+0x4dc>
			button_flag[0] = 0;
 80008dc:	4b22      	ldr	r3, [pc, #136]	; (8000968 <fsm_automatic_run+0x53c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
			New = 1;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	; (800094c <fsm_automatic_run+0x520>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	601a      	str	r2, [r3, #0]
			clearLed();
 80008e8:	f000 fd14 	bl	8001314 <clearLed>
			clear_light();
 80008ec:	f000 ffc6 	bl	800187c <clear_light>
			setTimer(3, 250);
 80008f0:	21fa      	movs	r1, #250	; 0xfa
 80008f2:	2003      	movs	r0, #3
 80008f4:	f000 fe60 	bl	80015b8 <setTimer>
			setTimer(4, 500);
 80008f8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008fc:	2004      	movs	r0, #4
 80008fe:	f000 fe5b 	bl	80015b8 <setTimer>
			status = RED_SETTING;
 8000902:	4b16      	ldr	r3, [pc, #88]	; (800095c <fsm_automatic_run+0x530>)
 8000904:	2205      	movs	r2, #5
 8000906:	601a      	str	r2, [r3, #0]
		}

		//MANUAL TRAFFIC LIGHTS
		if(button_flag[1] == 1){
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <fsm_automatic_run+0x53c>)
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d119      	bne.n	8000944 <fsm_automatic_run+0x518>
			New = 1;
 8000910:	4b0e      	ldr	r3, [pc, #56]	; (800094c <fsm_automatic_run+0x520>)
 8000912:	2201      	movs	r2, #1
 8000914:	601a      	str	r2, [r3, #0]
			button_flag[1] = 0;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <fsm_automatic_run+0x53c>)
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
			clearLed();
 800091c:	f000 fcfa 	bl	8001314 <clearLed>
			clear_light();
 8000920:	f000 ffac 	bl	800187c <clear_light>
			setTimer(3, 250);
 8000924:	21fa      	movs	r1, #250	; 0xfa
 8000926:	2003      	movs	r0, #3
 8000928:	f000 fe46 	bl	80015b8 <setTimer>
			status = RED_MAN;
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <fsm_automatic_run+0x530>)
 800092e:	2208      	movs	r2, #8
 8000930:	601a      	str	r2, [r3, #0]
		}
		break;
 8000932:	e007      	b.n	8000944 <fsm_automatic_run+0x518>
	default:
		break;
 8000934:	bf00      	nop
 8000936:	e006      	b.n	8000946 <fsm_automatic_run+0x51a>
		break;
 8000938:	bf00      	nop
 800093a:	e004      	b.n	8000946 <fsm_automatic_run+0x51a>
		break;
 800093c:	bf00      	nop
 800093e:	e002      	b.n	8000946 <fsm_automatic_run+0x51a>
		break;
 8000940:	bf00      	nop
 8000942:	e000      	b.n	8000946 <fsm_automatic_run+0x51a>
		break;
 8000944:	bf00      	nop
	}
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000006c 	.word	0x2000006c
 8000950:	20000010 	.word	0x20000010
 8000954:	20000070 	.word	0x20000070
 8000958:	200000a8 	.word	0x200000a8
 800095c:	20000064 	.word	0x20000064
 8000960:	20000014 	.word	0x20000014
 8000964:	20000068 	.word	0x20000068
 8000968:	2000004c 	.word	0x2000004c

0800096c <fsm_manual_run>:


#include "fsm_manual.h"


void fsm_manual_run(){
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	switch(status){
 8000970:	4b6f      	ldr	r3, [pc, #444]	; (8000b30 <fsm_manual_run+0x1c4>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b0a      	cmp	r3, #10
 8000976:	f000 808f 	beq.w	8000a98 <fsm_manual_run+0x12c>
 800097a:	2b0a      	cmp	r3, #10
 800097c:	f300 80cf 	bgt.w	8000b1e <fsm_manual_run+0x1b2>
 8000980:	2b08      	cmp	r3, #8
 8000982:	d002      	beq.n	800098a <fsm_manual_run+0x1e>
 8000984:	2b09      	cmp	r3, #9
 8000986:	d044      	beq.n	8000a12 <fsm_manual_run+0xa6>
			button_flag[2] = 0;
			status = INIT;
		}
		break;
	default:
		break;
 8000988:	e0c9      	b.n	8000b1e <fsm_manual_run+0x1b2>
		if(New == 1){
 800098a:	4b6a      	ldr	r3, [pc, #424]	; (8000b34 <fsm_manual_run+0x1c8>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d109      	bne.n	80009a6 <fsm_manual_run+0x3a>
			New = 0;
 8000992:	4b68      	ldr	r3, [pc, #416]	; (8000b34 <fsm_manual_run+0x1c8>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
			led_buffer[1] = led_buffer[3] = 5;
 8000998:	4b67      	ldr	r3, [pc, #412]	; (8000b38 <fsm_manual_run+0x1cc>)
 800099a:	2205      	movs	r2, #5
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	4b66      	ldr	r3, [pc, #408]	; (8000b38 <fsm_manual_run+0x1cc>)
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	4a65      	ldr	r2, [pc, #404]	; (8000b38 <fsm_manual_run+0x1cc>)
 80009a4:	6053      	str	r3, [r2, #4]
		if(idx == 4){
 80009a6:	4b65      	ldr	r3, [pc, #404]	; (8000b3c <fsm_manual_run+0x1d0>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d102      	bne.n	80009b4 <fsm_manual_run+0x48>
			idx = 0;
 80009ae:	4b63      	ldr	r3, [pc, #396]	; (8000b3c <fsm_manual_run+0x1d0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
		if(timer_flag[3] == 1){
 80009b4:	4b62      	ldr	r3, [pc, #392]	; (8000b40 <fsm_manual_run+0x1d4>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d10b      	bne.n	80009d4 <fsm_manual_run+0x68>
			update7SEG(idx++);
 80009bc:	4b5f      	ldr	r3, [pc, #380]	; (8000b3c <fsm_manual_run+0x1d0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	1c5a      	adds	r2, r3, #1
 80009c2:	495e      	ldr	r1, [pc, #376]	; (8000b3c <fsm_manual_run+0x1d0>)
 80009c4:	600a      	str	r2, [r1, #0]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fcc2 	bl	8001350 <update7SEG>
			setTimer(3,250);
 80009cc:	21fa      	movs	r1, #250	; 0xfa
 80009ce:	2003      	movs	r0, #3
 80009d0:	f000 fdf2 	bl	80015b8 <setTimer>
		turn_red();
 80009d4:	f000 fec8 	bl	8001768 <turn_red>
		turn_red_2();
 80009d8:	f000 ff08 	bl	80017ec <turn_red_2>
		if(button_flag[1] == 1){
 80009dc:	4b59      	ldr	r3, [pc, #356]	; (8000b44 <fsm_manual_run+0x1d8>)
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d10a      	bne.n	80009fa <fsm_manual_run+0x8e>
			New = 1;
 80009e4:	4b53      	ldr	r3, [pc, #332]	; (8000b34 <fsm_manual_run+0x1c8>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	601a      	str	r2, [r3, #0]
			button_flag[1] = 0;
 80009ea:	4b56      	ldr	r3, [pc, #344]	; (8000b44 <fsm_manual_run+0x1d8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	605a      	str	r2, [r3, #4]
			clear_light();
 80009f0:	f000 ff44 	bl	800187c <clear_light>
			status = YELLOW_MAN;
 80009f4:	4b4e      	ldr	r3, [pc, #312]	; (8000b30 <fsm_manual_run+0x1c4>)
 80009f6:	2209      	movs	r2, #9
 80009f8:	601a      	str	r2, [r3, #0]
		if(button_flag[2] == 1){
 80009fa:	4b52      	ldr	r3, [pc, #328]	; (8000b44 <fsm_manual_run+0x1d8>)
 80009fc:	689b      	ldr	r3, [r3, #8]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	f040 808f 	bne.w	8000b22 <fsm_manual_run+0x1b6>
			button_flag[2] = 0;
 8000a04:	4b4f      	ldr	r3, [pc, #316]	; (8000b44 <fsm_manual_run+0x1d8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
			status = INIT;
 8000a0a:	4b49      	ldr	r3, [pc, #292]	; (8000b30 <fsm_manual_run+0x1c4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
		break;
 8000a10:	e087      	b.n	8000b22 <fsm_manual_run+0x1b6>
		if(New == 1){
 8000a12:	4b48      	ldr	r3, [pc, #288]	; (8000b34 <fsm_manual_run+0x1c8>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d109      	bne.n	8000a2e <fsm_manual_run+0xc2>
			New = 0;
 8000a1a:	4b46      	ldr	r3, [pc, #280]	; (8000b34 <fsm_manual_run+0x1c8>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
			led_buffer[1] = led_buffer[3] = 6;
 8000a20:	4b45      	ldr	r3, [pc, #276]	; (8000b38 <fsm_manual_run+0x1cc>)
 8000a22:	2206      	movs	r2, #6
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	4b44      	ldr	r3, [pc, #272]	; (8000b38 <fsm_manual_run+0x1cc>)
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	4a43      	ldr	r2, [pc, #268]	; (8000b38 <fsm_manual_run+0x1cc>)
 8000a2c:	6053      	str	r3, [r2, #4]
		if(idx == 4){
 8000a2e:	4b43      	ldr	r3, [pc, #268]	; (8000b3c <fsm_manual_run+0x1d0>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	d102      	bne.n	8000a3c <fsm_manual_run+0xd0>
			idx = 0;
 8000a36:	4b41      	ldr	r3, [pc, #260]	; (8000b3c <fsm_manual_run+0x1d0>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
		if(timer_flag[3] == 1){
 8000a3c:	4b40      	ldr	r3, [pc, #256]	; (8000b40 <fsm_manual_run+0x1d4>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d10b      	bne.n	8000a5c <fsm_manual_run+0xf0>
			update7SEG(idx++);
 8000a44:	4b3d      	ldr	r3, [pc, #244]	; (8000b3c <fsm_manual_run+0x1d0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	1c5a      	adds	r2, r3, #1
 8000a4a:	493c      	ldr	r1, [pc, #240]	; (8000b3c <fsm_manual_run+0x1d0>)
 8000a4c:	600a      	str	r2, [r1, #0]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 fc7e 	bl	8001350 <update7SEG>
			setTimer(3,250);
 8000a54:	21fa      	movs	r1, #250	; 0xfa
 8000a56:	2003      	movs	r0, #3
 8000a58:	f000 fdae 	bl	80015b8 <setTimer>
		turn_yellow();
 8000a5c:	f000 feb0 	bl	80017c0 <turn_yellow>
		turn_yellow_2();
 8000a60:	f000 fef4 	bl	800184c <turn_yellow_2>
		if(button_flag[1] == 1){
 8000a64:	4b37      	ldr	r3, [pc, #220]	; (8000b44 <fsm_manual_run+0x1d8>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d10a      	bne.n	8000a82 <fsm_manual_run+0x116>
			New = 1;
 8000a6c:	4b31      	ldr	r3, [pc, #196]	; (8000b34 <fsm_manual_run+0x1c8>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	601a      	str	r2, [r3, #0]
			button_flag[1] = 0;
 8000a72:	4b34      	ldr	r3, [pc, #208]	; (8000b44 <fsm_manual_run+0x1d8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	605a      	str	r2, [r3, #4]
			clear_light();
 8000a78:	f000 ff00 	bl	800187c <clear_light>
			status = GREEN_MAN;
 8000a7c:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <fsm_manual_run+0x1c4>)
 8000a7e:	220a      	movs	r2, #10
 8000a80:	601a      	str	r2, [r3, #0]
		if(button_flag[2] == 1){
 8000a82:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <fsm_manual_run+0x1d8>)
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d14d      	bne.n	8000b26 <fsm_manual_run+0x1ba>
			button_flag[2] = 0;
 8000a8a:	4b2e      	ldr	r3, [pc, #184]	; (8000b44 <fsm_manual_run+0x1d8>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
			status = INIT;
 8000a90:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <fsm_manual_run+0x1c4>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
		break;
 8000a96:	e046      	b.n	8000b26 <fsm_manual_run+0x1ba>
		if(New == 1){
 8000a98:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <fsm_manual_run+0x1c8>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d109      	bne.n	8000ab4 <fsm_manual_run+0x148>
			New = 0;
 8000aa0:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <fsm_manual_run+0x1c8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
			led_buffer[1] = led_buffer[3] = 7;
 8000aa6:	4b24      	ldr	r3, [pc, #144]	; (8000b38 <fsm_manual_run+0x1cc>)
 8000aa8:	2207      	movs	r2, #7
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <fsm_manual_run+0x1cc>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	4a21      	ldr	r2, [pc, #132]	; (8000b38 <fsm_manual_run+0x1cc>)
 8000ab2:	6053      	str	r3, [r2, #4]
		if(idx == 4){
 8000ab4:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <fsm_manual_run+0x1d0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b04      	cmp	r3, #4
 8000aba:	d102      	bne.n	8000ac2 <fsm_manual_run+0x156>
			idx = 0;
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <fsm_manual_run+0x1d0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
		if(timer_flag[3] == 1){
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <fsm_manual_run+0x1d4>)
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d10b      	bne.n	8000ae2 <fsm_manual_run+0x176>
			update7SEG(idx++);
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <fsm_manual_run+0x1d0>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	1c5a      	adds	r2, r3, #1
 8000ad0:	491a      	ldr	r1, [pc, #104]	; (8000b3c <fsm_manual_run+0x1d0>)
 8000ad2:	600a      	str	r2, [r1, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fc3b 	bl	8001350 <update7SEG>
			setTimer(3,250);
 8000ada:	21fa      	movs	r1, #250	; 0xfa
 8000adc:	2003      	movs	r0, #3
 8000ade:	f000 fd6b 	bl	80015b8 <setTimer>
		turn_green();
 8000ae2:	f000 fe57 	bl	8001794 <turn_green>
		turn_green_2();
 8000ae6:	f000 fe99 	bl	800181c <turn_green_2>
		if(button_flag[1] == 1){
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <fsm_manual_run+0x1d8>)
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d10a      	bne.n	8000b08 <fsm_manual_run+0x19c>
			New = 1;
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <fsm_manual_run+0x1c8>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	601a      	str	r2, [r3, #0]
			button_flag[1] = 0;
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <fsm_manual_run+0x1d8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	605a      	str	r2, [r3, #4]
			clear_light();
 8000afe:	f000 febd 	bl	800187c <clear_light>
			status = RED_MAN;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <fsm_manual_run+0x1c4>)
 8000b04:	2208      	movs	r2, #8
 8000b06:	601a      	str	r2, [r3, #0]
		if(button_flag[2] == 1){
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <fsm_manual_run+0x1d8>)
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d10c      	bne.n	8000b2a <fsm_manual_run+0x1be>
			button_flag[2] = 0;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <fsm_manual_run+0x1d8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
			status = INIT;
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <fsm_manual_run+0x1c4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
		break;
 8000b1c:	e005      	b.n	8000b2a <fsm_manual_run+0x1be>
		break;
 8000b1e:	bf00      	nop
 8000b20:	e004      	b.n	8000b2c <fsm_manual_run+0x1c0>
		break;
 8000b22:	bf00      	nop
 8000b24:	e002      	b.n	8000b2c <fsm_manual_run+0x1c0>
		break;
 8000b26:	bf00      	nop
 8000b28:	e000      	b.n	8000b2c <fsm_manual_run+0x1c0>
		break;
 8000b2a:	bf00      	nop
	}

}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000064 	.word	0x20000064
 8000b34:	2000006c 	.word	0x2000006c
 8000b38:	20000070 	.word	0x20000070
 8000b3c:	20000068 	.word	0x20000068
 8000b40:	200000a8 	.word	0x200000a8
 8000b44:	2000004c 	.word	0x2000004c

08000b48 <fsm_setting_run>:
 */


#include "fsm_setting.h"

void fsm_setting_run(){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	if(idx == 4){
 8000b4c:	4b98      	ldr	r3, [pc, #608]	; (8000db0 <fsm_setting_run+0x268>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b04      	cmp	r3, #4
 8000b52:	d102      	bne.n	8000b5a <fsm_setting_run+0x12>
		idx = 0;
 8000b54:	4b96      	ldr	r3, [pc, #600]	; (8000db0 <fsm_setting_run+0x268>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
	}
	if(timer_flag[3] == 1){
 8000b5a:	4b96      	ldr	r3, [pc, #600]	; (8000db4 <fsm_setting_run+0x26c>)
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d10b      	bne.n	8000b7a <fsm_setting_run+0x32>
		update7SEG(idx++);
 8000b62:	4b93      	ldr	r3, [pc, #588]	; (8000db0 <fsm_setting_run+0x268>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	4991      	ldr	r1, [pc, #580]	; (8000db0 <fsm_setting_run+0x268>)
 8000b6a:	600a      	str	r2, [r1, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 fbef 	bl	8001350 <update7SEG>
		setTimer(3,250);
 8000b72:	21fa      	movs	r1, #250	; 0xfa
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 fd1f 	bl	80015b8 <setTimer>
	}
	switch(status){
 8000b7a:	4b8f      	ldr	r3, [pc, #572]	; (8000db8 <fsm_setting_run+0x270>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b07      	cmp	r3, #7
 8000b80:	f000 812c 	beq.w	8000ddc <fsm_setting_run+0x294>
 8000b84:	2b07      	cmp	r3, #7
 8000b86:	f300 81a0 	bgt.w	8000eca <fsm_setting_run+0x382>
 8000b8a:	2b05      	cmp	r3, #5
 8000b8c:	d003      	beq.n	8000b96 <fsm_setting_run+0x4e>
 8000b8e:	2b06      	cmp	r3, #6
 8000b90:	f000 8089 	beq.w	8000ca6 <fsm_setting_run+0x15e>
			clear_light();
			status = INIT;
		}
		break;
	default:
		break;
 8000b94:	e199      	b.n	8000eca <fsm_setting_run+0x382>
		if(New == 1){
 8000b96:	4b89      	ldr	r3, [pc, #548]	; (8000dbc <fsm_setting_run+0x274>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d10a      	bne.n	8000bb4 <fsm_setting_run+0x6c>
			led_buffer[3] = mode2;
 8000b9e:	4b88      	ldr	r3, [pc, #544]	; (8000dc0 <fsm_setting_run+0x278>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a88      	ldr	r2, [pc, #544]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000ba4:	60d3      	str	r3, [r2, #12]
			led_buffer[1] = red_time;
 8000ba6:	4b88      	ldr	r3, [pc, #544]	; (8000dc8 <fsm_setting_run+0x280>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a86      	ldr	r2, [pc, #536]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000bac:	6053      	str	r3, [r2, #4]
			New = 0;
 8000bae:	4b83      	ldr	r3, [pc, #524]	; (8000dbc <fsm_setting_run+0x274>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
		if(timer_flag[4] == 1){
 8000bb4:	4b7f      	ldr	r3, [pc, #508]	; (8000db4 <fsm_setting_run+0x26c>)
 8000bb6:	691b      	ldr	r3, [r3, #16]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d106      	bne.n	8000bca <fsm_setting_run+0x82>
			setTimer(4, 500);
 8000bbc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000bc0:	2004      	movs	r0, #4
 8000bc2:	f000 fcf9 	bl	80015b8 <setTimer>
			toggleRed();
 8000bc6:	f000 fe7f 	bl	80018c8 <toggleRed>
		if(button_flag[1] == 1){
 8000bca:	4b80      	ldr	r3, [pc, #512]	; (8000dcc <fsm_setting_run+0x284>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d10b      	bne.n	8000bea <fsm_setting_run+0xa2>
			button_flag[1] = 0;
 8000bd2:	4b7e      	ldr	r3, [pc, #504]	; (8000dcc <fsm_setting_run+0x284>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	605a      	str	r2, [r3, #4]
			HAL_GPIO_TogglePin(test_button_GPIO_Port, test_button_Pin);
 8000bd8:	2104      	movs	r1, #4
 8000bda:	487d      	ldr	r0, [pc, #500]	; (8000dd0 <fsm_setting_run+0x288>)
 8000bdc:	f001 f9e1 	bl	8001fa2 <HAL_GPIO_TogglePin>
			++led_buffer[1];
 8000be0:	4b78      	ldr	r3, [pc, #480]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	3301      	adds	r3, #1
 8000be6:	4a77      	ldr	r2, [pc, #476]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000be8:	6053      	str	r3, [r2, #4]
		if(led_buffer[1] >= 10){
 8000bea:	4b76      	ldr	r3, [pc, #472]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	2b09      	cmp	r3, #9
 8000bf0:	dd07      	ble.n	8000c02 <fsm_setting_run+0xba>
			led_buffer[0]++;
 8000bf2:	4b74      	ldr	r3, [pc, #464]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	4a72      	ldr	r2, [pc, #456]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000bfa:	6013      	str	r3, [r2, #0]
			led_buffer[1] = 0;
 8000bfc:	4b71      	ldr	r3, [pc, #452]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
		if((led_buffer[0]*10 + led_buffer[1]) >= 100){
 8000c02:	4b70      	ldr	r3, [pc, #448]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	4613      	mov	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	4413      	add	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	461a      	mov	r2, r3
 8000c10:	4b6c      	ldr	r3, [pc, #432]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	2b63      	cmp	r3, #99	; 0x63
 8000c18:	dd05      	ble.n	8000c26 <fsm_setting_run+0xde>
			led_buffer[0] = 9;
 8000c1a:	4b6a      	ldr	r3, [pc, #424]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000c1c:	2209      	movs	r2, #9
 8000c1e:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 9;
 8000c20:	4b68      	ldr	r3, [pc, #416]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000c22:	2209      	movs	r2, #9
 8000c24:	605a      	str	r2, [r3, #4]
		if(button_flag[2] == 1){
 8000c26:	4b69      	ldr	r3, [pc, #420]	; (8000dcc <fsm_setting_run+0x284>)
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d112      	bne.n	8000c54 <fsm_setting_run+0x10c>
			button_flag[2] = 0;
 8000c2e:	4b67      	ldr	r3, [pc, #412]	; (8000dcc <fsm_setting_run+0x284>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
			red_time = led_buffer[0]*10 + led_buffer[1];
 8000c34:	4b63      	ldr	r3, [pc, #396]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b60      	ldr	r3, [pc, #384]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	4413      	add	r3, r2
 8000c48:	4a5f      	ldr	r2, [pc, #380]	; (8000dc8 <fsm_setting_run+0x280>)
 8000c4a:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(test_button_GPIO_Port, test_button_Pin);
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	4860      	ldr	r0, [pc, #384]	; (8000dd0 <fsm_setting_run+0x288>)
 8000c50:	f001 f9a7 	bl	8001fa2 <HAL_GPIO_TogglePin>
		if(red_time >= 100){
 8000c54:	4b5c      	ldr	r3, [pc, #368]	; (8000dc8 <fsm_setting_run+0x280>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b63      	cmp	r3, #99	; 0x63
 8000c5a:	dd08      	ble.n	8000c6e <fsm_setting_run+0x126>
			red_time = 99;
 8000c5c:	4b5a      	ldr	r3, [pc, #360]	; (8000dc8 <fsm_setting_run+0x280>)
 8000c5e:	2263      	movs	r2, #99	; 0x63
 8000c60:	601a      	str	r2, [r3, #0]
			led_buffer[0] = 9;
 8000c62:	4b58      	ldr	r3, [pc, #352]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000c64:	2209      	movs	r2, #9
 8000c66:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 9;
 8000c68:	4b56      	ldr	r3, [pc, #344]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000c6a:	2209      	movs	r2, #9
 8000c6c:	605a      	str	r2, [r3, #4]
		if(button_flag[0] == 1){
 8000c6e:	4b57      	ldr	r3, [pc, #348]	; (8000dcc <fsm_setting_run+0x284>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	f040 812b 	bne.w	8000ece <fsm_setting_run+0x386>
			button_flag[0] = 0;
 8000c78:	4b54      	ldr	r3, [pc, #336]	; (8000dcc <fsm_setting_run+0x284>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
			clearLed();
 8000c7e:	f000 fb49 	bl	8001314 <clearLed>
			clear_light();
 8000c82:	f000 fdfb 	bl	800187c <clear_light>
			setTimer(3, 250);
 8000c86:	21fa      	movs	r1, #250	; 0xfa
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f000 fc95 	bl	80015b8 <setTimer>
			setTimer(4, 500);
 8000c8e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c92:	2004      	movs	r0, #4
 8000c94:	f000 fc90 	bl	80015b8 <setTimer>
			New = 1;
 8000c98:	4b48      	ldr	r3, [pc, #288]	; (8000dbc <fsm_setting_run+0x274>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	601a      	str	r2, [r3, #0]
			status = YELLOW_SETTING;
 8000c9e:	4b46      	ldr	r3, [pc, #280]	; (8000db8 <fsm_setting_run+0x270>)
 8000ca0:	2206      	movs	r2, #6
 8000ca2:	601a      	str	r2, [r3, #0]
		break;
 8000ca4:	e113      	b.n	8000ece <fsm_setting_run+0x386>
		if(New == 1){
 8000ca6:	4b45      	ldr	r3, [pc, #276]	; (8000dbc <fsm_setting_run+0x274>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d10a      	bne.n	8000cc4 <fsm_setting_run+0x17c>
			led_buffer[3] = mode3;
 8000cae:	4b49      	ldr	r3, [pc, #292]	; (8000dd4 <fsm_setting_run+0x28c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a44      	ldr	r2, [pc, #272]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000cb4:	60d3      	str	r3, [r2, #12]
			led_buffer[1] = yellow_time;
 8000cb6:	4b48      	ldr	r3, [pc, #288]	; (8000dd8 <fsm_setting_run+0x290>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a42      	ldr	r2, [pc, #264]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000cbc:	6053      	str	r3, [r2, #4]
			New = 0;
 8000cbe:	4b3f      	ldr	r3, [pc, #252]	; (8000dbc <fsm_setting_run+0x274>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
		if(timer_flag[4] == 1){
 8000cc4:	4b3b      	ldr	r3, [pc, #236]	; (8000db4 <fsm_setting_run+0x26c>)
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d106      	bne.n	8000cda <fsm_setting_run+0x192>
			setTimer(4, 500);
 8000ccc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000cd0:	2004      	movs	r0, #4
 8000cd2:	f000 fc71 	bl	80015b8 <setTimer>
			toggleYellow();
 8000cd6:	f000 fe05 	bl	80018e4 <toggleYellow>
		if(button_flag[1] == 1){
 8000cda:	4b3c      	ldr	r3, [pc, #240]	; (8000dcc <fsm_setting_run+0x284>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d10b      	bne.n	8000cfa <fsm_setting_run+0x1b2>
			button_flag[1] = 0;
 8000ce2:	4b3a      	ldr	r3, [pc, #232]	; (8000dcc <fsm_setting_run+0x284>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	605a      	str	r2, [r3, #4]
			HAL_GPIO_TogglePin(test_button_GPIO_Port, test_button_Pin);
 8000ce8:	2104      	movs	r1, #4
 8000cea:	4839      	ldr	r0, [pc, #228]	; (8000dd0 <fsm_setting_run+0x288>)
 8000cec:	f001 f959 	bl	8001fa2 <HAL_GPIO_TogglePin>
			++led_buffer[1];
 8000cf0:	4b34      	ldr	r3, [pc, #208]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	4a33      	ldr	r2, [pc, #204]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000cf8:	6053      	str	r3, [r2, #4]
		if(led_buffer[1] >= 10){
 8000cfa:	4b32      	ldr	r3, [pc, #200]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b09      	cmp	r3, #9
 8000d00:	dd07      	ble.n	8000d12 <fsm_setting_run+0x1ca>
			led_buffer[0]++;
 8000d02:	4b30      	ldr	r3, [pc, #192]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	3301      	adds	r3, #1
 8000d08:	4a2e      	ldr	r2, [pc, #184]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000d0a:	6013      	str	r3, [r2, #0]
			led_buffer[1] = 0;
 8000d0c:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]
		if((led_buffer[0]*10 + led_buffer[1]) >= 100){
 8000d12:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	4613      	mov	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	2b63      	cmp	r3, #99	; 0x63
 8000d28:	dd05      	ble.n	8000d36 <fsm_setting_run+0x1ee>
			led_buffer[0] = 9;
 8000d2a:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000d2c:	2209      	movs	r2, #9
 8000d2e:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 9;
 8000d30:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000d32:	2209      	movs	r2, #9
 8000d34:	605a      	str	r2, [r3, #4]
		if(button_flag[2] == 1){
 8000d36:	4b25      	ldr	r3, [pc, #148]	; (8000dcc <fsm_setting_run+0x284>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d10e      	bne.n	8000d5c <fsm_setting_run+0x214>
			button_flag[2] = 0;
 8000d3e:	4b23      	ldr	r3, [pc, #140]	; (8000dcc <fsm_setting_run+0x284>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
			yellow_time = led_buffer[0]*10 + led_buffer[1];
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a1f      	ldr	r2, [pc, #124]	; (8000dd8 <fsm_setting_run+0x290>)
 8000d5a:	6013      	str	r3, [r2, #0]
		if(yellow_time >= 100){
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <fsm_setting_run+0x290>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b63      	cmp	r3, #99	; 0x63
 8000d62:	dd08      	ble.n	8000d76 <fsm_setting_run+0x22e>
			yellow_time = 99;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <fsm_setting_run+0x290>)
 8000d66:	2263      	movs	r2, #99	; 0x63
 8000d68:	601a      	str	r2, [r3, #0]
			led_buffer[0] = 9;
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000d6c:	2209      	movs	r2, #9
 8000d6e:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 9;
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <fsm_setting_run+0x27c>)
 8000d72:	2209      	movs	r2, #9
 8000d74:	605a      	str	r2, [r3, #4]
		if(button_flag[0] == 1){
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <fsm_setting_run+0x284>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	f040 80a9 	bne.w	8000ed2 <fsm_setting_run+0x38a>
			button_flag[0] = 0;
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <fsm_setting_run+0x284>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
			clearLed();
 8000d86:	f000 fac5 	bl	8001314 <clearLed>
			clear_light();
 8000d8a:	f000 fd77 	bl	800187c <clear_light>
			setTimer(3, 250);
 8000d8e:	21fa      	movs	r1, #250	; 0xfa
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 fc11 	bl	80015b8 <setTimer>
			setTimer(4, 500);
 8000d96:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d9a:	2004      	movs	r0, #4
 8000d9c:	f000 fc0c 	bl	80015b8 <setTimer>
			New = 1;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <fsm_setting_run+0x274>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	601a      	str	r2, [r3, #0]
			status = GREEN_SETTING;
 8000da6:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <fsm_setting_run+0x270>)
 8000da8:	2207      	movs	r2, #7
 8000daa:	601a      	str	r2, [r3, #0]
		break;
 8000dac:	e091      	b.n	8000ed2 <fsm_setting_run+0x38a>
 8000dae:	bf00      	nop
 8000db0:	20000068 	.word	0x20000068
 8000db4:	200000a8 	.word	0x200000a8
 8000db8:	20000064 	.word	0x20000064
 8000dbc:	2000006c 	.word	0x2000006c
 8000dc0:	20000018 	.word	0x20000018
 8000dc4:	20000070 	.word	0x20000070
 8000dc8:	2000000c 	.word	0x2000000c
 8000dcc:	2000004c 	.word	0x2000004c
 8000dd0:	40010800 	.word	0x40010800
 8000dd4:	2000001c 	.word	0x2000001c
 8000dd8:	20000010 	.word	0x20000010
		if(New == 1){
 8000ddc:	4b3f      	ldr	r3, [pc, #252]	; (8000edc <fsm_setting_run+0x394>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d10a      	bne.n	8000dfa <fsm_setting_run+0x2b2>
			led_buffer[3] = mode4;
 8000de4:	4b3e      	ldr	r3, [pc, #248]	; (8000ee0 <fsm_setting_run+0x398>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a3e      	ldr	r2, [pc, #248]	; (8000ee4 <fsm_setting_run+0x39c>)
 8000dea:	60d3      	str	r3, [r2, #12]
			led_buffer[1] = green_time;
 8000dec:	4b3e      	ldr	r3, [pc, #248]	; (8000ee8 <fsm_setting_run+0x3a0>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a3c      	ldr	r2, [pc, #240]	; (8000ee4 <fsm_setting_run+0x39c>)
 8000df2:	6053      	str	r3, [r2, #4]
			New = 0;
 8000df4:	4b39      	ldr	r3, [pc, #228]	; (8000edc <fsm_setting_run+0x394>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
		if(timer_flag[4] == 1){
 8000dfa:	4b3c      	ldr	r3, [pc, #240]	; (8000eec <fsm_setting_run+0x3a4>)
 8000dfc:	691b      	ldr	r3, [r3, #16]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d106      	bne.n	8000e10 <fsm_setting_run+0x2c8>
			setTimer(4, 500);
 8000e02:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e06:	2004      	movs	r0, #4
 8000e08:	f000 fbd6 	bl	80015b8 <setTimer>
			toggleGreen();
 8000e0c:	f000 fd7a 	bl	8001904 <toggleGreen>
		if(button_flag[1] == 1){
 8000e10:	4b37      	ldr	r3, [pc, #220]	; (8000ef0 <fsm_setting_run+0x3a8>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d10b      	bne.n	8000e30 <fsm_setting_run+0x2e8>
			button_flag[1] = 0;
 8000e18:	4b35      	ldr	r3, [pc, #212]	; (8000ef0 <fsm_setting_run+0x3a8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	605a      	str	r2, [r3, #4]
			HAL_GPIO_TogglePin(test_button_GPIO_Port, test_button_Pin);
 8000e1e:	2104      	movs	r1, #4
 8000e20:	4834      	ldr	r0, [pc, #208]	; (8000ef4 <fsm_setting_run+0x3ac>)
 8000e22:	f001 f8be 	bl	8001fa2 <HAL_GPIO_TogglePin>
			++led_buffer[1];
 8000e26:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <fsm_setting_run+0x39c>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	4a2d      	ldr	r2, [pc, #180]	; (8000ee4 <fsm_setting_run+0x39c>)
 8000e2e:	6053      	str	r3, [r2, #4]
		if(led_buffer[1] >= 10){
 8000e30:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <fsm_setting_run+0x39c>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b09      	cmp	r3, #9
 8000e36:	dd07      	ble.n	8000e48 <fsm_setting_run+0x300>
			led_buffer[0]++;
 8000e38:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <fsm_setting_run+0x39c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	4a29      	ldr	r2, [pc, #164]	; (8000ee4 <fsm_setting_run+0x39c>)
 8000e40:	6013      	str	r3, [r2, #0]
			led_buffer[1] = 0;
 8000e42:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <fsm_setting_run+0x39c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	605a      	str	r2, [r3, #4]
		if((led_buffer[0]*10 + led_buffer[1]) >= 100){
 8000e48:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <fsm_setting_run+0x39c>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <fsm_setting_run+0x39c>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	2b63      	cmp	r3, #99	; 0x63
 8000e5e:	dd05      	ble.n	8000e6c <fsm_setting_run+0x324>
			led_buffer[0] = 9;
 8000e60:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <fsm_setting_run+0x39c>)
 8000e62:	2209      	movs	r2, #9
 8000e64:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 9;
 8000e66:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <fsm_setting_run+0x39c>)
 8000e68:	2209      	movs	r2, #9
 8000e6a:	605a      	str	r2, [r3, #4]
		if(button_flag[2] == 1){
 8000e6c:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <fsm_setting_run+0x3a8>)
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d10e      	bne.n	8000e92 <fsm_setting_run+0x34a>
			button_flag[2] = 0;
 8000e74:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <fsm_setting_run+0x3a8>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
			green_time = led_buffer[0]*10 + led_buffer[1];
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <fsm_setting_run+0x39c>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	461a      	mov	r2, r3
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <fsm_setting_run+0x39c>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a16      	ldr	r2, [pc, #88]	; (8000ee8 <fsm_setting_run+0x3a0>)
 8000e90:	6013      	str	r3, [r2, #0]
		if(green_time >= 100){
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <fsm_setting_run+0x3a0>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b63      	cmp	r3, #99	; 0x63
 8000e98:	dd08      	ble.n	8000eac <fsm_setting_run+0x364>
			green_time = 99;
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <fsm_setting_run+0x3a0>)
 8000e9c:	2263      	movs	r2, #99	; 0x63
 8000e9e:	601a      	str	r2, [r3, #0]
			led_buffer[0] = 9;
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <fsm_setting_run+0x39c>)
 8000ea2:	2209      	movs	r2, #9
 8000ea4:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 9;
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <fsm_setting_run+0x39c>)
 8000ea8:	2209      	movs	r2, #9
 8000eaa:	605a      	str	r2, [r3, #4]
		if(button_flag[0] == 1){
 8000eac:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <fsm_setting_run+0x3a8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d110      	bne.n	8000ed6 <fsm_setting_run+0x38e>
			button_flag[0] = 0;
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <fsm_setting_run+0x3a8>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
			clearLed();
 8000eba:	f000 fa2b 	bl	8001314 <clearLed>
			clear_light();
 8000ebe:	f000 fcdd 	bl	800187c <clear_light>
			status = INIT;
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <fsm_setting_run+0x3b0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
		break;
 8000ec8:	e005      	b.n	8000ed6 <fsm_setting_run+0x38e>
		break;
 8000eca:	bf00      	nop
 8000ecc:	e004      	b.n	8000ed8 <fsm_setting_run+0x390>
		break;
 8000ece:	bf00      	nop
 8000ed0:	e002      	b.n	8000ed8 <fsm_setting_run+0x390>
		break;
 8000ed2:	bf00      	nop
 8000ed4:	e000      	b.n	8000ed8 <fsm_setting_run+0x390>
		break;
 8000ed6:	bf00      	nop
	}
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	2000006c 	.word	0x2000006c
 8000ee0:	20000020 	.word	0x20000020
 8000ee4:	20000070 	.word	0x20000070
 8000ee8:	20000014 	.word	0x20000014
 8000eec:	200000a8 	.word	0x200000a8
 8000ef0:	2000004c 	.word	0x2000004c
 8000ef4:	40010800 	.word	0x40010800
 8000ef8:	20000064 	.word	0x20000064

08000efc <display7SEG>:

#include "led7_segment.h"


int led_buffer[4] = {0};
void display7SEG(int num){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b09      	cmp	r3, #9
 8000f08:	f200 8180 	bhi.w	800120c <display7SEG+0x310>
 8000f0c:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <display7SEG+0x18>)
 8000f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f12:	bf00      	nop
 8000f14:	08000f3d 	.word	0x08000f3d
 8000f18:	08000f85 	.word	0x08000f85
 8000f1c:	08000fcd 	.word	0x08000fcd
 8000f20:	08001015 	.word	0x08001015
 8000f24:	0800105d 	.word	0x0800105d
 8000f28:	080010a5 	.word	0x080010a5
 8000f2c:	080010ed 	.word	0x080010ed
 8000f30:	08001135 	.word	0x08001135
 8000f34:	0800117d 	.word	0x0800117d
 8000f38:	080011c5 	.word	0x080011c5
	 //1
	 switch(num){
	 case 0:
		 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2101      	movs	r1, #1
 8000f40:	48b4      	ldr	r0, [pc, #720]	; (8001214 <display7SEG+0x318>)
 8000f42:	f001 f816 	bl	8001f72 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2102      	movs	r1, #2
 8000f4a:	48b2      	ldr	r0, [pc, #712]	; (8001214 <display7SEG+0x318>)
 8000f4c:	f001 f811 	bl	8001f72 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2104      	movs	r1, #4
 8000f54:	48af      	ldr	r0, [pc, #700]	; (8001214 <display7SEG+0x318>)
 8000f56:	f001 f80c 	bl	8001f72 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2108      	movs	r1, #8
 8000f5e:	48ad      	ldr	r0, [pc, #692]	; (8001214 <display7SEG+0x318>)
 8000f60:	f001 f807 	bl	8001f72 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2110      	movs	r1, #16
 8000f68:	48aa      	ldr	r0, [pc, #680]	; (8001214 <display7SEG+0x318>)
 8000f6a:	f001 f802 	bl	8001f72 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2120      	movs	r1, #32
 8000f72:	48a8      	ldr	r0, [pc, #672]	; (8001214 <display7SEG+0x318>)
 8000f74:	f000 fffd 	bl	8001f72 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2140      	movs	r1, #64	; 0x40
 8000f7c:	48a5      	ldr	r0, [pc, #660]	; (8001214 <display7SEG+0x318>)
 8000f7e:	f000 fff8 	bl	8001f72 <HAL_GPIO_WritePin>
	 break;
 8000f82:	e143      	b.n	800120c <display7SEG+0x310>
	 case 1:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2101      	movs	r1, #1
 8000f88:	48a2      	ldr	r0, [pc, #648]	; (8001214 <display7SEG+0x318>)
 8000f8a:	f000 fff2 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2102      	movs	r1, #2
 8000f92:	48a0      	ldr	r0, [pc, #640]	; (8001214 <display7SEG+0x318>)
 8000f94:	f000 ffed 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	489d      	ldr	r0, [pc, #628]	; (8001214 <display7SEG+0x318>)
 8000f9e:	f000 ffe8 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2108      	movs	r1, #8
 8000fa6:	489b      	ldr	r0, [pc, #620]	; (8001214 <display7SEG+0x318>)
 8000fa8:	f000 ffe3 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2110      	movs	r1, #16
 8000fb0:	4898      	ldr	r0, [pc, #608]	; (8001214 <display7SEG+0x318>)
 8000fb2:	f000 ffde 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2120      	movs	r1, #32
 8000fba:	4896      	ldr	r0, [pc, #600]	; (8001214 <display7SEG+0x318>)
 8000fbc:	f000 ffd9 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_SET);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2140      	movs	r1, #64	; 0x40
 8000fc4:	4893      	ldr	r0, [pc, #588]	; (8001214 <display7SEG+0x318>)
 8000fc6:	f000 ffd4 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 break;
 8000fca:	e11f      	b.n	800120c <display7SEG+0x310>
	 case 2:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2101      	movs	r1, #1
 8000fd0:	4890      	ldr	r0, [pc, #576]	; (8001214 <display7SEG+0x318>)
 8000fd2:	f000 ffce 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2102      	movs	r1, #2
 8000fda:	488e      	ldr	r0, [pc, #568]	; (8001214 <display7SEG+0x318>)
 8000fdc:	f000 ffc9 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2104      	movs	r1, #4
 8000fe4:	488b      	ldr	r0, [pc, #556]	; (8001214 <display7SEG+0x318>)
 8000fe6:	f000 ffc4 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2108      	movs	r1, #8
 8000fee:	4889      	ldr	r0, [pc, #548]	; (8001214 <display7SEG+0x318>)
 8000ff0:	f000 ffbf 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	4886      	ldr	r0, [pc, #536]	; (8001214 <display7SEG+0x318>)
 8000ffa:	f000 ffba 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	2120      	movs	r1, #32
 8001002:	4884      	ldr	r0, [pc, #528]	; (8001214 <display7SEG+0x318>)
 8001004:	f000 ffb5 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	2140      	movs	r1, #64	; 0x40
 800100c:	4881      	ldr	r0, [pc, #516]	; (8001214 <display7SEG+0x318>)
 800100e:	f000 ffb0 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 break;
 8001012:	e0fb      	b.n	800120c <display7SEG+0x310>
	 case 3:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	2101      	movs	r1, #1
 8001018:	487e      	ldr	r0, [pc, #504]	; (8001214 <display7SEG+0x318>)
 800101a:	f000 ffaa 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2102      	movs	r1, #2
 8001022:	487c      	ldr	r0, [pc, #496]	; (8001214 <display7SEG+0x318>)
 8001024:	f000 ffa5 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	2104      	movs	r1, #4
 800102c:	4879      	ldr	r0, [pc, #484]	; (8001214 <display7SEG+0x318>)
 800102e:	f000 ffa0 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	2108      	movs	r1, #8
 8001036:	4877      	ldr	r0, [pc, #476]	; (8001214 <display7SEG+0x318>)
 8001038:	f000 ff9b 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	2110      	movs	r1, #16
 8001040:	4874      	ldr	r0, [pc, #464]	; (8001214 <display7SEG+0x318>)
 8001042:	f000 ff96 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	2120      	movs	r1, #32
 800104a:	4872      	ldr	r0, [pc, #456]	; (8001214 <display7SEG+0x318>)
 800104c:	f000 ff91 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2140      	movs	r1, #64	; 0x40
 8001054:	486f      	ldr	r0, [pc, #444]	; (8001214 <display7SEG+0x318>)
 8001056:	f000 ff8c 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 break;
 800105a:	e0d7      	b.n	800120c <display7SEG+0x310>
	 case 4:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 800105c:	2201      	movs	r2, #1
 800105e:	2101      	movs	r1, #1
 8001060:	486c      	ldr	r0, [pc, #432]	; (8001214 <display7SEG+0x318>)
 8001062:	f000 ff86 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2102      	movs	r1, #2
 800106a:	486a      	ldr	r0, [pc, #424]	; (8001214 <display7SEG+0x318>)
 800106c:	f000 ff81 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2104      	movs	r1, #4
 8001074:	4867      	ldr	r0, [pc, #412]	; (8001214 <display7SEG+0x318>)
 8001076:	f000 ff7c 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	2108      	movs	r1, #8
 800107e:	4865      	ldr	r0, [pc, #404]	; (8001214 <display7SEG+0x318>)
 8001080:	f000 ff77 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	2110      	movs	r1, #16
 8001088:	4862      	ldr	r0, [pc, #392]	; (8001214 <display7SEG+0x318>)
 800108a:	f000 ff72 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2120      	movs	r1, #32
 8001092:	4860      	ldr	r0, [pc, #384]	; (8001214 <display7SEG+0x318>)
 8001094:	f000 ff6d 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2140      	movs	r1, #64	; 0x40
 800109c:	485d      	ldr	r0, [pc, #372]	; (8001214 <display7SEG+0x318>)
 800109e:	f000 ff68 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 break;
 80010a2:	e0b3      	b.n	800120c <display7SEG+0x310>
	 case 5:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2101      	movs	r1, #1
 80010a8:	485a      	ldr	r0, [pc, #360]	; (8001214 <display7SEG+0x318>)
 80010aa:	f000 ff62 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2102      	movs	r1, #2
 80010b2:	4858      	ldr	r0, [pc, #352]	; (8001214 <display7SEG+0x318>)
 80010b4:	f000 ff5d 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2104      	movs	r1, #4
 80010bc:	4855      	ldr	r0, [pc, #340]	; (8001214 <display7SEG+0x318>)
 80010be:	f000 ff58 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2108      	movs	r1, #8
 80010c6:	4853      	ldr	r0, [pc, #332]	; (8001214 <display7SEG+0x318>)
 80010c8:	f000 ff53 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2110      	movs	r1, #16
 80010d0:	4850      	ldr	r0, [pc, #320]	; (8001214 <display7SEG+0x318>)
 80010d2:	f000 ff4e 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2120      	movs	r1, #32
 80010da:	484e      	ldr	r0, [pc, #312]	; (8001214 <display7SEG+0x318>)
 80010dc:	f000 ff49 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2140      	movs	r1, #64	; 0x40
 80010e4:	484b      	ldr	r0, [pc, #300]	; (8001214 <display7SEG+0x318>)
 80010e6:	f000 ff44 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 break;
 80010ea:	e08f      	b.n	800120c <display7SEG+0x310>
	 case 6:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2101      	movs	r1, #1
 80010f0:	4848      	ldr	r0, [pc, #288]	; (8001214 <display7SEG+0x318>)
 80010f2:	f000 ff3e 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 80010f6:	2201      	movs	r2, #1
 80010f8:	2102      	movs	r1, #2
 80010fa:	4846      	ldr	r0, [pc, #280]	; (8001214 <display7SEG+0x318>)
 80010fc:	f000 ff39 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	2104      	movs	r1, #4
 8001104:	4843      	ldr	r0, [pc, #268]	; (8001214 <display7SEG+0x318>)
 8001106:	f000 ff34 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2108      	movs	r1, #8
 800110e:	4841      	ldr	r0, [pc, #260]	; (8001214 <display7SEG+0x318>)
 8001110:	f000 ff2f 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	2110      	movs	r1, #16
 8001118:	483e      	ldr	r0, [pc, #248]	; (8001214 <display7SEG+0x318>)
 800111a:	f000 ff2a 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2120      	movs	r1, #32
 8001122:	483c      	ldr	r0, [pc, #240]	; (8001214 <display7SEG+0x318>)
 8001124:	f000 ff25 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	2140      	movs	r1, #64	; 0x40
 800112c:	4839      	ldr	r0, [pc, #228]	; (8001214 <display7SEG+0x318>)
 800112e:	f000 ff20 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 break;
 8001132:	e06b      	b.n	800120c <display7SEG+0x310>
	 case 7:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2101      	movs	r1, #1
 8001138:	4836      	ldr	r0, [pc, #216]	; (8001214 <display7SEG+0x318>)
 800113a:	f000 ff1a 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	2102      	movs	r1, #2
 8001142:	4834      	ldr	r0, [pc, #208]	; (8001214 <display7SEG+0x318>)
 8001144:	f000 ff15 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	2104      	movs	r1, #4
 800114c:	4831      	ldr	r0, [pc, #196]	; (8001214 <display7SEG+0x318>)
 800114e:	f000 ff10 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8001152:	2201      	movs	r2, #1
 8001154:	2108      	movs	r1, #8
 8001156:	482f      	ldr	r0, [pc, #188]	; (8001214 <display7SEG+0x318>)
 8001158:	f000 ff0b 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2110      	movs	r1, #16
 8001160:	482c      	ldr	r0, [pc, #176]	; (8001214 <display7SEG+0x318>)
 8001162:	f000 ff06 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	2120      	movs	r1, #32
 800116a:	482a      	ldr	r0, [pc, #168]	; (8001214 <display7SEG+0x318>)
 800116c:	f000 ff01 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_SET);
 8001170:	2201      	movs	r2, #1
 8001172:	2140      	movs	r1, #64	; 0x40
 8001174:	4827      	ldr	r0, [pc, #156]	; (8001214 <display7SEG+0x318>)
 8001176:	f000 fefc 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 break;
 800117a:	e047      	b.n	800120c <display7SEG+0x310>
	 case 8:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2101      	movs	r1, #1
 8001180:	4824      	ldr	r0, [pc, #144]	; (8001214 <display7SEG+0x318>)
 8001182:	f000 fef6 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2102      	movs	r1, #2
 800118a:	4822      	ldr	r0, [pc, #136]	; (8001214 <display7SEG+0x318>)
 800118c:	f000 fef1 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	2104      	movs	r1, #4
 8001194:	481f      	ldr	r0, [pc, #124]	; (8001214 <display7SEG+0x318>)
 8001196:	f000 feec 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	2108      	movs	r1, #8
 800119e:	481d      	ldr	r0, [pc, #116]	; (8001214 <display7SEG+0x318>)
 80011a0:	f000 fee7 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2110      	movs	r1, #16
 80011a8:	481a      	ldr	r0, [pc, #104]	; (8001214 <display7SEG+0x318>)
 80011aa:	f000 fee2 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2120      	movs	r1, #32
 80011b2:	4818      	ldr	r0, [pc, #96]	; (8001214 <display7SEG+0x318>)
 80011b4:	f000 fedd 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2140      	movs	r1, #64	; 0x40
 80011bc:	4815      	ldr	r0, [pc, #84]	; (8001214 <display7SEG+0x318>)
 80011be:	f000 fed8 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 break;
 80011c2:	e023      	b.n	800120c <display7SEG+0x310>
	 case 9:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2101      	movs	r1, #1
 80011c8:	4812      	ldr	r0, [pc, #72]	; (8001214 <display7SEG+0x318>)
 80011ca:	f000 fed2 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2102      	movs	r1, #2
 80011d2:	4810      	ldr	r0, [pc, #64]	; (8001214 <display7SEG+0x318>)
 80011d4:	f000 fecd 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	2104      	movs	r1, #4
 80011dc:	480d      	ldr	r0, [pc, #52]	; (8001214 <display7SEG+0x318>)
 80011de:	f000 fec8 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2108      	movs	r1, #8
 80011e6:	480b      	ldr	r0, [pc, #44]	; (8001214 <display7SEG+0x318>)
 80011e8:	f000 fec3 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 80011ec:	2201      	movs	r2, #1
 80011ee:	2110      	movs	r1, #16
 80011f0:	4808      	ldr	r0, [pc, #32]	; (8001214 <display7SEG+0x318>)
 80011f2:	f000 febe 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2120      	movs	r1, #32
 80011fa:	4806      	ldr	r0, [pc, #24]	; (8001214 <display7SEG+0x318>)
 80011fc:	f000 feb9 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	2140      	movs	r1, #64	; 0x40
 8001204:	4803      	ldr	r0, [pc, #12]	; (8001214 <display7SEG+0x318>)
 8001206:	f000 feb4 	bl	8001f72 <HAL_GPIO_WritePin>
	 	 break;
 800120a:	bf00      	nop
	 }
 }
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40010c00 	.word	0x40010c00

08001218 <enableLed>:



void enableLed(int index){
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b03      	cmp	r3, #3
 8001224:	d86e      	bhi.n	8001304 <enableLed+0xec>
 8001226:	a201      	add	r2, pc, #4	; (adr r2, 800122c <enableLed+0x14>)
 8001228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122c:	0800123d 	.word	0x0800123d
 8001230:	0800126f 	.word	0x0800126f
 8001234:	080012a1 	.word	0x080012a1
 8001238:	080012d3 	.word	0x080012d3
	switch(index){
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 800123c:	2201      	movs	r2, #1
 800123e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001242:	4833      	ldr	r0, [pc, #204]	; (8001310 <enableLed+0xf8>)
 8001244:	f000 fe95 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800124e:	4830      	ldr	r0, [pc, #192]	; (8001310 <enableLed+0xf8>)
 8001250:	f000 fe8f 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800125a:	482d      	ldr	r0, [pc, #180]	; (8001310 <enableLed+0xf8>)
 800125c:	f000 fe89 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001266:	482a      	ldr	r0, [pc, #168]	; (8001310 <enableLed+0xf8>)
 8001268:	f000 fe83 	bl	8001f72 <HAL_GPIO_WritePin>
		break;
 800126c:	e04b      	b.n	8001306 <enableLed+0xee>
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001274:	4826      	ldr	r0, [pc, #152]	; (8001310 <enableLed+0xf8>)
 8001276:	f000 fe7c 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800127a:	2201      	movs	r2, #1
 800127c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001280:	4823      	ldr	r0, [pc, #140]	; (8001310 <enableLed+0xf8>)
 8001282:	f000 fe76 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128c:	4820      	ldr	r0, [pc, #128]	; (8001310 <enableLed+0xf8>)
 800128e:	f000 fe70 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001298:	481d      	ldr	r0, [pc, #116]	; (8001310 <enableLed+0xf8>)
 800129a:	f000 fe6a 	bl	8001f72 <HAL_GPIO_WritePin>
		break;
 800129e:	e032      	b.n	8001306 <enableLed+0xee>
	case 2:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012a6:	481a      	ldr	r0, [pc, #104]	; (8001310 <enableLed+0xf8>)
 80012a8:	f000 fe63 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b2:	4817      	ldr	r0, [pc, #92]	; (8001310 <enableLed+0xf8>)
 80012b4:	f000 fe5d 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012be:	4814      	ldr	r0, [pc, #80]	; (8001310 <enableLed+0xf8>)
 80012c0:	f000 fe57 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ca:	4811      	ldr	r0, [pc, #68]	; (8001310 <enableLed+0xf8>)
 80012cc:	f000 fe51 	bl	8001f72 <HAL_GPIO_WritePin>
		break;
 80012d0:	e019      	b.n	8001306 <enableLed+0xee>
	case 3:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d8:	480d      	ldr	r0, [pc, #52]	; (8001310 <enableLed+0xf8>)
 80012da:	f000 fe4a 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e4:	480a      	ldr	r0, [pc, #40]	; (8001310 <enableLed+0xf8>)
 80012e6:	f000 fe44 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012f0:	4807      	ldr	r0, [pc, #28]	; (8001310 <enableLed+0xf8>)
 80012f2:	f000 fe3e 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <enableLed+0xf8>)
 80012fe:	f000 fe38 	bl	8001f72 <HAL_GPIO_WritePin>
		break;
 8001302:	e000      	b.n	8001306 <enableLed+0xee>
	default:
		break;
 8001304:	bf00      	nop
	}
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40010800 	.word	0x40010800

08001314 <clearLed>:

void clearLed(){
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800131e:	480b      	ldr	r0, [pc, #44]	; (800134c <clearLed+0x38>)
 8001320:	f000 fe27 	bl	8001f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132a:	4808      	ldr	r0, [pc, #32]	; (800134c <clearLed+0x38>)
 800132c:	f000 fe21 	bl	8001f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <clearLed+0x38>)
 8001338:	f000 fe1b 	bl	8001f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001342:	4802      	ldr	r0, [pc, #8]	; (800134c <clearLed+0x38>)
 8001344:	f000 fe15 	bl	8001f72 <HAL_GPIO_WritePin>
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40010800 	.word	0x40010800

08001350 <update7SEG>:

void update7SEG(int index){
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	enableLed(index);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff5d 	bl	8001218 <enableLed>
	display7SEG(led_buffer[index]);
 800135e:	4a05      	ldr	r2, [pc, #20]	; (8001374 <update7SEG+0x24>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fdc8 	bl	8000efc <display7SEG>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000070 	.word	0x20000070

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137c:	f000 faf8 	bl	8001970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001380:	f000 f810 	bl	80013a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8001384:	f000 f84a 	bl	800141c <MX_TIM2_Init>
  MX_GPIO_Init();
 8001388:	f000 f894 	bl	80014b4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800138c:	4804      	ldr	r0, [pc, #16]	; (80013a0 <main+0x28>)
 800138e:	f001 fa4d 	bl	800282c <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_automatic_run();
 8001392:	f7ff f84b 	bl	800042c <fsm_automatic_run>
	  fsm_setting_run();
 8001396:	f7ff fbd7 	bl	8000b48 <fsm_setting_run>
	  fsm_manual_run();
 800139a:	f7ff fae7 	bl	800096c <fsm_manual_run>
	  fsm_automatic_run();
 800139e:	e7f8      	b.n	8001392 <main+0x1a>
 80013a0:	200000d0 	.word	0x200000d0

080013a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b090      	sub	sp, #64	; 0x40
 80013a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013aa:	f107 0318 	add.w	r3, r7, #24
 80013ae:	2228      	movs	r2, #40	; 0x28
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f001 fdea 	bl	8002f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c6:	2302      	movs	r3, #2
 80013c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ca:	2301      	movs	r3, #1
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ce:	2310      	movs	r3, #16
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d6:	f107 0318 	add.w	r3, r7, #24
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 fdfa 	bl	8001fd4 <HAL_RCC_OscConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80013e6:	f000 f8e1 	bl	80015ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ea:	230f      	movs	r3, #15
 80013ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f001 f866 	bl	80024d4 <HAL_RCC_ClockConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800140e:	f000 f8cd 	bl	80015ac <Error_Handler>
  }
}
 8001412:	bf00      	nop
 8001414:	3740      	adds	r7, #64	; 0x40
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	463b      	mov	r3, r7
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001438:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <MX_TIM2_Init+0x94>)
 800143a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800143e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <MX_TIM2_Init+0x94>)
 8001442:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001446:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <MX_TIM2_Init+0x94>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <MX_TIM2_Init+0x94>)
 8001450:	2209      	movs	r2, #9
 8001452:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <MX_TIM2_Init+0x94>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <MX_TIM2_Init+0x94>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001460:	4813      	ldr	r0, [pc, #76]	; (80014b0 <MX_TIM2_Init+0x94>)
 8001462:	f001 f993 	bl	800278c <HAL_TIM_Base_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800146c:	f000 f89e 	bl	80015ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001474:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	4619      	mov	r1, r3
 800147c:	480c      	ldr	r0, [pc, #48]	; (80014b0 <MX_TIM2_Init+0x94>)
 800147e:	f001 fb11 	bl	8002aa4 <HAL_TIM_ConfigClockSource>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001488:	f000 f890 	bl	80015ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001494:	463b      	mov	r3, r7
 8001496:	4619      	mov	r1, r3
 8001498:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_TIM2_Init+0x94>)
 800149a:	f001 fce9 	bl	8002e70 <HAL_TIMEx_MasterConfigSynchronization>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014a4:	f000 f882 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	200000d0 	.word	0x200000d0

080014b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c8:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <MX_GPIO_Init+0xd0>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a2d      	ldr	r2, [pc, #180]	; (8001584 <MX_GPIO_Init+0xd0>)
 80014ce:	f043 0310 	orr.w	r3, r3, #16
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <MX_GPIO_Init+0xd0>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0310 	and.w	r3, r3, #16
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	4b28      	ldr	r3, [pc, #160]	; (8001584 <MX_GPIO_Init+0xd0>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a27      	ldr	r2, [pc, #156]	; (8001584 <MX_GPIO_Init+0xd0>)
 80014e6:	f043 0304 	orr.w	r3, r3, #4
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b25      	ldr	r3, [pc, #148]	; (8001584 <MX_GPIO_Init+0xd0>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f8:	4b22      	ldr	r3, [pc, #136]	; (8001584 <MX_GPIO_Init+0xd0>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a21      	ldr	r2, [pc, #132]	; (8001584 <MX_GPIO_Init+0xd0>)
 80014fe:	f043 0308 	orr.w	r3, r3, #8
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <MX_GPIO_Init+0xd0>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0308 	and.w	r3, r3, #8
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, test_timer_Pin|test_button_Pin|LED_RED_Pin|LED_YELLOW_Pin
 8001510:	2200      	movs	r2, #0
 8001512:	f24f 31f6 	movw	r1, #62454	; 0xf3f6
 8001516:	481c      	ldr	r0, [pc, #112]	; (8001588 <MX_GPIO_Init+0xd4>)
 8001518:	f000 fd2b 	bl	8001f72 <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin|LED_RED_2_Pin|LED_YELLOW_2_Pin|LED_GREEN_2_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_4_Pin
 800151c:	2200      	movs	r2, #0
 800151e:	217f      	movs	r1, #127	; 0x7f
 8001520:	481a      	ldr	r0, [pc, #104]	; (800158c <MX_GPIO_Init+0xd8>)
 8001522:	f000 fd26 	bl	8001f72 <HAL_GPIO_WritePin>
                          |SEG_5_Pin|SEG_6_Pin|SEG_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 8001526:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800152a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001530:	2301      	movs	r3, #1
 8001532:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	4619      	mov	r1, r3
 800153a:	4815      	ldr	r0, [pc, #84]	; (8001590 <MX_GPIO_Init+0xdc>)
 800153c:	f000 fb88 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : test_timer_Pin test_button_Pin LED_RED_Pin LED_YELLOW_Pin
                           LED_GREEN_Pin LED_RED_2_Pin LED_YELLOW_2_Pin LED_GREEN_2_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = test_timer_Pin|test_button_Pin|LED_RED_Pin|LED_YELLOW_Pin
 8001540:	f24f 33f6 	movw	r3, #62454	; 0xf3f6
 8001544:	613b      	str	r3, [r7, #16]
                          |LED_GREEN_Pin|LED_RED_2_Pin|LED_YELLOW_2_Pin|LED_GREEN_2_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001546:	2301      	movs	r3, #1
 8001548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2302      	movs	r3, #2
 8001550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f107 0310 	add.w	r3, r7, #16
 8001556:	4619      	mov	r1, r3
 8001558:	480b      	ldr	r0, [pc, #44]	; (8001588 <MX_GPIO_Init+0xd4>)
 800155a:	f000 fb79 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_1_Pin SEG_2_Pin SEG_3_Pin SEG_4_Pin
                           SEG_5_Pin SEG_6_Pin SEG_7_Pin */
  GPIO_InitStruct.Pin = SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_4_Pin
 800155e:	237f      	movs	r3, #127	; 0x7f
 8001560:	613b      	str	r3, [r7, #16]
                          |SEG_5_Pin|SEG_6_Pin|SEG_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2302      	movs	r3, #2
 800156c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	f107 0310 	add.w	r3, r7, #16
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_GPIO_Init+0xd8>)
 8001576:	f000 fb6b 	bl	8001c50 <HAL_GPIO_Init>

}
 800157a:	bf00      	nop
 800157c:	3720      	adds	r7, #32
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000
 8001588:	40010800 	.word	0x40010800
 800158c:	40010c00 	.word	0x40010c00
 8001590:	40011000 	.word	0x40011000

08001594 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	timerRun();
 800159c:	f000 f82c 	bl	80015f8 <timerRun>
	getKeyInput();
 80015a0:	f7fe fdd4 	bl	800014c <getKeyInput>
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b0:	b672      	cpsid	i
}
 80015b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <Error_Handler+0x8>
	...

080015b8 <setTimer>:
#define ClockCycle 10

int timer_counter[10] = {0};
int timer_flag[10] = {0};

void setTimer(int index, int duration){
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/ClockCycle;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	4a09      	ldr	r2, [pc, #36]	; (80015ec <setTimer+0x34>)
 80015c6:	fb82 1203 	smull	r1, r2, r2, r3
 80015ca:	1092      	asrs	r2, r2, #2
 80015cc:	17db      	asrs	r3, r3, #31
 80015ce:	1ad2      	subs	r2, r2, r3
 80015d0:	4907      	ldr	r1, [pc, #28]	; (80015f0 <setTimer+0x38>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 80015d8:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <setTimer+0x3c>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2100      	movs	r1, #0
 80015de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	66666667 	.word	0x66666667
 80015f0:	20000080 	.word	0x20000080
 80015f4:	200000a8 	.word	0x200000a8

080015f8 <timerRun>:

void timerRun(){
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
	for(int i=0; i<10; i++){
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	e016      	b.n	8001632 <timerRun+0x3a>
		timer_counter[i]--;
 8001604:	4a0f      	ldr	r2, [pc, #60]	; (8001644 <timerRun+0x4c>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160c:	1e5a      	subs	r2, r3, #1
 800160e:	490d      	ldr	r1, [pc, #52]	; (8001644 <timerRun+0x4c>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[i] <= 0){
 8001616:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <timerRun+0x4c>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161e:	2b00      	cmp	r3, #0
 8001620:	dc04      	bgt.n	800162c <timerRun+0x34>
			timer_flag[i] = 1;
 8001622:	4a09      	ldr	r2, [pc, #36]	; (8001648 <timerRun+0x50>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2101      	movs	r1, #1
 8001628:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i<10; i++){
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3301      	adds	r3, #1
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b09      	cmp	r3, #9
 8001636:	dde5      	ble.n	8001604 <timerRun+0xc>
		}
	}
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	20000080 	.word	0x20000080
 8001648:	200000a8 	.word	0x200000a8

0800164c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_MspInit+0x5c>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <HAL_MspInit+0x5c>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6193      	str	r3, [r2, #24]
 800165e:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_MspInit+0x5c>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <HAL_MspInit+0x5c>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <HAL_MspInit+0x5c>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001674:	61d3      	str	r3, [r2, #28]
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <HAL_MspInit+0x5c>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_MspInit+0x60>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	4a04      	ldr	r2, [pc, #16]	; (80016ac <HAL_MspInit+0x60>)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169e:	bf00      	nop
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40010000 	.word	0x40010000

080016b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c0:	d113      	bne.n	80016ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016c2:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <HAL_TIM_Base_MspInit+0x44>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	4a0b      	ldr	r2, [pc, #44]	; (80016f4 <HAL_TIM_Base_MspInit+0x44>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	61d3      	str	r3, [r2, #28]
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_TIM_Base_MspInit+0x44>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2100      	movs	r1, #0
 80016de:	201c      	movs	r0, #28
 80016e0:	f000 fa7f 	bl	8001be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016e4:	201c      	movs	r0, #28
 80016e6:	f000 fa98 	bl	8001c1a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000

080016f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <NMI_Handler+0x4>

080016fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <HardFault_Handler+0x4>

08001704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <MemManage_Handler+0x4>

0800170a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <BusFault_Handler+0x4>

08001710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <UsageFault_Handler+0x4>

08001716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr

0800172e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr

0800173a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800173e:	f000 f95d 	bl	80019fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <TIM2_IRQHandler+0x10>)
 800174e:	f001 f8b9 	bl	80028c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200000d0 	.word	0x200000d0

0800175c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <turn_red>:
 *      Author: Admin
 */

#include "traffic_light.h"

void turn_red(){
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800176c:	2201      	movs	r2, #1
 800176e:	2110      	movs	r1, #16
 8001770:	4807      	ldr	r0, [pc, #28]	; (8001790 <turn_red+0x28>)
 8001772:	f000 fbfe 	bl	8001f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001776:	2200      	movs	r2, #0
 8001778:	2120      	movs	r1, #32
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <turn_red+0x28>)
 800177c:	f000 fbf9 	bl	8001f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001780:	2200      	movs	r2, #0
 8001782:	2140      	movs	r1, #64	; 0x40
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <turn_red+0x28>)
 8001786:	f000 fbf4 	bl	8001f72 <HAL_GPIO_WritePin>
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40010800 	.word	0x40010800

08001794 <turn_green>:
void turn_green(){
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	2110      	movs	r1, #16
 800179c:	4807      	ldr	r0, [pc, #28]	; (80017bc <turn_green+0x28>)
 800179e:	f000 fbe8 	bl	8001f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2120      	movs	r1, #32
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <turn_green+0x28>)
 80017a8:	f000 fbe3 	bl	8001f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	2140      	movs	r1, #64	; 0x40
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <turn_green+0x28>)
 80017b2:	f000 fbde 	bl	8001f72 <HAL_GPIO_WritePin>
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40010800 	.word	0x40010800

080017c0 <turn_yellow>:
void turn_yellow(){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2110      	movs	r1, #16
 80017c8:	4807      	ldr	r0, [pc, #28]	; (80017e8 <turn_yellow+0x28>)
 80017ca:	f000 fbd2 	bl	8001f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80017ce:	2201      	movs	r2, #1
 80017d0:	2120      	movs	r1, #32
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <turn_yellow+0x28>)
 80017d4:	f000 fbcd 	bl	8001f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	2140      	movs	r1, #64	; 0x40
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <turn_yellow+0x28>)
 80017de:	f000 fbc8 	bl	8001f72 <HAL_GPIO_WritePin>
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40010800 	.word	0x40010800

080017ec <turn_red_2>:
void turn_red_2(){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 80017f0:	2201      	movs	r2, #1
 80017f2:	2180      	movs	r1, #128	; 0x80
 80017f4:	4808      	ldr	r0, [pc, #32]	; (8001818 <turn_red_2+0x2c>)
 80017f6:	f000 fbbc 	bl	8001f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001800:	4805      	ldr	r0, [pc, #20]	; (8001818 <turn_red_2+0x2c>)
 8001802:	f000 fbb6 	bl	8001f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	f44f 7100 	mov.w	r1, #512	; 0x200
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <turn_red_2+0x2c>)
 800180e:	f000 fbb0 	bl	8001f72 <HAL_GPIO_WritePin>
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40010800 	.word	0x40010800

0800181c <turn_green_2>:
void turn_green_2(){
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	2180      	movs	r1, #128	; 0x80
 8001824:	4808      	ldr	r0, [pc, #32]	; (8001848 <turn_green_2+0x2c>)
 8001826:	f000 fba4 	bl	8001f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 800182a:	2200      	movs	r2, #0
 800182c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001830:	4805      	ldr	r0, [pc, #20]	; (8001848 <turn_green_2+0x2c>)
 8001832:	f000 fb9e 	bl	8001f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 8001836:	2201      	movs	r2, #1
 8001838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <turn_green_2+0x2c>)
 800183e:	f000 fb98 	bl	8001f72 <HAL_GPIO_WritePin>
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40010800 	.word	0x40010800

0800184c <turn_yellow_2>:
void turn_yellow_2(){
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	2180      	movs	r1, #128	; 0x80
 8001854:	4808      	ldr	r0, [pc, #32]	; (8001878 <turn_yellow_2+0x2c>)
 8001856:	f000 fb8c 	bl	8001f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_SET);
 800185a:	2201      	movs	r2, #1
 800185c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <turn_yellow_2+0x2c>)
 8001862:	f000 fb86 	bl	8001f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	f44f 7100 	mov.w	r1, #512	; 0x200
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <turn_yellow_2+0x2c>)
 800186e:	f000 fb80 	bl	8001f72 <HAL_GPIO_WritePin>
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40010800 	.word	0x40010800

0800187c <clear_light>:

void clear_light(){
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	2110      	movs	r1, #16
 8001884:	480f      	ldr	r0, [pc, #60]	; (80018c4 <clear_light+0x48>)
 8001886:	f000 fb74 	bl	8001f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	2120      	movs	r1, #32
 800188e:	480d      	ldr	r0, [pc, #52]	; (80018c4 <clear_light+0x48>)
 8001890:	f000 fb6f 	bl	8001f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	2140      	movs	r1, #64	; 0x40
 8001898:	480a      	ldr	r0, [pc, #40]	; (80018c4 <clear_light+0x48>)
 800189a:	f000 fb6a 	bl	8001f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	2180      	movs	r1, #128	; 0x80
 80018a2:	4808      	ldr	r0, [pc, #32]	; (80018c4 <clear_light+0x48>)
 80018a4:	f000 fb65 	bl	8001f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <clear_light+0x48>)
 80018b0:	f000 fb5f 	bl	8001f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ba:	4802      	ldr	r0, [pc, #8]	; (80018c4 <clear_light+0x48>)
 80018bc:	f000 fb59 	bl	8001f72 <HAL_GPIO_WritePin>
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40010800 	.word	0x40010800

080018c8 <toggleRed>:

void toggleRed(){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80018cc:	2110      	movs	r1, #16
 80018ce:	4804      	ldr	r0, [pc, #16]	; (80018e0 <toggleRed+0x18>)
 80018d0:	f000 fb67 	bl	8001fa2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	4802      	ldr	r0, [pc, #8]	; (80018e0 <toggleRed+0x18>)
 80018d8:	f000 fb63 	bl	8001fa2 <HAL_GPIO_TogglePin>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40010800 	.word	0x40010800

080018e4 <toggleYellow>:
void toggleYellow(){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 80018e8:	2120      	movs	r1, #32
 80018ea:	4805      	ldr	r0, [pc, #20]	; (8001900 <toggleYellow+0x1c>)
 80018ec:	f000 fb59 	bl	8001fa2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin);
 80018f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <toggleYellow+0x1c>)
 80018f6:	f000 fb54 	bl	8001fa2 <HAL_GPIO_TogglePin>
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40010800 	.word	0x40010800

08001904 <toggleGreen>:
void toggleGreen(){
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001908:	2140      	movs	r1, #64	; 0x40
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <toggleGreen+0x1c>)
 800190c:	f000 fb49 	bl	8001fa2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
 8001910:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <toggleGreen+0x1c>)
 8001916:	f000 fb44 	bl	8001fa2 <HAL_GPIO_TogglePin>
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40010800 	.word	0x40010800

08001924 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001924:	f7ff ff1a 	bl	800175c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001928:	480b      	ldr	r0, [pc, #44]	; (8001958 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800192a:	490c      	ldr	r1, [pc, #48]	; (800195c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800192c:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <LoopFillZerobss+0x16>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001930:	e002      	b.n	8001938 <LoopCopyDataInit>

08001932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001936:	3304      	adds	r3, #4

08001938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800193c:	d3f9      	bcc.n	8001932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193e:	4a09      	ldr	r2, [pc, #36]	; (8001964 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001940:	4c09      	ldr	r4, [pc, #36]	; (8001968 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001944:	e001      	b.n	800194a <LoopFillZerobss>

08001946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001948:	3204      	adds	r2, #4

0800194a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800194c:	d3fb      	bcc.n	8001946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800194e:	f001 faf9 	bl	8002f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001952:	f7ff fd11 	bl	8001378 <main>
  bx lr
 8001956:	4770      	bx	lr
  ldr r0, =_sdata
 8001958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800195c:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001960:	08002fe0 	.word	0x08002fe0
  ldr r2, =_sbss
 8001964:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001968:	2000011c 	.word	0x2000011c

0800196c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800196c:	e7fe      	b.n	800196c <ADC1_2_IRQHandler>
	...

08001970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <HAL_Init+0x28>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a07      	ldr	r2, [pc, #28]	; (8001998 <HAL_Init+0x28>)
 800197a:	f043 0310 	orr.w	r3, r3, #16
 800197e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001980:	2003      	movs	r0, #3
 8001982:	f000 f923 	bl	8001bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001986:	200f      	movs	r0, #15
 8001988:	f000 f808 	bl	800199c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800198c:	f7ff fe5e 	bl	800164c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40022000 	.word	0x40022000

0800199c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_InitTick+0x54>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_InitTick+0x58>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4619      	mov	r1, r3
 80019ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 f93b 	bl	8001c36 <HAL_SYSTICK_Config>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00e      	b.n	80019e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b0f      	cmp	r3, #15
 80019ce:	d80a      	bhi.n	80019e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d0:	2200      	movs	r2, #0
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f000 f903 	bl	8001be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019dc:	4a06      	ldr	r2, [pc, #24]	; (80019f8 <HAL_InitTick+0x5c>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e000      	b.n	80019e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000024 	.word	0x20000024
 80019f4:	2000002c 	.word	0x2000002c
 80019f8:	20000028 	.word	0x20000028

080019fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_IncTick+0x1c>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_IncTick+0x20>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4a03      	ldr	r2, [pc, #12]	; (8001a1c <HAL_IncTick+0x20>)
 8001a0e:	6013      	str	r3, [r2, #0]
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	2000002c 	.word	0x2000002c
 8001a1c:	20000118 	.word	0x20000118

08001a20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return uwTick;
 8001a24:	4b02      	ldr	r3, [pc, #8]	; (8001a30 <HAL_GetTick+0x10>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	20000118 	.word	0x20000118

08001a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a50:	4013      	ands	r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a66:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	60d3      	str	r3, [r2, #12]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <__NVIC_GetPriorityGrouping+0x18>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	f003 0307 	and.w	r3, r3, #7
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	db0b      	blt.n	8001ac2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	f003 021f 	and.w	r2, r3, #31
 8001ab0:	4906      	ldr	r1, [pc, #24]	; (8001acc <__NVIC_EnableIRQ+0x34>)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	2001      	movs	r0, #1
 8001aba:	fa00 f202 	lsl.w	r2, r0, r2
 8001abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	e000e100 	.word	0xe000e100

08001ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db0a      	blt.n	8001afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	490c      	ldr	r1, [pc, #48]	; (8001b1c <__NVIC_SetPriority+0x4c>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	440b      	add	r3, r1
 8001af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af8:	e00a      	b.n	8001b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4908      	ldr	r1, [pc, #32]	; (8001b20 <__NVIC_SetPriority+0x50>)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	3b04      	subs	r3, #4
 8001b08:	0112      	lsls	r2, r2, #4
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	761a      	strb	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000e100 	.word	0xe000e100
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f1c3 0307 	rsb	r3, r3, #7
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	bf28      	it	cs
 8001b42:	2304      	movcs	r3, #4
 8001b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d902      	bls.n	8001b54 <NVIC_EncodePriority+0x30>
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3b03      	subs	r3, #3
 8001b52:	e000      	b.n	8001b56 <NVIC_EncodePriority+0x32>
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	401a      	ands	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	4313      	orrs	r3, r2
         );
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3724      	adds	r7, #36	; 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b98:	d301      	bcc.n	8001b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00f      	b.n	8001bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <SysTick_Config+0x40>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba6:	210f      	movs	r1, #15
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bac:	f7ff ff90 	bl	8001ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <SysTick_Config+0x40>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb6:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <SysTick_Config+0x40>)
 8001bb8:	2207      	movs	r2, #7
 8001bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	e000e010 	.word	0xe000e010

08001bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff ff2d 	bl	8001a34 <__NVIC_SetPriorityGrouping>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf4:	f7ff ff42 	bl	8001a7c <__NVIC_GetPriorityGrouping>
 8001bf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	6978      	ldr	r0, [r7, #20]
 8001c00:	f7ff ff90 	bl	8001b24 <NVIC_EncodePriority>
 8001c04:	4602      	mov	r2, r0
 8001c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff5f 	bl	8001ad0 <__NVIC_SetPriority>
}
 8001c12:	bf00      	nop
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff35 	bl	8001a98 <__NVIC_EnableIRQ>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ffa2 	bl	8001b88 <SysTick_Config>
 8001c44:	4603      	mov	r3, r0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b08b      	sub	sp, #44	; 0x2c
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c62:	e148      	b.n	8001ef6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c64:	2201      	movs	r2, #1
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69fa      	ldr	r2, [r7, #28]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	f040 8137 	bne.w	8001ef0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	4aa3      	ldr	r2, [pc, #652]	; (8001f14 <HAL_GPIO_Init+0x2c4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d05e      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
 8001c8c:	4aa1      	ldr	r2, [pc, #644]	; (8001f14 <HAL_GPIO_Init+0x2c4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d875      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001c92:	4aa1      	ldr	r2, [pc, #644]	; (8001f18 <HAL_GPIO_Init+0x2c8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d058      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
 8001c98:	4a9f      	ldr	r2, [pc, #636]	; (8001f18 <HAL_GPIO_Init+0x2c8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d86f      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001c9e:	4a9f      	ldr	r2, [pc, #636]	; (8001f1c <HAL_GPIO_Init+0x2cc>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d052      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
 8001ca4:	4a9d      	ldr	r2, [pc, #628]	; (8001f1c <HAL_GPIO_Init+0x2cc>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d869      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001caa:	4a9d      	ldr	r2, [pc, #628]	; (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d04c      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
 8001cb0:	4a9b      	ldr	r2, [pc, #620]	; (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d863      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001cb6:	4a9b      	ldr	r2, [pc, #620]	; (8001f24 <HAL_GPIO_Init+0x2d4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d046      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
 8001cbc:	4a99      	ldr	r2, [pc, #612]	; (8001f24 <HAL_GPIO_Init+0x2d4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d85d      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001cc2:	2b12      	cmp	r3, #18
 8001cc4:	d82a      	bhi.n	8001d1c <HAL_GPIO_Init+0xcc>
 8001cc6:	2b12      	cmp	r3, #18
 8001cc8:	d859      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001cca:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <HAL_GPIO_Init+0x80>)
 8001ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd0:	08001d4b 	.word	0x08001d4b
 8001cd4:	08001d25 	.word	0x08001d25
 8001cd8:	08001d37 	.word	0x08001d37
 8001cdc:	08001d79 	.word	0x08001d79
 8001ce0:	08001d7f 	.word	0x08001d7f
 8001ce4:	08001d7f 	.word	0x08001d7f
 8001ce8:	08001d7f 	.word	0x08001d7f
 8001cec:	08001d7f 	.word	0x08001d7f
 8001cf0:	08001d7f 	.word	0x08001d7f
 8001cf4:	08001d7f 	.word	0x08001d7f
 8001cf8:	08001d7f 	.word	0x08001d7f
 8001cfc:	08001d7f 	.word	0x08001d7f
 8001d00:	08001d7f 	.word	0x08001d7f
 8001d04:	08001d7f 	.word	0x08001d7f
 8001d08:	08001d7f 	.word	0x08001d7f
 8001d0c:	08001d7f 	.word	0x08001d7f
 8001d10:	08001d7f 	.word	0x08001d7f
 8001d14:	08001d2d 	.word	0x08001d2d
 8001d18:	08001d41 	.word	0x08001d41
 8001d1c:	4a82      	ldr	r2, [pc, #520]	; (8001f28 <HAL_GPIO_Init+0x2d8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d013      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d22:	e02c      	b.n	8001d7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	623b      	str	r3, [r7, #32]
          break;
 8001d2a:	e029      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	3304      	adds	r3, #4
 8001d32:	623b      	str	r3, [r7, #32]
          break;
 8001d34:	e024      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	3308      	adds	r3, #8
 8001d3c:	623b      	str	r3, [r7, #32]
          break;
 8001d3e:	e01f      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	330c      	adds	r3, #12
 8001d46:	623b      	str	r3, [r7, #32]
          break;
 8001d48:	e01a      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d102      	bne.n	8001d58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d52:	2304      	movs	r3, #4
 8001d54:	623b      	str	r3, [r7, #32]
          break;
 8001d56:	e013      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d105      	bne.n	8001d6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d60:	2308      	movs	r3, #8
 8001d62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	611a      	str	r2, [r3, #16]
          break;
 8001d6a:	e009      	b.n	8001d80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d6c:	2308      	movs	r3, #8
 8001d6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69fa      	ldr	r2, [r7, #28]
 8001d74:	615a      	str	r2, [r3, #20]
          break;
 8001d76:	e003      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	623b      	str	r3, [r7, #32]
          break;
 8001d7c:	e000      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          break;
 8001d7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2bff      	cmp	r3, #255	; 0xff
 8001d84:	d801      	bhi.n	8001d8a <HAL_GPIO_Init+0x13a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	e001      	b.n	8001d8e <HAL_GPIO_Init+0x13e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2bff      	cmp	r3, #255	; 0xff
 8001d94:	d802      	bhi.n	8001d9c <HAL_GPIO_Init+0x14c>
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	e002      	b.n	8001da2 <HAL_GPIO_Init+0x152>
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	3b08      	subs	r3, #8
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	210f      	movs	r1, #15
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	fa01 f303 	lsl.w	r3, r1, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	401a      	ands	r2, r3
 8001db4:	6a39      	ldr	r1, [r7, #32]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8090 	beq.w	8001ef0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dd0:	4b56      	ldr	r3, [pc, #344]	; (8001f2c <HAL_GPIO_Init+0x2dc>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	4a55      	ldr	r2, [pc, #340]	; (8001f2c <HAL_GPIO_Init+0x2dc>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6193      	str	r3, [r2, #24]
 8001ddc:	4b53      	ldr	r3, [pc, #332]	; (8001f2c <HAL_GPIO_Init+0x2dc>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001de8:	4a51      	ldr	r2, [pc, #324]	; (8001f30 <HAL_GPIO_Init+0x2e0>)
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	3302      	adds	r3, #2
 8001df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	220f      	movs	r2, #15
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a49      	ldr	r2, [pc, #292]	; (8001f34 <HAL_GPIO_Init+0x2e4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d00d      	beq.n	8001e30 <HAL_GPIO_Init+0x1e0>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a48      	ldr	r2, [pc, #288]	; (8001f38 <HAL_GPIO_Init+0x2e8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d007      	beq.n	8001e2c <HAL_GPIO_Init+0x1dc>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a47      	ldr	r2, [pc, #284]	; (8001f3c <HAL_GPIO_Init+0x2ec>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d101      	bne.n	8001e28 <HAL_GPIO_Init+0x1d8>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e004      	b.n	8001e32 <HAL_GPIO_Init+0x1e2>
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e002      	b.n	8001e32 <HAL_GPIO_Init+0x1e2>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_GPIO_Init+0x1e2>
 8001e30:	2300      	movs	r3, #0
 8001e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e34:	f002 0203 	and.w	r2, r2, #3
 8001e38:	0092      	lsls	r2, r2, #2
 8001e3a:	4093      	lsls	r3, r2
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e42:	493b      	ldr	r1, [pc, #236]	; (8001f30 <HAL_GPIO_Init+0x2e0>)
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	089b      	lsrs	r3, r3, #2
 8001e48:	3302      	adds	r3, #2
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d006      	beq.n	8001e6a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e5c:	4b38      	ldr	r3, [pc, #224]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	4937      	ldr	r1, [pc, #220]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	608b      	str	r3, [r1, #8]
 8001e68:	e006      	b.n	8001e78 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e6a:	4b35      	ldr	r3, [pc, #212]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	4933      	ldr	r1, [pc, #204]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d006      	beq.n	8001e92 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e84:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	492d      	ldr	r1, [pc, #180]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60cb      	str	r3, [r1, #12]
 8001e90:	e006      	b.n	8001ea0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e92:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	4929      	ldr	r1, [pc, #164]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d006      	beq.n	8001eba <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001eac:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	4923      	ldr	r1, [pc, #140]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]
 8001eb8:	e006      	b.n	8001ec8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eba:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	491f      	ldr	r1, [pc, #124]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d006      	beq.n	8001ee2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4919      	ldr	r1, [pc, #100]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	600b      	str	r3, [r1, #0]
 8001ee0:	e006      	b.n	8001ef0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	4915      	ldr	r1, [pc, #84]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	fa22 f303 	lsr.w	r3, r2, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f47f aeaf 	bne.w	8001c64 <HAL_GPIO_Init+0x14>
  }
}
 8001f06:	bf00      	nop
 8001f08:	bf00      	nop
 8001f0a:	372c      	adds	r7, #44	; 0x2c
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	10320000 	.word	0x10320000
 8001f18:	10310000 	.word	0x10310000
 8001f1c:	10220000 	.word	0x10220000
 8001f20:	10210000 	.word	0x10210000
 8001f24:	10120000 	.word	0x10120000
 8001f28:	10110000 	.word	0x10110000
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40010000 	.word	0x40010000
 8001f34:	40010800 	.word	0x40010800
 8001f38:	40010c00 	.word	0x40010c00
 8001f3c:	40011000 	.word	0x40011000
 8001f40:	40010400 	.word	0x40010400

08001f44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	887b      	ldrh	r3, [r7, #2]
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
 8001f60:	e001      	b.n	8001f66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f62:	2300      	movs	r3, #0
 8001f64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	807b      	strh	r3, [r7, #2]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f82:	787b      	ldrb	r3, [r7, #1]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f88:	887a      	ldrh	r2, [r7, #2]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f8e:	e003      	b.n	8001f98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f90:	887b      	ldrh	r3, [r7, #2]
 8001f92:	041a      	lsls	r2, r3, #16
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	611a      	str	r2, [r3, #16]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b085      	sub	sp, #20
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	460b      	mov	r3, r1
 8001fac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fb4:	887a      	ldrh	r2, [r7, #2]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	041a      	lsls	r2, r3, #16
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	43d9      	mvns	r1, r3
 8001fc0:	887b      	ldrh	r3, [r7, #2]
 8001fc2:	400b      	ands	r3, r1
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	611a      	str	r2, [r3, #16]
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e26c      	b.n	80024c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 8087 	beq.w	8002102 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ff4:	4b92      	ldr	r3, [pc, #584]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d00c      	beq.n	800201a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002000:	4b8f      	ldr	r3, [pc, #572]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 030c 	and.w	r3, r3, #12
 8002008:	2b08      	cmp	r3, #8
 800200a:	d112      	bne.n	8002032 <HAL_RCC_OscConfig+0x5e>
 800200c:	4b8c      	ldr	r3, [pc, #560]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002018:	d10b      	bne.n	8002032 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201a:	4b89      	ldr	r3, [pc, #548]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d06c      	beq.n	8002100 <HAL_RCC_OscConfig+0x12c>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d168      	bne.n	8002100 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e246      	b.n	80024c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800203a:	d106      	bne.n	800204a <HAL_RCC_OscConfig+0x76>
 800203c:	4b80      	ldr	r3, [pc, #512]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a7f      	ldr	r2, [pc, #508]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	e02e      	b.n	80020a8 <HAL_RCC_OscConfig+0xd4>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10c      	bne.n	800206c <HAL_RCC_OscConfig+0x98>
 8002052:	4b7b      	ldr	r3, [pc, #492]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a7a      	ldr	r2, [pc, #488]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4b78      	ldr	r3, [pc, #480]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a77      	ldr	r2, [pc, #476]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002064:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e01d      	b.n	80020a8 <HAL_RCC_OscConfig+0xd4>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0xbc>
 8002076:	4b72      	ldr	r3, [pc, #456]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a71      	ldr	r2, [pc, #452]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800207c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b6f      	ldr	r3, [pc, #444]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a6e      	ldr	r2, [pc, #440]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0xd4>
 8002090:	4b6b      	ldr	r3, [pc, #428]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a6a      	ldr	r2, [pc, #424]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b68      	ldr	r3, [pc, #416]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a67      	ldr	r2, [pc, #412]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 80020a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d013      	beq.n	80020d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7ff fcb6 	bl	8001a20 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7ff fcb2 	bl	8001a20 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	; 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e1fa      	b.n	80024c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	4b5d      	ldr	r3, [pc, #372]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0xe4>
 80020d6:	e014      	b.n	8002102 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7ff fca2 	bl	8001a20 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e0:	f7ff fc9e 	bl	8001a20 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	; 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e1e6      	b.n	80024c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f2:	4b53      	ldr	r3, [pc, #332]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x10c>
 80020fe:	e000      	b.n	8002102 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d063      	beq.n	80021d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800210e:	4b4c      	ldr	r3, [pc, #304]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00b      	beq.n	8002132 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800211a:	4b49      	ldr	r3, [pc, #292]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b08      	cmp	r3, #8
 8002124:	d11c      	bne.n	8002160 <HAL_RCC_OscConfig+0x18c>
 8002126:	4b46      	ldr	r3, [pc, #280]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d116      	bne.n	8002160 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002132:	4b43      	ldr	r3, [pc, #268]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d005      	beq.n	800214a <HAL_RCC_OscConfig+0x176>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d001      	beq.n	800214a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e1ba      	b.n	80024c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214a:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4939      	ldr	r1, [pc, #228]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215e:	e03a      	b.n	80021d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d020      	beq.n	80021aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002168:	4b36      	ldr	r3, [pc, #216]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 800216a:	2201      	movs	r2, #1
 800216c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216e:	f7ff fc57 	bl	8001a20 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002176:	f7ff fc53 	bl	8001a20 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e19b      	b.n	80024c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002188:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f0      	beq.n	8002176 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002194:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	4927      	ldr	r1, [pc, #156]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	600b      	str	r3, [r1, #0]
 80021a8:	e015      	b.n	80021d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021aa:	4b26      	ldr	r3, [pc, #152]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7ff fc36 	bl	8001a20 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b8:	f7ff fc32 	bl	8001a20 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e17a      	b.n	80024c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ca:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d03a      	beq.n	8002258 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d019      	beq.n	800221e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ea:	4b17      	ldr	r3, [pc, #92]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f0:	f7ff fc16 	bl	8001a20 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f8:	f7ff fc12 	bl	8001a20 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e15a      	b.n	80024c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002216:	2001      	movs	r0, #1
 8002218:	f000 fa9a 	bl	8002750 <RCC_Delay>
 800221c:	e01c      	b.n	8002258 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800221e:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002224:	f7ff fbfc 	bl	8001a20 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222a:	e00f      	b.n	800224c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222c:	f7ff fbf8 	bl	8001a20 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d908      	bls.n	800224c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e140      	b.n	80024c0 <HAL_RCC_OscConfig+0x4ec>
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	42420000 	.word	0x42420000
 8002248:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224c:	4b9e      	ldr	r3, [pc, #632]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1e9      	bne.n	800222c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80a6 	beq.w	80023b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002266:	2300      	movs	r3, #0
 8002268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226a:	4b97      	ldr	r3, [pc, #604]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10d      	bne.n	8002292 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	4b94      	ldr	r3, [pc, #592]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	4a93      	ldr	r2, [pc, #588]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 800227c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002280:	61d3      	str	r3, [r2, #28]
 8002282:	4b91      	ldr	r3, [pc, #580]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228e:	2301      	movs	r3, #1
 8002290:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002292:	4b8e      	ldr	r3, [pc, #568]	; (80024cc <HAL_RCC_OscConfig+0x4f8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d118      	bne.n	80022d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800229e:	4b8b      	ldr	r3, [pc, #556]	; (80024cc <HAL_RCC_OscConfig+0x4f8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a8a      	ldr	r2, [pc, #552]	; (80024cc <HAL_RCC_OscConfig+0x4f8>)
 80022a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022aa:	f7ff fbb9 	bl	8001a20 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b2:	f7ff fbb5 	bl	8001a20 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b64      	cmp	r3, #100	; 0x64
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e0fd      	b.n	80024c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c4:	4b81      	ldr	r3, [pc, #516]	; (80024cc <HAL_RCC_OscConfig+0x4f8>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x312>
 80022d8:	4b7b      	ldr	r3, [pc, #492]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4a7a      	ldr	r2, [pc, #488]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6213      	str	r3, [r2, #32]
 80022e4:	e02d      	b.n	8002342 <HAL_RCC_OscConfig+0x36e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0x334>
 80022ee:	4b76      	ldr	r3, [pc, #472]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	4a75      	ldr	r2, [pc, #468]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	6213      	str	r3, [r2, #32]
 80022fa:	4b73      	ldr	r3, [pc, #460]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	4a72      	ldr	r2, [pc, #456]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 8002300:	f023 0304 	bic.w	r3, r3, #4
 8002304:	6213      	str	r3, [r2, #32]
 8002306:	e01c      	b.n	8002342 <HAL_RCC_OscConfig+0x36e>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b05      	cmp	r3, #5
 800230e:	d10c      	bne.n	800232a <HAL_RCC_OscConfig+0x356>
 8002310:	4b6d      	ldr	r3, [pc, #436]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4a6c      	ldr	r2, [pc, #432]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 8002316:	f043 0304 	orr.w	r3, r3, #4
 800231a:	6213      	str	r3, [r2, #32]
 800231c:	4b6a      	ldr	r3, [pc, #424]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4a69      	ldr	r2, [pc, #420]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6213      	str	r3, [r2, #32]
 8002328:	e00b      	b.n	8002342 <HAL_RCC_OscConfig+0x36e>
 800232a:	4b67      	ldr	r3, [pc, #412]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4a66      	ldr	r2, [pc, #408]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 8002330:	f023 0301 	bic.w	r3, r3, #1
 8002334:	6213      	str	r3, [r2, #32]
 8002336:	4b64      	ldr	r3, [pc, #400]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	4a63      	ldr	r2, [pc, #396]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 800233c:	f023 0304 	bic.w	r3, r3, #4
 8002340:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d015      	beq.n	8002376 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234a:	f7ff fb69 	bl	8001a20 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002350:	e00a      	b.n	8002368 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002352:	f7ff fb65 	bl	8001a20 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002360:	4293      	cmp	r3, r2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e0ab      	b.n	80024c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002368:	4b57      	ldr	r3, [pc, #348]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0ee      	beq.n	8002352 <HAL_RCC_OscConfig+0x37e>
 8002374:	e014      	b.n	80023a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002376:	f7ff fb53 	bl	8001a20 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800237c:	e00a      	b.n	8002394 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237e:	f7ff fb4f 	bl	8001a20 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	f241 3288 	movw	r2, #5000	; 0x1388
 800238c:	4293      	cmp	r3, r2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e095      	b.n	80024c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002394:	4b4c      	ldr	r3, [pc, #304]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1ee      	bne.n	800237e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023a0:	7dfb      	ldrb	r3, [r7, #23]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d105      	bne.n	80023b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a6:	4b48      	ldr	r3, [pc, #288]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	4a47      	ldr	r2, [pc, #284]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 80023ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 8081 	beq.w	80024be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023bc:	4b42      	ldr	r3, [pc, #264]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 030c 	and.w	r3, r3, #12
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d061      	beq.n	800248c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d146      	bne.n	800245e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d0:	4b3f      	ldr	r3, [pc, #252]	; (80024d0 <HAL_RCC_OscConfig+0x4fc>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d6:	f7ff fb23 	bl	8001a20 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023de:	f7ff fb1f 	bl	8001a20 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e067      	b.n	80024c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f0:	4b35      	ldr	r3, [pc, #212]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f0      	bne.n	80023de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002404:	d108      	bne.n	8002418 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002406:	4b30      	ldr	r3, [pc, #192]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	492d      	ldr	r1, [pc, #180]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 8002414:	4313      	orrs	r3, r2
 8002416:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002418:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a19      	ldr	r1, [r3, #32]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	430b      	orrs	r3, r1
 800242a:	4927      	ldr	r1, [pc, #156]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002430:	4b27      	ldr	r3, [pc, #156]	; (80024d0 <HAL_RCC_OscConfig+0x4fc>)
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002436:	f7ff faf3 	bl	8001a20 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243e:	f7ff faef 	bl	8001a20 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e037      	b.n	80024c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002450:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x46a>
 800245c:	e02f      	b.n	80024be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245e:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <HAL_RCC_OscConfig+0x4fc>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7ff fadc 	bl	8001a20 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246c:	f7ff fad8 	bl	8001a20 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e020      	b.n	80024c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800247e:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x498>
 800248a:	e018      	b.n	80024be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e013      	b.n	80024c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_RCC_OscConfig+0x4f4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d106      	bne.n	80024ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d001      	beq.n	80024be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40007000 	.word	0x40007000
 80024d0:	42420060 	.word	0x42420060

080024d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0d0      	b.n	800268a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e8:	4b6a      	ldr	r3, [pc, #424]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d910      	bls.n	8002518 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f6:	4b67      	ldr	r3, [pc, #412]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 0207 	bic.w	r2, r3, #7
 80024fe:	4965      	ldr	r1, [pc, #404]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002506:	4b63      	ldr	r3, [pc, #396]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0b8      	b.n	800268a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d020      	beq.n	8002566 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002530:	4b59      	ldr	r3, [pc, #356]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4a58      	ldr	r2, [pc, #352]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 8002536:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800253a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002548:	4b53      	ldr	r3, [pc, #332]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	4a52      	ldr	r2, [pc, #328]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002552:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002554:	4b50      	ldr	r3, [pc, #320]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	494d      	ldr	r1, [pc, #308]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	4313      	orrs	r3, r2
 8002564:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d040      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d107      	bne.n	800258a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	4b47      	ldr	r3, [pc, #284]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d115      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e07f      	b.n	800268a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d107      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002592:	4b41      	ldr	r3, [pc, #260]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d109      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e073      	b.n	800268a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a2:	4b3d      	ldr	r3, [pc, #244]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e06b      	b.n	800268a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025b2:	4b39      	ldr	r3, [pc, #228]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f023 0203 	bic.w	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	4936      	ldr	r1, [pc, #216]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025c4:	f7ff fa2c 	bl	8001a20 <HAL_GetTick>
 80025c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ca:	e00a      	b.n	80025e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025cc:	f7ff fa28 	bl	8001a20 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025da:	4293      	cmp	r3, r2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e053      	b.n	800268a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e2:	4b2d      	ldr	r3, [pc, #180]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 020c 	and.w	r2, r3, #12
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d1eb      	bne.n	80025cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025f4:	4b27      	ldr	r3, [pc, #156]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d210      	bcs.n	8002624 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002602:	4b24      	ldr	r3, [pc, #144]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 0207 	bic.w	r2, r3, #7
 800260a:	4922      	ldr	r1, [pc, #136]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002612:	4b20      	ldr	r3, [pc, #128]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e032      	b.n	800268a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	4916      	ldr	r1, [pc, #88]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	4313      	orrs	r3, r2
 8002640:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d009      	beq.n	8002662 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800264e:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	490e      	ldr	r1, [pc, #56]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	4313      	orrs	r3, r2
 8002660:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002662:	f000 f821 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 8002666:	4602      	mov	r2, r0
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	490a      	ldr	r1, [pc, #40]	; (800269c <HAL_RCC_ClockConfig+0x1c8>)
 8002674:	5ccb      	ldrb	r3, [r1, r3]
 8002676:	fa22 f303 	lsr.w	r3, r2, r3
 800267a:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <HAL_RCC_ClockConfig+0x1cc>)
 800267c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff f98a 	bl	800199c <HAL_InitTick>

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40022000 	.word	0x40022000
 8002698:	40021000 	.word	0x40021000
 800269c:	08002fb4 	.word	0x08002fb4
 80026a0:	20000024 	.word	0x20000024
 80026a4:	20000028 	.word	0x20000028

080026a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	2300      	movs	r3, #0
 80026bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026c2:	4b1e      	ldr	r3, [pc, #120]	; (800273c <HAL_RCC_GetSysClockFreq+0x94>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d002      	beq.n	80026d8 <HAL_RCC_GetSysClockFreq+0x30>
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d003      	beq.n	80026de <HAL_RCC_GetSysClockFreq+0x36>
 80026d6:	e027      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026d8:	4b19      	ldr	r3, [pc, #100]	; (8002740 <HAL_RCC_GetSysClockFreq+0x98>)
 80026da:	613b      	str	r3, [r7, #16]
      break;
 80026dc:	e027      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	0c9b      	lsrs	r3, r3, #18
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	4a17      	ldr	r2, [pc, #92]	; (8002744 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026e8:	5cd3      	ldrb	r3, [r2, r3]
 80026ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d010      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026f6:	4b11      	ldr	r3, [pc, #68]	; (800273c <HAL_RCC_GetSysClockFreq+0x94>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	0c5b      	lsrs	r3, r3, #17
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	4a11      	ldr	r2, [pc, #68]	; (8002748 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002702:	5cd3      	ldrb	r3, [r2, r3]
 8002704:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a0d      	ldr	r2, [pc, #52]	; (8002740 <HAL_RCC_GetSysClockFreq+0x98>)
 800270a:	fb02 f203 	mul.w	r2, r2, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	fbb2 f3f3 	udiv	r3, r2, r3
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	e004      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a0c      	ldr	r2, [pc, #48]	; (800274c <HAL_RCC_GetSysClockFreq+0xa4>)
 800271c:	fb02 f303 	mul.w	r3, r2, r3
 8002720:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	613b      	str	r3, [r7, #16]
      break;
 8002726:	e002      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_RCC_GetSysClockFreq+0x98>)
 800272a:	613b      	str	r3, [r7, #16]
      break;
 800272c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800272e:	693b      	ldr	r3, [r7, #16]
}
 8002730:	4618      	mov	r0, r3
 8002732:	371c      	adds	r7, #28
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
 8002740:	007a1200 	.word	0x007a1200
 8002744:	08002fc4 	.word	0x08002fc4
 8002748:	08002fd4 	.word	0x08002fd4
 800274c:	003d0900 	.word	0x003d0900

08002750 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002758:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <RCC_Delay+0x34>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <RCC_Delay+0x38>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	0a5b      	lsrs	r3, r3, #9
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	fb02 f303 	mul.w	r3, r2, r3
 800276a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800276c:	bf00      	nop
  }
  while (Delay --);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1e5a      	subs	r2, r3, #1
 8002772:	60fa      	str	r2, [r7, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f9      	bne.n	800276c <RCC_Delay+0x1c>
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr
 8002784:	20000024 	.word	0x20000024
 8002788:	10624dd3 	.word	0x10624dd3

0800278c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e041      	b.n	8002822 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7fe ff7c 	bl	80016b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3304      	adds	r3, #4
 80027c8:	4619      	mov	r1, r3
 80027ca:	4610      	mov	r0, r2
 80027cc:	f000 fa56 	bl	8002c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b01      	cmp	r3, #1
 800283e:	d001      	beq.n	8002844 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e035      	b.n	80028b0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a16      	ldr	r2, [pc, #88]	; (80028bc <HAL_TIM_Base_Start_IT+0x90>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d009      	beq.n	800287a <HAL_TIM_Base_Start_IT+0x4e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800286e:	d004      	beq.n	800287a <HAL_TIM_Base_Start_IT+0x4e>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <HAL_TIM_Base_Start_IT+0x94>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d111      	bne.n	800289e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2b06      	cmp	r3, #6
 800288a:	d010      	beq.n	80028ae <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289c:	e007      	b.n	80028ae <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40012c00 	.word	0x40012c00
 80028c0:	40000400 	.word	0x40000400

080028c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d020      	beq.n	8002928 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01b      	beq.n	8002928 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f06f 0202 	mvn.w	r2, #2
 80028f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f998 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 8002914:	e005      	b.n	8002922 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f98b 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f99a 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	2b00      	cmp	r3, #0
 8002930:	d020      	beq.n	8002974 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01b      	beq.n	8002974 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0204 	mvn.w	r2, #4
 8002944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2202      	movs	r2, #2
 800294a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f972 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 8002960:	e005      	b.n	800296e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f965 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f974 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d020      	beq.n	80029c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d01b      	beq.n	80029c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0208 	mvn.w	r2, #8
 8002990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2204      	movs	r2, #4
 8002996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f94c 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 80029ac:	e005      	b.n	80029ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f93f 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f94e 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d020      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01b      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0210 	mvn.w	r2, #16
 80029dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2208      	movs	r2, #8
 80029e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f926 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 80029f8:	e005      	b.n	8002a06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f919 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f928 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00c      	beq.n	8002a30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d007      	beq.n	8002a30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0201 	mvn.w	r2, #1
 8002a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fe fdb2 	bl	8001594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d007      	beq.n	8002a54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fa6f 	bl	8002f32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00c      	beq.n	8002a78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f8f8 	bl	8002c68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f003 0320 	and.w	r3, r3, #32
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00c      	beq.n	8002a9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d007      	beq.n	8002a9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f06f 0220 	mvn.w	r2, #32
 8002a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 fa42 	bl	8002f20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a9c:	bf00      	nop
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_TIM_ConfigClockSource+0x1c>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e0b4      	b.n	8002c2a <HAL_TIM_ConfigClockSource+0x186>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ae6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af8:	d03e      	beq.n	8002b78 <HAL_TIM_ConfigClockSource+0xd4>
 8002afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002afe:	f200 8087 	bhi.w	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b06:	f000 8086 	beq.w	8002c16 <HAL_TIM_ConfigClockSource+0x172>
 8002b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0e:	d87f      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b10:	2b70      	cmp	r3, #112	; 0x70
 8002b12:	d01a      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0xa6>
 8002b14:	2b70      	cmp	r3, #112	; 0x70
 8002b16:	d87b      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b18:	2b60      	cmp	r3, #96	; 0x60
 8002b1a:	d050      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0x11a>
 8002b1c:	2b60      	cmp	r3, #96	; 0x60
 8002b1e:	d877      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b20:	2b50      	cmp	r3, #80	; 0x50
 8002b22:	d03c      	beq.n	8002b9e <HAL_TIM_ConfigClockSource+0xfa>
 8002b24:	2b50      	cmp	r3, #80	; 0x50
 8002b26:	d873      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b28:	2b40      	cmp	r3, #64	; 0x40
 8002b2a:	d058      	beq.n	8002bde <HAL_TIM_ConfigClockSource+0x13a>
 8002b2c:	2b40      	cmp	r3, #64	; 0x40
 8002b2e:	d86f      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b30:	2b30      	cmp	r3, #48	; 0x30
 8002b32:	d064      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x15a>
 8002b34:	2b30      	cmp	r3, #48	; 0x30
 8002b36:	d86b      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d060      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x15a>
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d867      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d05c      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x15a>
 8002b44:	2b10      	cmp	r3, #16
 8002b46:	d05a      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x15a>
 8002b48:	e062      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6899      	ldr	r1, [r3, #8]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f000 f96a 	bl	8002e32 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	609a      	str	r2, [r3, #8]
      break;
 8002b76:	e04f      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	6899      	ldr	r1, [r3, #8]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f000 f953 	bl	8002e32 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b9a:	609a      	str	r2, [r3, #8]
      break;
 8002b9c:	e03c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6859      	ldr	r1, [r3, #4]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	461a      	mov	r2, r3
 8002bac:	f000 f8ca 	bl	8002d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2150      	movs	r1, #80	; 0x50
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 f921 	bl	8002dfe <TIM_ITRx_SetConfig>
      break;
 8002bbc:	e02c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	6859      	ldr	r1, [r3, #4]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f000 f8e8 	bl	8002da0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2160      	movs	r1, #96	; 0x60
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 f911 	bl	8002dfe <TIM_ITRx_SetConfig>
      break;
 8002bdc:	e01c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	6859      	ldr	r1, [r3, #4]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	461a      	mov	r2, r3
 8002bec:	f000 f8aa 	bl	8002d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2140      	movs	r1, #64	; 0x40
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 f901 	bl	8002dfe <TIM_ITRx_SetConfig>
      break;
 8002bfc:	e00c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4619      	mov	r1, r3
 8002c08:	4610      	mov	r0, r2
 8002c0a:	f000 f8f8 	bl	8002dfe <TIM_ITRx_SetConfig>
      break;
 8002c0e:	e003      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
      break;
 8002c14:	e000      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr

08002c56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
	...

08002c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a2b      	ldr	r2, [pc, #172]	; (8002d3c <TIM_Base_SetConfig+0xc0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d007      	beq.n	8002ca4 <TIM_Base_SetConfig+0x28>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9a:	d003      	beq.n	8002ca4 <TIM_Base_SetConfig+0x28>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a28      	ldr	r2, [pc, #160]	; (8002d40 <TIM_Base_SetConfig+0xc4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d108      	bne.n	8002cb6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a20      	ldr	r2, [pc, #128]	; (8002d3c <TIM_Base_SetConfig+0xc0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d007      	beq.n	8002cce <TIM_Base_SetConfig+0x52>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc4:	d003      	beq.n	8002cce <TIM_Base_SetConfig+0x52>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a1d      	ldr	r2, [pc, #116]	; (8002d40 <TIM_Base_SetConfig+0xc4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d108      	bne.n	8002ce0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a0d      	ldr	r2, [pc, #52]	; (8002d3c <TIM_Base_SetConfig+0xc0>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d103      	bne.n	8002d14 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f023 0201 	bic.w	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	611a      	str	r2, [r3, #16]
  }
}
 8002d32:	bf00      	nop
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	40012c00 	.word	0x40012c00
 8002d40:	40000400 	.word	0x40000400

08002d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	f023 0201 	bic.w	r2, r3, #1
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f023 030a 	bic.w	r3, r3, #10
 8002d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	621a      	str	r2, [r3, #32]
}
 8002d96:	bf00      	nop
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	f023 0210 	bic.w	r2, r3, #16
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	031b      	lsls	r3, r3, #12
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	621a      	str	r2, [r3, #32]
}
 8002df4:	bf00      	nop
 8002df6:	371c      	adds	r7, #28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b085      	sub	sp, #20
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f043 0307 	orr.w	r3, r3, #7
 8002e20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	609a      	str	r2, [r3, #8]
}
 8002e28:	bf00      	nop
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b087      	sub	sp, #28
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	021a      	lsls	r2, r3, #8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	431a      	orrs	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	609a      	str	r2, [r3, #8]
}
 8002e66:	bf00      	nop
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e041      	b.n	8002f0c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a14      	ldr	r2, [pc, #80]	; (8002f18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d009      	beq.n	8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed4:	d004      	beq.n	8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a10      	ldr	r2, [pc, #64]	; (8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d10c      	bne.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ee6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40012c00 	.word	0x40012c00
 8002f1c:	40000400 	.word	0x40000400

08002f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr

08002f32 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr

08002f44 <__libc_init_array>:
 8002f44:	b570      	push	{r4, r5, r6, lr}
 8002f46:	2600      	movs	r6, #0
 8002f48:	4d0c      	ldr	r5, [pc, #48]	; (8002f7c <__libc_init_array+0x38>)
 8002f4a:	4c0d      	ldr	r4, [pc, #52]	; (8002f80 <__libc_init_array+0x3c>)
 8002f4c:	1b64      	subs	r4, r4, r5
 8002f4e:	10a4      	asrs	r4, r4, #2
 8002f50:	42a6      	cmp	r6, r4
 8002f52:	d109      	bne.n	8002f68 <__libc_init_array+0x24>
 8002f54:	f000 f822 	bl	8002f9c <_init>
 8002f58:	2600      	movs	r6, #0
 8002f5a:	4d0a      	ldr	r5, [pc, #40]	; (8002f84 <__libc_init_array+0x40>)
 8002f5c:	4c0a      	ldr	r4, [pc, #40]	; (8002f88 <__libc_init_array+0x44>)
 8002f5e:	1b64      	subs	r4, r4, r5
 8002f60:	10a4      	asrs	r4, r4, #2
 8002f62:	42a6      	cmp	r6, r4
 8002f64:	d105      	bne.n	8002f72 <__libc_init_array+0x2e>
 8002f66:	bd70      	pop	{r4, r5, r6, pc}
 8002f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f6c:	4798      	blx	r3
 8002f6e:	3601      	adds	r6, #1
 8002f70:	e7ee      	b.n	8002f50 <__libc_init_array+0xc>
 8002f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f76:	4798      	blx	r3
 8002f78:	3601      	adds	r6, #1
 8002f7a:	e7f2      	b.n	8002f62 <__libc_init_array+0x1e>
 8002f7c:	08002fd8 	.word	0x08002fd8
 8002f80:	08002fd8 	.word	0x08002fd8
 8002f84:	08002fd8 	.word	0x08002fd8
 8002f88:	08002fdc 	.word	0x08002fdc

08002f8c <memset>:
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	4402      	add	r2, r0
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d100      	bne.n	8002f96 <memset+0xa>
 8002f94:	4770      	bx	lr
 8002f96:	f803 1b01 	strb.w	r1, [r3], #1
 8002f9a:	e7f9      	b.n	8002f90 <memset+0x4>

08002f9c <_init>:
 8002f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9e:	bf00      	nop
 8002fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fa2:	bc08      	pop	{r3}
 8002fa4:	469e      	mov	lr, r3
 8002fa6:	4770      	bx	lr

08002fa8 <_fini>:
 8002fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002faa:	bf00      	nop
 8002fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fae:	bc08      	pop	{r3}
 8002fb0:	469e      	mov	lr, r3
 8002fb2:	4770      	bx	lr
