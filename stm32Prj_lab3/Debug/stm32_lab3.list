
stm32_lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080031fc  080031fc  000131fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003220  08003220  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08003220  08003220  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003220  08003220  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003220  08003220  00013220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003224  08003224  00013224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08003228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000030  08003258  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08003258  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009dc2  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dac  00000000  00000000  00029e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002bbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002c670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001740e  00000000  00000000  0002cfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d36a  00000000  00000000  000443f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008255a  00000000  00000000  00051760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3cba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f4  00000000  00000000  000d3d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	080031e4 	.word	0x080031e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	080031e4 	.word	0x080031e4

0800014c <getKeyInput>:
void getKeyInput1();
void getKeyInput2();
void getKeyInput3();


void getKeyInput(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int i=0; i<3; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e011      	b.n	800017c <getKeyInput+0x30>
		if(i == 0){
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	2b00      	cmp	r3, #0
 800015c:	d101      	bne.n	8000162 <getKeyInput+0x16>
			getKeyInput1();
 800015e:	f000 f815 	bl	800018c <getKeyInput1>
		}
		if(i == 1){
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2b01      	cmp	r3, #1
 8000166:	d101      	bne.n	800016c <getKeyInput+0x20>
			getKeyInput2();
 8000168:	f000 f880 	bl	800026c <getKeyInput2>
		}
		if(i == 2){
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2b02      	cmp	r3, #2
 8000170:	d101      	bne.n	8000176 <getKeyInput+0x2a>
			getKeyInput3();
 8000172:	f000 f8eb 	bl	800034c <getKeyInput3>
	for(int i=0; i<3; i++){
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	3301      	adds	r3, #1
 800017a:	607b      	str	r3, [r7, #4]
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b02      	cmp	r3, #2
 8000180:	ddea      	ble.n	8000158 <getKeyInput+0xc>
		}
	}
}
 8000182:	bf00      	nop
 8000184:	bf00      	nop
 8000186:	3708      	adds	r7, #8
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}

0800018c <getKeyInput1>:


void getKeyInput1() {
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
    // BUTTON 1
    switch(pressType[0]) {
 8000190:	4b32      	ldr	r3, [pc, #200]	; (800025c <getKeyInput1+0xd0>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	2b04      	cmp	r3, #4
 8000196:	d85a      	bhi.n	800024e <getKeyInput1+0xc2>
 8000198:	a201      	add	r2, pc, #4	; (adr r2, 80001a0 <getKeyInput1+0x14>)
 800019a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800019e:	bf00      	nop
 80001a0:	080001b5 	.word	0x080001b5
 80001a4:	080001cd 	.word	0x080001cd
 80001a8:	080001ed 	.word	0x080001ed
 80001ac:	0800024f 	.word	0x0800024f
 80001b0:	08000219 	.word	0x08000219
    case ZERO:
        if (HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin) == NORMAL_STATE) {
 80001b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001b8:	4829      	ldr	r0, [pc, #164]	; (8000260 <getKeyInput1+0xd4>)
 80001ba:	f001 ffe7 	bl	800218c <HAL_GPIO_ReadPin>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d046      	beq.n	8000252 <getKeyInput1+0xc6>
            return;
        }
        pressType[0] = PRESS_RELEASE_1;
 80001c4:	4b25      	ldr	r3, [pc, #148]	; (800025c <getKeyInput1+0xd0>)
 80001c6:	2201      	movs	r2, #1
 80001c8:	601a      	str	r2, [r3, #0]
        break;
 80001ca:	e045      	b.n	8000258 <getKeyInput1+0xcc>
    case PRESS_RELEASE_1:
        if (HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin) == NORMAL_STATE) {
 80001cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d0:	4823      	ldr	r0, [pc, #140]	; (8000260 <getKeyInput1+0xd4>)
 80001d2:	f001 ffdb 	bl	800218c <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b01      	cmp	r3, #1
 80001da:	d103      	bne.n	80001e4 <getKeyInput1+0x58>
            pressType[0] = ZERO;
 80001dc:	4b1f      	ldr	r3, [pc, #124]	; (800025c <getKeyInput1+0xd0>)
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
            return;
 80001e2:	e039      	b.n	8000258 <getKeyInput1+0xcc>
        }
        pressType[0] = PRESS_RELEASE_2;
 80001e4:	4b1d      	ldr	r3, [pc, #116]	; (800025c <getKeyInput1+0xd0>)
 80001e6:	2202      	movs	r2, #2
 80001e8:	601a      	str	r2, [r3, #0]
        break;
 80001ea:	e035      	b.n	8000258 <getKeyInput1+0xcc>
    case PRESS_RELEASE_2:
        if (HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin) == NORMAL_STATE) {
 80001ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f0:	481b      	ldr	r0, [pc, #108]	; (8000260 <getKeyInput1+0xd4>)
 80001f2:	f001 ffcb 	bl	800218c <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d103      	bne.n	8000204 <getKeyInput1+0x78>
            pressType[0] = ZERO;
 80001fc:	4b17      	ldr	r3, [pc, #92]	; (800025c <getKeyInput1+0xd0>)
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
            return;
 8000202:	e029      	b.n	8000258 <getKeyInput1+0xcc>
        }
        button_flag[0] = 1;
 8000204:	4b17      	ldr	r3, [pc, #92]	; (8000264 <getKeyInput1+0xd8>)
 8000206:	2201      	movs	r2, #1
 8000208:	601a      	str	r2, [r3, #0]
        pressType[0] = PRESS_OVER;
 800020a:	4b14      	ldr	r3, [pc, #80]	; (800025c <getKeyInput1+0xd0>)
 800020c:	2204      	movs	r2, #4
 800020e:	601a      	str	r2, [r3, #0]
        TimeOutForKeyPress[0] = 200;
 8000210:	4b15      	ldr	r3, [pc, #84]	; (8000268 <getKeyInput1+0xdc>)
 8000212:	22c8      	movs	r2, #200	; 0xc8
 8000214:	601a      	str	r2, [r3, #0]
        break;
 8000216:	e01f      	b.n	8000258 <getKeyInput1+0xcc>
    case PRESS_OVER:
        --TimeOutForKeyPress[0];
 8000218:	4b13      	ldr	r3, [pc, #76]	; (8000268 <getKeyInput1+0xdc>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	3b01      	subs	r3, #1
 800021e:	4a12      	ldr	r2, [pc, #72]	; (8000268 <getKeyInput1+0xdc>)
 8000220:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress[0] == 0) {
 8000222:	4b11      	ldr	r3, [pc, #68]	; (8000268 <getKeyInput1+0xdc>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d105      	bne.n	8000236 <getKeyInput1+0xaa>
            TimeOutForKeyPress[0] = 200;
 800022a:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <getKeyInput1+0xdc>)
 800022c:	22c8      	movs	r2, #200	; 0xc8
 800022e:	601a      	str	r2, [r3, #0]
            button_flag[0] = 1;
 8000230:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <getKeyInput1+0xd8>)
 8000232:	2201      	movs	r2, #1
 8000234:	601a      	str	r2, [r3, #0]
        }
        if (HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin) == NORMAL_STATE) {
 8000236:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800023a:	4809      	ldr	r0, [pc, #36]	; (8000260 <getKeyInput1+0xd4>)
 800023c:	f001 ffa6 	bl	800218c <HAL_GPIO_ReadPin>
 8000240:	4603      	mov	r3, r0
 8000242:	2b01      	cmp	r3, #1
 8000244:	d107      	bne.n	8000256 <getKeyInput1+0xca>
            pressType[0] = ZERO;
 8000246:	4b05      	ldr	r3, [pc, #20]	; (800025c <getKeyInput1+0xd0>)
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
        }
        break;
 800024c:	e003      	b.n	8000256 <getKeyInput1+0xca>
    default:
        break;
 800024e:	bf00      	nop
 8000250:	e002      	b.n	8000258 <getKeyInput1+0xcc>
            return;
 8000252:	bf00      	nop
 8000254:	e000      	b.n	8000258 <getKeyInput1+0xcc>
        break;
 8000256:	bf00      	nop
    }
}
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000058 	.word	0x20000058
 8000260:	40011000 	.word	0x40011000
 8000264:	2000004c 	.word	0x2000004c
 8000268:	20000000 	.word	0x20000000

0800026c <getKeyInput2>:

void getKeyInput2(){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
    // BUTTON 2
    switch(pressType[1]) {
 8000270:	4b32      	ldr	r3, [pc, #200]	; (800033c <getKeyInput2+0xd0>)
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	2b04      	cmp	r3, #4
 8000276:	d85a      	bhi.n	800032e <getKeyInput2+0xc2>
 8000278:	a201      	add	r2, pc, #4	; (adr r2, 8000280 <getKeyInput2+0x14>)
 800027a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800027e:	bf00      	nop
 8000280:	08000295 	.word	0x08000295
 8000284:	080002ad 	.word	0x080002ad
 8000288:	080002cd 	.word	0x080002cd
 800028c:	0800032f 	.word	0x0800032f
 8000290:	080002f9 	.word	0x080002f9
    case ZERO:
        if (HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin) == NORMAL_STATE) {
 8000294:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000298:	4829      	ldr	r0, [pc, #164]	; (8000340 <getKeyInput2+0xd4>)
 800029a:	f001 ff77 	bl	800218c <HAL_GPIO_ReadPin>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d046      	beq.n	8000332 <getKeyInput2+0xc6>
            return;
        }
        pressType[1] = PRESS_RELEASE_1;
 80002a4:	4b25      	ldr	r3, [pc, #148]	; (800033c <getKeyInput2+0xd0>)
 80002a6:	2201      	movs	r2, #1
 80002a8:	605a      	str	r2, [r3, #4]
        break;
 80002aa:	e045      	b.n	8000338 <getKeyInput2+0xcc>
    case PRESS_RELEASE_1:
        if (HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin) == NORMAL_STATE) {
 80002ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002b0:	4823      	ldr	r0, [pc, #140]	; (8000340 <getKeyInput2+0xd4>)
 80002b2:	f001 ff6b 	bl	800218c <HAL_GPIO_ReadPin>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d103      	bne.n	80002c4 <getKeyInput2+0x58>
            pressType[1] = ZERO;
 80002bc:	4b1f      	ldr	r3, [pc, #124]	; (800033c <getKeyInput2+0xd0>)
 80002be:	2200      	movs	r2, #0
 80002c0:	605a      	str	r2, [r3, #4]
            return;
 80002c2:	e039      	b.n	8000338 <getKeyInput2+0xcc>
        }
        pressType[1] = PRESS_RELEASE_2;
 80002c4:	4b1d      	ldr	r3, [pc, #116]	; (800033c <getKeyInput2+0xd0>)
 80002c6:	2202      	movs	r2, #2
 80002c8:	605a      	str	r2, [r3, #4]
        break;
 80002ca:	e035      	b.n	8000338 <getKeyInput2+0xcc>
    case PRESS_RELEASE_2:
        if (HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin) == NORMAL_STATE) {
 80002cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002d0:	481b      	ldr	r0, [pc, #108]	; (8000340 <getKeyInput2+0xd4>)
 80002d2:	f001 ff5b 	bl	800218c <HAL_GPIO_ReadPin>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d103      	bne.n	80002e4 <getKeyInput2+0x78>
            pressType[1] = ZERO;
 80002dc:	4b17      	ldr	r3, [pc, #92]	; (800033c <getKeyInput2+0xd0>)
 80002de:	2200      	movs	r2, #0
 80002e0:	605a      	str	r2, [r3, #4]
            return;
 80002e2:	e029      	b.n	8000338 <getKeyInput2+0xcc>
        }
        button_flag[1] = 1;
 80002e4:	4b17      	ldr	r3, [pc, #92]	; (8000344 <getKeyInput2+0xd8>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	605a      	str	r2, [r3, #4]
        pressType[1] = PRESS_OVER;
 80002ea:	4b14      	ldr	r3, [pc, #80]	; (800033c <getKeyInput2+0xd0>)
 80002ec:	2204      	movs	r2, #4
 80002ee:	605a      	str	r2, [r3, #4]
        TimeOutForKeyPress[1] = 200;
 80002f0:	4b15      	ldr	r3, [pc, #84]	; (8000348 <getKeyInput2+0xdc>)
 80002f2:	22c8      	movs	r2, #200	; 0xc8
 80002f4:	605a      	str	r2, [r3, #4]
        break;
 80002f6:	e01f      	b.n	8000338 <getKeyInput2+0xcc>
    case PRESS_OVER:
        --TimeOutForKeyPress[1];
 80002f8:	4b13      	ldr	r3, [pc, #76]	; (8000348 <getKeyInput2+0xdc>)
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	3b01      	subs	r3, #1
 80002fe:	4a12      	ldr	r2, [pc, #72]	; (8000348 <getKeyInput2+0xdc>)
 8000300:	6053      	str	r3, [r2, #4]
        if (TimeOutForKeyPress[1] == 0) {
 8000302:	4b11      	ldr	r3, [pc, #68]	; (8000348 <getKeyInput2+0xdc>)
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d105      	bne.n	8000316 <getKeyInput2+0xaa>
            TimeOutForKeyPress[1] = 200;
 800030a:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <getKeyInput2+0xdc>)
 800030c:	22c8      	movs	r2, #200	; 0xc8
 800030e:	605a      	str	r2, [r3, #4]
            button_flag[1] = 1;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <getKeyInput2+0xd8>)
 8000312:	2201      	movs	r2, #1
 8000314:	605a      	str	r2, [r3, #4]
        }
        if (HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin) == NORMAL_STATE) {
 8000316:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800031a:	4809      	ldr	r0, [pc, #36]	; (8000340 <getKeyInput2+0xd4>)
 800031c:	f001 ff36 	bl	800218c <HAL_GPIO_ReadPin>
 8000320:	4603      	mov	r3, r0
 8000322:	2b01      	cmp	r3, #1
 8000324:	d107      	bne.n	8000336 <getKeyInput2+0xca>
            pressType[1] = ZERO;
 8000326:	4b05      	ldr	r3, [pc, #20]	; (800033c <getKeyInput2+0xd0>)
 8000328:	2200      	movs	r2, #0
 800032a:	605a      	str	r2, [r3, #4]
        }
        break;
 800032c:	e003      	b.n	8000336 <getKeyInput2+0xca>
    default:
        break;
 800032e:	bf00      	nop
 8000330:	e002      	b.n	8000338 <getKeyInput2+0xcc>
            return;
 8000332:	bf00      	nop
 8000334:	e000      	b.n	8000338 <getKeyInput2+0xcc>
        break;
 8000336:	bf00      	nop
    }
}
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000058 	.word	0x20000058
 8000340:	40011000 	.word	0x40011000
 8000344:	2000004c 	.word	0x2000004c
 8000348:	20000000 	.word	0x20000000

0800034c <getKeyInput3>:

void getKeyInput3(){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
    // BUTTON 3
    switch(pressType[2]) {
 8000350:	4b32      	ldr	r3, [pc, #200]	; (800041c <getKeyInput3+0xd0>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	2b04      	cmp	r3, #4
 8000356:	d85a      	bhi.n	800040e <getKeyInput3+0xc2>
 8000358:	a201      	add	r2, pc, #4	; (adr r2, 8000360 <getKeyInput3+0x14>)
 800035a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800035e:	bf00      	nop
 8000360:	08000375 	.word	0x08000375
 8000364:	0800038d 	.word	0x0800038d
 8000368:	080003ad 	.word	0x080003ad
 800036c:	0800040f 	.word	0x0800040f
 8000370:	080003d9 	.word	0x080003d9
    case ZERO:
        if (HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin) == NORMAL_STATE) {
 8000374:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000378:	4829      	ldr	r0, [pc, #164]	; (8000420 <getKeyInput3+0xd4>)
 800037a:	f001 ff07 	bl	800218c <HAL_GPIO_ReadPin>
 800037e:	4603      	mov	r3, r0
 8000380:	2b01      	cmp	r3, #1
 8000382:	d046      	beq.n	8000412 <getKeyInput3+0xc6>
            return;
        }
        pressType[2] = PRESS_RELEASE_1;
 8000384:	4b25      	ldr	r3, [pc, #148]	; (800041c <getKeyInput3+0xd0>)
 8000386:	2201      	movs	r2, #1
 8000388:	609a      	str	r2, [r3, #8]
        break;
 800038a:	e045      	b.n	8000418 <getKeyInput3+0xcc>
    case PRESS_RELEASE_1:
        if (HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin) == NORMAL_STATE) {
 800038c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000390:	4823      	ldr	r0, [pc, #140]	; (8000420 <getKeyInput3+0xd4>)
 8000392:	f001 fefb 	bl	800218c <HAL_GPIO_ReadPin>
 8000396:	4603      	mov	r3, r0
 8000398:	2b01      	cmp	r3, #1
 800039a:	d103      	bne.n	80003a4 <getKeyInput3+0x58>
            pressType[2] = ZERO;
 800039c:	4b1f      	ldr	r3, [pc, #124]	; (800041c <getKeyInput3+0xd0>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
            return;
 80003a2:	e039      	b.n	8000418 <getKeyInput3+0xcc>
        }
        pressType[2] = PRESS_RELEASE_2;
 80003a4:	4b1d      	ldr	r3, [pc, #116]	; (800041c <getKeyInput3+0xd0>)
 80003a6:	2202      	movs	r2, #2
 80003a8:	609a      	str	r2, [r3, #8]
        break;
 80003aa:	e035      	b.n	8000418 <getKeyInput3+0xcc>
    case PRESS_RELEASE_2:
        if (HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin) == NORMAL_STATE) {
 80003ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003b0:	481b      	ldr	r0, [pc, #108]	; (8000420 <getKeyInput3+0xd4>)
 80003b2:	f001 feeb 	bl	800218c <HAL_GPIO_ReadPin>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d103      	bne.n	80003c4 <getKeyInput3+0x78>
            pressType[2] = ZERO;
 80003bc:	4b17      	ldr	r3, [pc, #92]	; (800041c <getKeyInput3+0xd0>)
 80003be:	2200      	movs	r2, #0
 80003c0:	609a      	str	r2, [r3, #8]
            return;
 80003c2:	e029      	b.n	8000418 <getKeyInput3+0xcc>
        }
        button_flag[2] = 1;
 80003c4:	4b17      	ldr	r3, [pc, #92]	; (8000424 <getKeyInput3+0xd8>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	609a      	str	r2, [r3, #8]
        pressType[2] = PRESS_OVER;
 80003ca:	4b14      	ldr	r3, [pc, #80]	; (800041c <getKeyInput3+0xd0>)
 80003cc:	2204      	movs	r2, #4
 80003ce:	609a      	str	r2, [r3, #8]
        TimeOutForKeyPress[2] = 200;
 80003d0:	4b15      	ldr	r3, [pc, #84]	; (8000428 <getKeyInput3+0xdc>)
 80003d2:	22c8      	movs	r2, #200	; 0xc8
 80003d4:	609a      	str	r2, [r3, #8]
        break;
 80003d6:	e01f      	b.n	8000418 <getKeyInput3+0xcc>
    case PRESS_OVER:
        --TimeOutForKeyPress[2];
 80003d8:	4b13      	ldr	r3, [pc, #76]	; (8000428 <getKeyInput3+0xdc>)
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	3b01      	subs	r3, #1
 80003de:	4a12      	ldr	r2, [pc, #72]	; (8000428 <getKeyInput3+0xdc>)
 80003e0:	6093      	str	r3, [r2, #8]
        if (TimeOutForKeyPress[2] == 0) {
 80003e2:	4b11      	ldr	r3, [pc, #68]	; (8000428 <getKeyInput3+0xdc>)
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d105      	bne.n	80003f6 <getKeyInput3+0xaa>
            TimeOutForKeyPress[2] = 200;
 80003ea:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <getKeyInput3+0xdc>)
 80003ec:	22c8      	movs	r2, #200	; 0xc8
 80003ee:	609a      	str	r2, [r3, #8]
            button_flag[2] = 1;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <getKeyInput3+0xd8>)
 80003f2:	2201      	movs	r2, #1
 80003f4:	609a      	str	r2, [r3, #8]
        }
        if (HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin) == NORMAL_STATE) {
 80003f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003fa:	4809      	ldr	r0, [pc, #36]	; (8000420 <getKeyInput3+0xd4>)
 80003fc:	f001 fec6 	bl	800218c <HAL_GPIO_ReadPin>
 8000400:	4603      	mov	r3, r0
 8000402:	2b01      	cmp	r3, #1
 8000404:	d107      	bne.n	8000416 <getKeyInput3+0xca>
            pressType[2] = ZERO;
 8000406:	4b05      	ldr	r3, [pc, #20]	; (800041c <getKeyInput3+0xd0>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
        }
        break;
 800040c:	e003      	b.n	8000416 <getKeyInput3+0xca>
    default:
        break;
 800040e:	bf00      	nop
 8000410:	e002      	b.n	8000418 <getKeyInput3+0xcc>
            return;
 8000412:	bf00      	nop
 8000414:	e000      	b.n	8000418 <getKeyInput3+0xcc>
        break;
 8000416:	bf00      	nop
    }
}
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000058 	.word	0x20000058
 8000420:	40011000 	.word	0x40011000
 8000424:	2000004c 	.word	0x2000004c
 8000428:	20000000 	.word	0x20000000

0800042c <fsm_automatic_run>:
int status = INIT;
int tmp_red_time;
int tmp_green_time;
int tmp_yellow_time;

void fsm_automatic_run(){
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	switch(status){
 8000430:	4b85      	ldr	r3, [pc, #532]	; (8000648 <fsm_automatic_run+0x21c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	2b04      	cmp	r3, #4
 8000436:	f200 835b 	bhi.w	8000af0 <fsm_automatic_run+0x6c4>
 800043a:	a201      	add	r2, pc, #4	; (adr r2, 8000440 <fsm_automatic_run+0x14>)
 800043c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000440:	08000455 	.word	0x08000455
 8000444:	080004c7 	.word	0x080004c7
 8000448:	0800067d 	.word	0x0800067d
 800044c:	080007f1 	.word	0x080007f1
 8000450:	080009a1 	.word	0x080009a1
	case INIT:
		//when something wrong
		if((green_time + yellow_time) != red_time){
 8000454:	4b7d      	ldr	r3, [pc, #500]	; (800064c <fsm_automatic_run+0x220>)
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	4b7d      	ldr	r3, [pc, #500]	; (8000650 <fsm_automatic_run+0x224>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	441a      	add	r2, r3
 800045e:	4b7d      	ldr	r3, [pc, #500]	; (8000654 <fsm_automatic_run+0x228>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	429a      	cmp	r2, r3
 8000464:	d006      	beq.n	8000474 <fsm_automatic_run+0x48>
			green_time = red_time - yellow_time;
 8000466:	4b7b      	ldr	r3, [pc, #492]	; (8000654 <fsm_automatic_run+0x228>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b79      	ldr	r3, [pc, #484]	; (8000650 <fsm_automatic_run+0x224>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	4a76      	ldr	r2, [pc, #472]	; (800064c <fsm_automatic_run+0x220>)
 8000472:	6013      	str	r3, [r2, #0]
		}

		tmp_red_time = red_time - 1;
 8000474:	4b77      	ldr	r3, [pc, #476]	; (8000654 <fsm_automatic_run+0x228>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	3b01      	subs	r3, #1
 800047a:	4a77      	ldr	r2, [pc, #476]	; (8000658 <fsm_automatic_run+0x22c>)
 800047c:	6013      	str	r3, [r2, #0]
		tmp_green_time = green_time - 1;
 800047e:	4b73      	ldr	r3, [pc, #460]	; (800064c <fsm_automatic_run+0x220>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	3b01      	subs	r3, #1
 8000484:	4a75      	ldr	r2, [pc, #468]	; (800065c <fsm_automatic_run+0x230>)
 8000486:	6013      	str	r3, [r2, #0]
		tmp_yellow_time = yellow_time - 1;
 8000488:	4b71      	ldr	r3, [pc, #452]	; (8000650 <fsm_automatic_run+0x224>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	3b01      	subs	r3, #1
 800048e:	4a74      	ldr	r2, [pc, #464]	; (8000660 <fsm_automatic_run+0x234>)
 8000490:	6013      	str	r3, [r2, #0]

		setTimer(1, green_time*1000);
 8000492:	4b6e      	ldr	r3, [pc, #440]	; (800064c <fsm_automatic_run+0x220>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800049a:	fb02 f303 	mul.w	r3, r2, r3
 800049e:	4619      	mov	r1, r3
 80004a0:	2001      	movs	r0, #1
 80004a2:	f001 f9ad 	bl	8001800 <setTimer>
		setTimer(2, 1000);
 80004a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004aa:	2002      	movs	r0, #2
 80004ac:	f001 f9a8 	bl	8001800 <setTimer>
		setTimer(3, 250);
 80004b0:	21fa      	movs	r1, #250	; 0xfa
 80004b2:	2003      	movs	r0, #3
 80004b4:	f001 f9a4 	bl	8001800 <setTimer>
		New = 1;
 80004b8:	4b6a      	ldr	r3, [pc, #424]	; (8000664 <fsm_automatic_run+0x238>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	601a      	str	r2, [r3, #0]
		status = RED1_GREEN;
 80004be:	4b62      	ldr	r3, [pc, #392]	; (8000648 <fsm_automatic_run+0x21c>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	601a      	str	r2, [r3, #0]
		break;
 80004c4:	e31d      	b.n	8000b02 <fsm_automatic_run+0x6d6>
	case RED1_GREEN:
		//When just turn status
		if(New == 1){
 80004c6:	4b67      	ldr	r3, [pc, #412]	; (8000664 <fsm_automatic_run+0x238>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d138      	bne.n	8000540 <fsm_automatic_run+0x114>
			turn_red();
 80004ce:	f001 fa6f 	bl	80019b0 <turn_red>
			turn_green_2();
 80004d2:	f001 fac7 	bl	8001a64 <turn_green_2>
			led_buffer[0] = tmp_red_time / 10;
 80004d6:	4b60      	ldr	r3, [pc, #384]	; (8000658 <fsm_automatic_run+0x22c>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a63      	ldr	r2, [pc, #396]	; (8000668 <fsm_automatic_run+0x23c>)
 80004dc:	fb82 1203 	smull	r1, r2, r2, r3
 80004e0:	1092      	asrs	r2, r2, #2
 80004e2:	17db      	asrs	r3, r3, #31
 80004e4:	1ad3      	subs	r3, r2, r3
 80004e6:	4a61      	ldr	r2, [pc, #388]	; (800066c <fsm_automatic_run+0x240>)
 80004e8:	6013      	str	r3, [r2, #0]
			led_buffer[1] = tmp_red_time % 10;
 80004ea:	4b5b      	ldr	r3, [pc, #364]	; (8000658 <fsm_automatic_run+0x22c>)
 80004ec:	6819      	ldr	r1, [r3, #0]
 80004ee:	4b5e      	ldr	r3, [pc, #376]	; (8000668 <fsm_automatic_run+0x23c>)
 80004f0:	fb83 2301 	smull	r2, r3, r3, r1
 80004f4:	109a      	asrs	r2, r3, #2
 80004f6:	17cb      	asrs	r3, r1, #31
 80004f8:	1ad2      	subs	r2, r2, r3
 80004fa:	4613      	mov	r3, r2
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	4413      	add	r3, r2
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	1aca      	subs	r2, r1, r3
 8000504:	4b59      	ldr	r3, [pc, #356]	; (800066c <fsm_automatic_run+0x240>)
 8000506:	605a      	str	r2, [r3, #4]
			led_buffer[2] = tmp_green_time / 10;
 8000508:	4b54      	ldr	r3, [pc, #336]	; (800065c <fsm_automatic_run+0x230>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a56      	ldr	r2, [pc, #344]	; (8000668 <fsm_automatic_run+0x23c>)
 800050e:	fb82 1203 	smull	r1, r2, r2, r3
 8000512:	1092      	asrs	r2, r2, #2
 8000514:	17db      	asrs	r3, r3, #31
 8000516:	1ad3      	subs	r3, r2, r3
 8000518:	4a54      	ldr	r2, [pc, #336]	; (800066c <fsm_automatic_run+0x240>)
 800051a:	6093      	str	r3, [r2, #8]
			led_buffer[3] = tmp_green_time % 10;
 800051c:	4b4f      	ldr	r3, [pc, #316]	; (800065c <fsm_automatic_run+0x230>)
 800051e:	6819      	ldr	r1, [r3, #0]
 8000520:	4b51      	ldr	r3, [pc, #324]	; (8000668 <fsm_automatic_run+0x23c>)
 8000522:	fb83 2301 	smull	r2, r3, r3, r1
 8000526:	109a      	asrs	r2, r3, #2
 8000528:	17cb      	asrs	r3, r1, #31
 800052a:	1ad2      	subs	r2, r2, r3
 800052c:	4613      	mov	r3, r2
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	4413      	add	r3, r2
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	1aca      	subs	r2, r1, r3
 8000536:	4b4d      	ldr	r3, [pc, #308]	; (800066c <fsm_automatic_run+0x240>)
 8000538:	60da      	str	r2, [r3, #12]
			New = 0;
 800053a:	4b4a      	ldr	r3, [pc, #296]	; (8000664 <fsm_automatic_run+0x238>)
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
		}

		//COUNTDOWN TRAFFIC LIGHTS
		if(timer_flag[1] == 1){
 8000540:	4b4b      	ldr	r3, [pc, #300]	; (8000670 <fsm_automatic_run+0x244>)
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d10f      	bne.n	8000568 <fsm_automatic_run+0x13c>
			status = RED1_YELLOW;
 8000548:	4b3f      	ldr	r3, [pc, #252]	; (8000648 <fsm_automatic_run+0x21c>)
 800054a:	2202      	movs	r2, #2
 800054c:	601a      	str	r2, [r3, #0]
			New = 1;
 800054e:	4b45      	ldr	r3, [pc, #276]	; (8000664 <fsm_automatic_run+0x238>)
 8000550:	2201      	movs	r2, #1
 8000552:	601a      	str	r2, [r3, #0]
			setTimer(1, yellow_time*1000);
 8000554:	4b3e      	ldr	r3, [pc, #248]	; (8000650 <fsm_automatic_run+0x224>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800055c:	fb02 f303 	mul.w	r3, r2, r3
 8000560:	4619      	mov	r1, r3
 8000562:	2001      	movs	r0, #1
 8000564:	f001 f94c 	bl	8001800 <setTimer>
		}

		//7-SEGMENT LEDS
		if(idx == 4){
 8000568:	4b42      	ldr	r3, [pc, #264]	; (8000674 <fsm_automatic_run+0x248>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b04      	cmp	r3, #4
 800056e:	d102      	bne.n	8000576 <fsm_automatic_run+0x14a>
			idx = 0;
 8000570:	4b40      	ldr	r3, [pc, #256]	; (8000674 <fsm_automatic_run+0x248>)
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[3] == 1){
 8000576:	4b3e      	ldr	r3, [pc, #248]	; (8000670 <fsm_automatic_run+0x244>)
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d10b      	bne.n	8000596 <fsm_automatic_run+0x16a>
			update7SEG(idx++);
 800057e:	4b3d      	ldr	r3, [pc, #244]	; (8000674 <fsm_automatic_run+0x248>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	1c5a      	adds	r2, r3, #1
 8000584:	493b      	ldr	r1, [pc, #236]	; (8000674 <fsm_automatic_run+0x248>)
 8000586:	600a      	str	r2, [r1, #0]
 8000588:	4618      	mov	r0, r3
 800058a:	f000 ffef 	bl	800156c <update7SEG>
			setTimer(3,250);
 800058e:	21fa      	movs	r1, #250	; 0xfa
 8000590:	2003      	movs	r0, #3
 8000592:	f001 f935 	bl	8001800 <setTimer>
		}

		if(timer_flag[2] == 1){
 8000596:	4b36      	ldr	r3, [pc, #216]	; (8000670 <fsm_automatic_run+0x244>)
 8000598:	689b      	ldr	r3, [r3, #8]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d126      	bne.n	80005ec <fsm_automatic_run+0x1c0>
			led_buffer[3]--;
 800059e:	4b33      	ldr	r3, [pc, #204]	; (800066c <fsm_automatic_run+0x240>)
 80005a0:	68db      	ldr	r3, [r3, #12]
 80005a2:	3b01      	subs	r3, #1
 80005a4:	4a31      	ldr	r2, [pc, #196]	; (800066c <fsm_automatic_run+0x240>)
 80005a6:	60d3      	str	r3, [r2, #12]
			if(led_buffer[3] < 0){
 80005a8:	4b30      	ldr	r3, [pc, #192]	; (800066c <fsm_automatic_run+0x240>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	da07      	bge.n	80005c0 <fsm_automatic_run+0x194>
				led_buffer[3] = 9;
 80005b0:	4b2e      	ldr	r3, [pc, #184]	; (800066c <fsm_automatic_run+0x240>)
 80005b2:	2209      	movs	r2, #9
 80005b4:	60da      	str	r2, [r3, #12]
				led_buffer[2]--;
 80005b6:	4b2d      	ldr	r3, [pc, #180]	; (800066c <fsm_automatic_run+0x240>)
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	3b01      	subs	r3, #1
 80005bc:	4a2b      	ldr	r2, [pc, #172]	; (800066c <fsm_automatic_run+0x240>)
 80005be:	6093      	str	r3, [r2, #8]
			}
			led_buffer[1]--;
 80005c0:	4b2a      	ldr	r3, [pc, #168]	; (800066c <fsm_automatic_run+0x240>)
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	3b01      	subs	r3, #1
 80005c6:	4a29      	ldr	r2, [pc, #164]	; (800066c <fsm_automatic_run+0x240>)
 80005c8:	6053      	str	r3, [r2, #4]
			if(led_buffer[1] < 0){
 80005ca:	4b28      	ldr	r3, [pc, #160]	; (800066c <fsm_automatic_run+0x240>)
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	da07      	bge.n	80005e2 <fsm_automatic_run+0x1b6>
				led_buffer[1] = 9;
 80005d2:	4b26      	ldr	r3, [pc, #152]	; (800066c <fsm_automatic_run+0x240>)
 80005d4:	2209      	movs	r2, #9
 80005d6:	605a      	str	r2, [r3, #4]
				led_buffer[0]--;
 80005d8:	4b24      	ldr	r3, [pc, #144]	; (800066c <fsm_automatic_run+0x240>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	3b01      	subs	r3, #1
 80005de:	4a23      	ldr	r2, [pc, #140]	; (800066c <fsm_automatic_run+0x240>)
 80005e0:	6013      	str	r3, [r2, #0]
			}
			setTimer(2, 1000);
 80005e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005e6:	2002      	movs	r0, #2
 80005e8:	f001 f90a 	bl	8001800 <setTimer>
		}

		//SETTING TRAFFIC LIGHTS
		if(button_flag[0] == 1){
 80005ec:	4b22      	ldr	r3, [pc, #136]	; (8000678 <fsm_automatic_run+0x24c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d115      	bne.n	8000620 <fsm_automatic_run+0x1f4>
			button_flag[0] = 0;
 80005f4:	4b20      	ldr	r3, [pc, #128]	; (8000678 <fsm_automatic_run+0x24c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
			New = 1;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <fsm_automatic_run+0x238>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	601a      	str	r2, [r3, #0]
			clearLed();
 8000600:	f000 ff96 	bl	8001530 <clearLed>
			clear_light();
 8000604:	f001 fa5e 	bl	8001ac4 <clear_light>
			setTimer(3, 250);
 8000608:	21fa      	movs	r1, #250	; 0xfa
 800060a:	2003      	movs	r0, #3
 800060c:	f001 f8f8 	bl	8001800 <setTimer>
			setTimer(4, 500);
 8000610:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000614:	2004      	movs	r0, #4
 8000616:	f001 f8f3 	bl	8001800 <setTimer>
			status = RED_SETTING;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <fsm_automatic_run+0x21c>)
 800061c:	2205      	movs	r2, #5
 800061e:	601a      	str	r2, [r3, #0]
		}

		//MANUAL TRAFFIC LIGHTS
		if(button_flag[1] == 1){
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <fsm_automatic_run+0x24c>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	2b01      	cmp	r3, #1
 8000626:	f040 8265 	bne.w	8000af4 <fsm_automatic_run+0x6c8>
			New = 1;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <fsm_automatic_run+0x238>)
 800062c:	2201      	movs	r2, #1
 800062e:	601a      	str	r2, [r3, #0]
			button_flag[1] = 0;
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <fsm_automatic_run+0x24c>)
 8000632:	2200      	movs	r2, #0
 8000634:	605a      	str	r2, [r3, #4]
			clearLed();
 8000636:	f000 ff7b 	bl	8001530 <clearLed>
			clear_light();
 800063a:	f001 fa43 	bl	8001ac4 <clear_light>
			status = RED_MAN;
 800063e:	4b02      	ldr	r3, [pc, #8]	; (8000648 <fsm_automatic_run+0x21c>)
 8000640:	2208      	movs	r2, #8
 8000642:	601a      	str	r2, [r3, #0]
		}
		break;
 8000644:	e256      	b.n	8000af4 <fsm_automatic_run+0x6c8>
 8000646:	bf00      	nop
 8000648:	20000064 	.word	0x20000064
 800064c:	20000014 	.word	0x20000014
 8000650:	20000010 	.word	0x20000010
 8000654:	2000000c 	.word	0x2000000c
 8000658:	200000d8 	.word	0x200000d8
 800065c:	200000d4 	.word	0x200000d4
 8000660:	200000d0 	.word	0x200000d0
 8000664:	2000006c 	.word	0x2000006c
 8000668:	66666667 	.word	0x66666667
 800066c:	20000070 	.word	0x20000070
 8000670:	200000a8 	.word	0x200000a8
 8000674:	20000068 	.word	0x20000068
 8000678:	2000004c 	.word	0x2000004c
	case RED1_YELLOW:
		//When just turn status
		if(New == 1){
 800067c:	4b53      	ldr	r3, [pc, #332]	; (80007cc <fsm_automatic_run+0x3a0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d11d      	bne.n	80006c0 <fsm_automatic_run+0x294>
			turn_yellow_2();
 8000684:	f001 fa06 	bl	8001a94 <turn_yellow_2>
			led_buffer[2] = tmp_yellow_time / 10;
 8000688:	4b51      	ldr	r3, [pc, #324]	; (80007d0 <fsm_automatic_run+0x3a4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a51      	ldr	r2, [pc, #324]	; (80007d4 <fsm_automatic_run+0x3a8>)
 800068e:	fb82 1203 	smull	r1, r2, r2, r3
 8000692:	1092      	asrs	r2, r2, #2
 8000694:	17db      	asrs	r3, r3, #31
 8000696:	1ad3      	subs	r3, r2, r3
 8000698:	4a4f      	ldr	r2, [pc, #316]	; (80007d8 <fsm_automatic_run+0x3ac>)
 800069a:	6093      	str	r3, [r2, #8]
			led_buffer[3] = tmp_yellow_time % 10;
 800069c:	4b4c      	ldr	r3, [pc, #304]	; (80007d0 <fsm_automatic_run+0x3a4>)
 800069e:	6819      	ldr	r1, [r3, #0]
 80006a0:	4b4c      	ldr	r3, [pc, #304]	; (80007d4 <fsm_automatic_run+0x3a8>)
 80006a2:	fb83 2301 	smull	r2, r3, r3, r1
 80006a6:	109a      	asrs	r2, r3, #2
 80006a8:	17cb      	asrs	r3, r1, #31
 80006aa:	1ad2      	subs	r2, r2, r3
 80006ac:	4613      	mov	r3, r2
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	4413      	add	r3, r2
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	1aca      	subs	r2, r1, r3
 80006b6:	4b48      	ldr	r3, [pc, #288]	; (80007d8 <fsm_automatic_run+0x3ac>)
 80006b8:	60da      	str	r2, [r3, #12]
			New = 0;
 80006ba:	4b44      	ldr	r3, [pc, #272]	; (80007cc <fsm_automatic_run+0x3a0>)
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
		}

		//COUNTDOWN TRAFFIC LIGHTS
		if(timer_flag[1] == 1){
 80006c0:	4b46      	ldr	r3, [pc, #280]	; (80007dc <fsm_automatic_run+0x3b0>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d10f      	bne.n	80006e8 <fsm_automatic_run+0x2bc>
			status = RED2_GREEN;
 80006c8:	4b45      	ldr	r3, [pc, #276]	; (80007e0 <fsm_automatic_run+0x3b4>)
 80006ca:	2203      	movs	r2, #3
 80006cc:	601a      	str	r2, [r3, #0]
			New = 1;
 80006ce:	4b3f      	ldr	r3, [pc, #252]	; (80007cc <fsm_automatic_run+0x3a0>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	601a      	str	r2, [r3, #0]
			setTimer(1, green_time*1000);
 80006d4:	4b43      	ldr	r3, [pc, #268]	; (80007e4 <fsm_automatic_run+0x3b8>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006dc:	fb02 f303 	mul.w	r3, r2, r3
 80006e0:	4619      	mov	r1, r3
 80006e2:	2001      	movs	r0, #1
 80006e4:	f001 f88c 	bl	8001800 <setTimer>
		}

		//7-SEGMENT LEDS
		if(idx == 4){
 80006e8:	4b3f      	ldr	r3, [pc, #252]	; (80007e8 <fsm_automatic_run+0x3bc>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b04      	cmp	r3, #4
 80006ee:	d102      	bne.n	80006f6 <fsm_automatic_run+0x2ca>
			idx = 0;
 80006f0:	4b3d      	ldr	r3, [pc, #244]	; (80007e8 <fsm_automatic_run+0x3bc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[3] == 1){
 80006f6:	4b39      	ldr	r3, [pc, #228]	; (80007dc <fsm_automatic_run+0x3b0>)
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d10b      	bne.n	8000716 <fsm_automatic_run+0x2ea>
			update7SEG(idx++);
 80006fe:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <fsm_automatic_run+0x3bc>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	4938      	ldr	r1, [pc, #224]	; (80007e8 <fsm_automatic_run+0x3bc>)
 8000706:	600a      	str	r2, [r1, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	f000 ff2f 	bl	800156c <update7SEG>
			setTimer(3,250);
 800070e:	21fa      	movs	r1, #250	; 0xfa
 8000710:	2003      	movs	r0, #3
 8000712:	f001 f875 	bl	8001800 <setTimer>
		}
		if(timer_flag[2] == 1){
 8000716:	4b31      	ldr	r3, [pc, #196]	; (80007dc <fsm_automatic_run+0x3b0>)
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d126      	bne.n	800076c <fsm_automatic_run+0x340>
			led_buffer[3]--;
 800071e:	4b2e      	ldr	r3, [pc, #184]	; (80007d8 <fsm_automatic_run+0x3ac>)
 8000720:	68db      	ldr	r3, [r3, #12]
 8000722:	3b01      	subs	r3, #1
 8000724:	4a2c      	ldr	r2, [pc, #176]	; (80007d8 <fsm_automatic_run+0x3ac>)
 8000726:	60d3      	str	r3, [r2, #12]
			if(led_buffer[3] < 0){
 8000728:	4b2b      	ldr	r3, [pc, #172]	; (80007d8 <fsm_automatic_run+0x3ac>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	2b00      	cmp	r3, #0
 800072e:	da07      	bge.n	8000740 <fsm_automatic_run+0x314>
				led_buffer[3] = 9;
 8000730:	4b29      	ldr	r3, [pc, #164]	; (80007d8 <fsm_automatic_run+0x3ac>)
 8000732:	2209      	movs	r2, #9
 8000734:	60da      	str	r2, [r3, #12]
				led_buffer[2]--;
 8000736:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <fsm_automatic_run+0x3ac>)
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	3b01      	subs	r3, #1
 800073c:	4a26      	ldr	r2, [pc, #152]	; (80007d8 <fsm_automatic_run+0x3ac>)
 800073e:	6093      	str	r3, [r2, #8]
			}
			led_buffer[1]--;
 8000740:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <fsm_automatic_run+0x3ac>)
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	3b01      	subs	r3, #1
 8000746:	4a24      	ldr	r2, [pc, #144]	; (80007d8 <fsm_automatic_run+0x3ac>)
 8000748:	6053      	str	r3, [r2, #4]
			if(led_buffer[1] < 0){
 800074a:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <fsm_automatic_run+0x3ac>)
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	2b00      	cmp	r3, #0
 8000750:	da07      	bge.n	8000762 <fsm_automatic_run+0x336>
				led_buffer[1] = 9;
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <fsm_automatic_run+0x3ac>)
 8000754:	2209      	movs	r2, #9
 8000756:	605a      	str	r2, [r3, #4]
				led_buffer[0]--;
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <fsm_automatic_run+0x3ac>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	3b01      	subs	r3, #1
 800075e:	4a1e      	ldr	r2, [pc, #120]	; (80007d8 <fsm_automatic_run+0x3ac>)
 8000760:	6013      	str	r3, [r2, #0]
			}
			setTimer(2, 1000);
 8000762:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000766:	2002      	movs	r0, #2
 8000768:	f001 f84a 	bl	8001800 <setTimer>
		}

		//SETTING TRAFFIC LIGHTS
		if(button_flag[0] == 1){
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <fsm_automatic_run+0x3c0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d115      	bne.n	80007a0 <fsm_automatic_run+0x374>
			button_flag[0] = 0;
 8000774:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <fsm_automatic_run+0x3c0>)
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
			New = 1;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <fsm_automatic_run+0x3a0>)
 800077c:	2201      	movs	r2, #1
 800077e:	601a      	str	r2, [r3, #0]
			clearLed();
 8000780:	f000 fed6 	bl	8001530 <clearLed>
			clear_light();
 8000784:	f001 f99e 	bl	8001ac4 <clear_light>
			setTimer(3, 250);
 8000788:	21fa      	movs	r1, #250	; 0xfa
 800078a:	2003      	movs	r0, #3
 800078c:	f001 f838 	bl	8001800 <setTimer>
			setTimer(4, 500);
 8000790:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000794:	2004      	movs	r0, #4
 8000796:	f001 f833 	bl	8001800 <setTimer>
			status = RED_SETTING;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <fsm_automatic_run+0x3b4>)
 800079c:	2205      	movs	r2, #5
 800079e:	601a      	str	r2, [r3, #0]
		}

		//MANUAL TRAFFIC LIGHTS
		if(button_flag[1] == 1){
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <fsm_automatic_run+0x3c0>)
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	f040 81a7 	bne.w	8000af8 <fsm_automatic_run+0x6cc>
			New = 1;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <fsm_automatic_run+0x3a0>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	601a      	str	r2, [r3, #0]
			button_flag[1] = 0;
 80007b0:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <fsm_automatic_run+0x3c0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
			clearLed();
 80007b6:	f000 febb 	bl	8001530 <clearLed>
			clear_light();
 80007ba:	f001 f983 	bl	8001ac4 <clear_light>
			New = 1;
 80007be:	4b03      	ldr	r3, [pc, #12]	; (80007cc <fsm_automatic_run+0x3a0>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	601a      	str	r2, [r3, #0]
			status = RED_MAN;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <fsm_automatic_run+0x3b4>)
 80007c6:	2208      	movs	r2, #8
 80007c8:	601a      	str	r2, [r3, #0]
		}
		break;
 80007ca:	e195      	b.n	8000af8 <fsm_automatic_run+0x6cc>
 80007cc:	2000006c 	.word	0x2000006c
 80007d0:	200000d0 	.word	0x200000d0
 80007d4:	66666667 	.word	0x66666667
 80007d8:	20000070 	.word	0x20000070
 80007dc:	200000a8 	.word	0x200000a8
 80007e0:	20000064 	.word	0x20000064
 80007e4:	20000014 	.word	0x20000014
 80007e8:	20000068 	.word	0x20000068
 80007ec:	2000004c 	.word	0x2000004c
	case RED2_GREEN:
		//When just turn status
		if(New == 1){
 80007f0:	4b61      	ldr	r3, [pc, #388]	; (8000978 <fsm_automatic_run+0x54c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d138      	bne.n	800086a <fsm_automatic_run+0x43e>
			turn_red_2();
 80007f8:	f001 f91c 	bl	8001a34 <turn_red_2>
			turn_green();
 80007fc:	f001 f8ee 	bl	80019dc <turn_green>
			led_buffer[2] = tmp_red_time / 10;
 8000800:	4b5e      	ldr	r3, [pc, #376]	; (800097c <fsm_automatic_run+0x550>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a5e      	ldr	r2, [pc, #376]	; (8000980 <fsm_automatic_run+0x554>)
 8000806:	fb82 1203 	smull	r1, r2, r2, r3
 800080a:	1092      	asrs	r2, r2, #2
 800080c:	17db      	asrs	r3, r3, #31
 800080e:	1ad3      	subs	r3, r2, r3
 8000810:	4a5c      	ldr	r2, [pc, #368]	; (8000984 <fsm_automatic_run+0x558>)
 8000812:	6093      	str	r3, [r2, #8]
			led_buffer[3] = tmp_red_time % 10;
 8000814:	4b59      	ldr	r3, [pc, #356]	; (800097c <fsm_automatic_run+0x550>)
 8000816:	6819      	ldr	r1, [r3, #0]
 8000818:	4b59      	ldr	r3, [pc, #356]	; (8000980 <fsm_automatic_run+0x554>)
 800081a:	fb83 2301 	smull	r2, r3, r3, r1
 800081e:	109a      	asrs	r2, r3, #2
 8000820:	17cb      	asrs	r3, r1, #31
 8000822:	1ad2      	subs	r2, r2, r3
 8000824:	4613      	mov	r3, r2
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	4413      	add	r3, r2
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	1aca      	subs	r2, r1, r3
 800082e:	4b55      	ldr	r3, [pc, #340]	; (8000984 <fsm_automatic_run+0x558>)
 8000830:	60da      	str	r2, [r3, #12]
			led_buffer[0] = tmp_green_time / 10;
 8000832:	4b55      	ldr	r3, [pc, #340]	; (8000988 <fsm_automatic_run+0x55c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a52      	ldr	r2, [pc, #328]	; (8000980 <fsm_automatic_run+0x554>)
 8000838:	fb82 1203 	smull	r1, r2, r2, r3
 800083c:	1092      	asrs	r2, r2, #2
 800083e:	17db      	asrs	r3, r3, #31
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	4a50      	ldr	r2, [pc, #320]	; (8000984 <fsm_automatic_run+0x558>)
 8000844:	6013      	str	r3, [r2, #0]
			led_buffer[1] = tmp_green_time % 10;
 8000846:	4b50      	ldr	r3, [pc, #320]	; (8000988 <fsm_automatic_run+0x55c>)
 8000848:	6819      	ldr	r1, [r3, #0]
 800084a:	4b4d      	ldr	r3, [pc, #308]	; (8000980 <fsm_automatic_run+0x554>)
 800084c:	fb83 2301 	smull	r2, r3, r3, r1
 8000850:	109a      	asrs	r2, r3, #2
 8000852:	17cb      	asrs	r3, r1, #31
 8000854:	1ad2      	subs	r2, r2, r3
 8000856:	4613      	mov	r3, r2
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	4413      	add	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	1aca      	subs	r2, r1, r3
 8000860:	4b48      	ldr	r3, [pc, #288]	; (8000984 <fsm_automatic_run+0x558>)
 8000862:	605a      	str	r2, [r3, #4]
			New = 0;
 8000864:	4b44      	ldr	r3, [pc, #272]	; (8000978 <fsm_automatic_run+0x54c>)
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
		}

		//COUNTDOWN TRAFFIC LIGHTS
		if(timer_flag[1] == 1){
 800086a:	4b48      	ldr	r3, [pc, #288]	; (800098c <fsm_automatic_run+0x560>)
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d10f      	bne.n	8000892 <fsm_automatic_run+0x466>
			status = RED2_YELLOW;
 8000872:	4b47      	ldr	r3, [pc, #284]	; (8000990 <fsm_automatic_run+0x564>)
 8000874:	2204      	movs	r2, #4
 8000876:	601a      	str	r2, [r3, #0]
			New = 1;
 8000878:	4b3f      	ldr	r3, [pc, #252]	; (8000978 <fsm_automatic_run+0x54c>)
 800087a:	2201      	movs	r2, #1
 800087c:	601a      	str	r2, [r3, #0]
			setTimer(1, yellow_time*1000);
 800087e:	4b45      	ldr	r3, [pc, #276]	; (8000994 <fsm_automatic_run+0x568>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000886:	fb02 f303 	mul.w	r3, r2, r3
 800088a:	4619      	mov	r1, r3
 800088c:	2001      	movs	r0, #1
 800088e:	f000 ffb7 	bl	8001800 <setTimer>
		}

		//7-SEGMENT LEDS
		if(idx == 4){
 8000892:	4b41      	ldr	r3, [pc, #260]	; (8000998 <fsm_automatic_run+0x56c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b04      	cmp	r3, #4
 8000898:	d102      	bne.n	80008a0 <fsm_automatic_run+0x474>
			idx = 0;
 800089a:	4b3f      	ldr	r3, [pc, #252]	; (8000998 <fsm_automatic_run+0x56c>)
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[3] == 1){
 80008a0:	4b3a      	ldr	r3, [pc, #232]	; (800098c <fsm_automatic_run+0x560>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d10b      	bne.n	80008c0 <fsm_automatic_run+0x494>
			update7SEG(idx++);
 80008a8:	4b3b      	ldr	r3, [pc, #236]	; (8000998 <fsm_automatic_run+0x56c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	1c5a      	adds	r2, r3, #1
 80008ae:	493a      	ldr	r1, [pc, #232]	; (8000998 <fsm_automatic_run+0x56c>)
 80008b0:	600a      	str	r2, [r1, #0]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 fe5a 	bl	800156c <update7SEG>
			setTimer(3,250);
 80008b8:	21fa      	movs	r1, #250	; 0xfa
 80008ba:	2003      	movs	r0, #3
 80008bc:	f000 ffa0 	bl	8001800 <setTimer>
		}
		if(timer_flag[2] == 1){
 80008c0:	4b32      	ldr	r3, [pc, #200]	; (800098c <fsm_automatic_run+0x560>)
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d126      	bne.n	8000916 <fsm_automatic_run+0x4ea>
			led_buffer[3]--;
 80008c8:	4b2e      	ldr	r3, [pc, #184]	; (8000984 <fsm_automatic_run+0x558>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	3b01      	subs	r3, #1
 80008ce:	4a2d      	ldr	r2, [pc, #180]	; (8000984 <fsm_automatic_run+0x558>)
 80008d0:	60d3      	str	r3, [r2, #12]
			if(led_buffer[3] < 0){
 80008d2:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <fsm_automatic_run+0x558>)
 80008d4:	68db      	ldr	r3, [r3, #12]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	da07      	bge.n	80008ea <fsm_automatic_run+0x4be>
				led_buffer[3] = 9;
 80008da:	4b2a      	ldr	r3, [pc, #168]	; (8000984 <fsm_automatic_run+0x558>)
 80008dc:	2209      	movs	r2, #9
 80008de:	60da      	str	r2, [r3, #12]
				led_buffer[2]--;
 80008e0:	4b28      	ldr	r3, [pc, #160]	; (8000984 <fsm_automatic_run+0x558>)
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	3b01      	subs	r3, #1
 80008e6:	4a27      	ldr	r2, [pc, #156]	; (8000984 <fsm_automatic_run+0x558>)
 80008e8:	6093      	str	r3, [r2, #8]
			}
			led_buffer[1]--;
 80008ea:	4b26      	ldr	r3, [pc, #152]	; (8000984 <fsm_automatic_run+0x558>)
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	4a24      	ldr	r2, [pc, #144]	; (8000984 <fsm_automatic_run+0x558>)
 80008f2:	6053      	str	r3, [r2, #4]
			if(led_buffer[1] < 0){
 80008f4:	4b23      	ldr	r3, [pc, #140]	; (8000984 <fsm_automatic_run+0x558>)
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	da07      	bge.n	800090c <fsm_automatic_run+0x4e0>
				led_buffer[1] = 9;
 80008fc:	4b21      	ldr	r3, [pc, #132]	; (8000984 <fsm_automatic_run+0x558>)
 80008fe:	2209      	movs	r2, #9
 8000900:	605a      	str	r2, [r3, #4]
				led_buffer[0]--;
 8000902:	4b20      	ldr	r3, [pc, #128]	; (8000984 <fsm_automatic_run+0x558>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3b01      	subs	r3, #1
 8000908:	4a1e      	ldr	r2, [pc, #120]	; (8000984 <fsm_automatic_run+0x558>)
 800090a:	6013      	str	r3, [r2, #0]
			}
			setTimer(2, 1000);
 800090c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000910:	2002      	movs	r0, #2
 8000912:	f000 ff75 	bl	8001800 <setTimer>
		}

		//SETTING TRAFFIC LIGHTS
		if(button_flag[0] == 1){
 8000916:	4b21      	ldr	r3, [pc, #132]	; (800099c <fsm_automatic_run+0x570>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d115      	bne.n	800094a <fsm_automatic_run+0x51e>
			button_flag[0] = 0;
 800091e:	4b1f      	ldr	r3, [pc, #124]	; (800099c <fsm_automatic_run+0x570>)
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
			New = 1;
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <fsm_automatic_run+0x54c>)
 8000926:	2201      	movs	r2, #1
 8000928:	601a      	str	r2, [r3, #0]
			clearLed();
 800092a:	f000 fe01 	bl	8001530 <clearLed>
			clear_light();
 800092e:	f001 f8c9 	bl	8001ac4 <clear_light>
			setTimer(3, 250);
 8000932:	21fa      	movs	r1, #250	; 0xfa
 8000934:	2003      	movs	r0, #3
 8000936:	f000 ff63 	bl	8001800 <setTimer>
			setTimer(4, 500);
 800093a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800093e:	2004      	movs	r0, #4
 8000940:	f000 ff5e 	bl	8001800 <setTimer>
			status = RED_SETTING;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <fsm_automatic_run+0x564>)
 8000946:	2205      	movs	r2, #5
 8000948:	601a      	str	r2, [r3, #0]
		}

		//MANUAL TRAFFIC LIGHTS
		if(button_flag[1] == 1){
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <fsm_automatic_run+0x570>)
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	2b01      	cmp	r3, #1
 8000950:	f040 80d4 	bne.w	8000afc <fsm_automatic_run+0x6d0>
			New = 1;
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <fsm_automatic_run+0x54c>)
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]
			button_flag[1] = 0;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <fsm_automatic_run+0x570>)
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
			clearLed();
 8000960:	f000 fde6 	bl	8001530 <clearLed>
			clear_light();
 8000964:	f001 f8ae 	bl	8001ac4 <clear_light>
			New = 1;
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <fsm_automatic_run+0x54c>)
 800096a:	2201      	movs	r2, #1
 800096c:	601a      	str	r2, [r3, #0]
			status = RED_MAN;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <fsm_automatic_run+0x564>)
 8000970:	2208      	movs	r2, #8
 8000972:	601a      	str	r2, [r3, #0]
		}
		break;
 8000974:	e0c2      	b.n	8000afc <fsm_automatic_run+0x6d0>
 8000976:	bf00      	nop
 8000978:	2000006c 	.word	0x2000006c
 800097c:	200000d8 	.word	0x200000d8
 8000980:	66666667 	.word	0x66666667
 8000984:	20000070 	.word	0x20000070
 8000988:	200000d4 	.word	0x200000d4
 800098c:	200000a8 	.word	0x200000a8
 8000990:	20000064 	.word	0x20000064
 8000994:	20000010 	.word	0x20000010
 8000998:	20000068 	.word	0x20000068
 800099c:	2000004c 	.word	0x2000004c
	case RED2_YELLOW:
		//When just turn status
		if(New == 1){
 80009a0:	4b59      	ldr	r3, [pc, #356]	; (8000b08 <fsm_automatic_run+0x6dc>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d11d      	bne.n	80009e4 <fsm_automatic_run+0x5b8>
			turn_yellow();
 80009a8:	f001 f82e 	bl	8001a08 <turn_yellow>
			led_buffer[0] = tmp_yellow_time / 10;
 80009ac:	4b57      	ldr	r3, [pc, #348]	; (8000b0c <fsm_automatic_run+0x6e0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a57      	ldr	r2, [pc, #348]	; (8000b10 <fsm_automatic_run+0x6e4>)
 80009b2:	fb82 1203 	smull	r1, r2, r2, r3
 80009b6:	1092      	asrs	r2, r2, #2
 80009b8:	17db      	asrs	r3, r3, #31
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	4a55      	ldr	r2, [pc, #340]	; (8000b14 <fsm_automatic_run+0x6e8>)
 80009be:	6013      	str	r3, [r2, #0]
			led_buffer[1] = tmp_yellow_time % 10;
 80009c0:	4b52      	ldr	r3, [pc, #328]	; (8000b0c <fsm_automatic_run+0x6e0>)
 80009c2:	6819      	ldr	r1, [r3, #0]
 80009c4:	4b52      	ldr	r3, [pc, #328]	; (8000b10 <fsm_automatic_run+0x6e4>)
 80009c6:	fb83 2301 	smull	r2, r3, r3, r1
 80009ca:	109a      	asrs	r2, r3, #2
 80009cc:	17cb      	asrs	r3, r1, #31
 80009ce:	1ad2      	subs	r2, r2, r3
 80009d0:	4613      	mov	r3, r2
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	4413      	add	r3, r2
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	1aca      	subs	r2, r1, r3
 80009da:	4b4e      	ldr	r3, [pc, #312]	; (8000b14 <fsm_automatic_run+0x6e8>)
 80009dc:	605a      	str	r2, [r3, #4]
			New = 0;
 80009de:	4b4a      	ldr	r3, [pc, #296]	; (8000b08 <fsm_automatic_run+0x6dc>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
		}

		//COUNTDOWN TRAFFIC LIGHTS
		if(timer_flag[1] == 1){
 80009e4:	4b4c      	ldr	r3, [pc, #304]	; (8000b18 <fsm_automatic_run+0x6ec>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d10f      	bne.n	8000a0c <fsm_automatic_run+0x5e0>
			status = RED1_GREEN;
 80009ec:	4b4b      	ldr	r3, [pc, #300]	; (8000b1c <fsm_automatic_run+0x6f0>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	601a      	str	r2, [r3, #0]
			New = 1;
 80009f2:	4b45      	ldr	r3, [pc, #276]	; (8000b08 <fsm_automatic_run+0x6dc>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	601a      	str	r2, [r3, #0]
			setTimer(1, green_time*1000);
 80009f8:	4b49      	ldr	r3, [pc, #292]	; (8000b20 <fsm_automatic_run+0x6f4>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a00:	fb02 f303 	mul.w	r3, r2, r3
 8000a04:	4619      	mov	r1, r3
 8000a06:	2001      	movs	r0, #1
 8000a08:	f000 fefa 	bl	8001800 <setTimer>
		}

		//7-SEGMENT LEDS
		if(idx == 4){
 8000a0c:	4b45      	ldr	r3, [pc, #276]	; (8000b24 <fsm_automatic_run+0x6f8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b04      	cmp	r3, #4
 8000a12:	d102      	bne.n	8000a1a <fsm_automatic_run+0x5ee>
			idx = 0;
 8000a14:	4b43      	ldr	r3, [pc, #268]	; (8000b24 <fsm_automatic_run+0x6f8>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[3] == 1){
 8000a1a:	4b3f      	ldr	r3, [pc, #252]	; (8000b18 <fsm_automatic_run+0x6ec>)
 8000a1c:	68db      	ldr	r3, [r3, #12]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d10b      	bne.n	8000a3a <fsm_automatic_run+0x60e>
			update7SEG(idx++);
 8000a22:	4b40      	ldr	r3, [pc, #256]	; (8000b24 <fsm_automatic_run+0x6f8>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	493e      	ldr	r1, [pc, #248]	; (8000b24 <fsm_automatic_run+0x6f8>)
 8000a2a:	600a      	str	r2, [r1, #0]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 fd9d 	bl	800156c <update7SEG>
			setTimer(3,250);
 8000a32:	21fa      	movs	r1, #250	; 0xfa
 8000a34:	2003      	movs	r0, #3
 8000a36:	f000 fee3 	bl	8001800 <setTimer>
		}
		if(timer_flag[2] == 1){
 8000a3a:	4b37      	ldr	r3, [pc, #220]	; (8000b18 <fsm_automatic_run+0x6ec>)
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d126      	bne.n	8000a90 <fsm_automatic_run+0x664>
			led_buffer[3]--;
 8000a42:	4b34      	ldr	r3, [pc, #208]	; (8000b14 <fsm_automatic_run+0x6e8>)
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	4a32      	ldr	r2, [pc, #200]	; (8000b14 <fsm_automatic_run+0x6e8>)
 8000a4a:	60d3      	str	r3, [r2, #12]
			if(led_buffer[3] < 0){
 8000a4c:	4b31      	ldr	r3, [pc, #196]	; (8000b14 <fsm_automatic_run+0x6e8>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	da07      	bge.n	8000a64 <fsm_automatic_run+0x638>
				led_buffer[3] = 9;
 8000a54:	4b2f      	ldr	r3, [pc, #188]	; (8000b14 <fsm_automatic_run+0x6e8>)
 8000a56:	2209      	movs	r2, #9
 8000a58:	60da      	str	r2, [r3, #12]
				led_buffer[2]--;
 8000a5a:	4b2e      	ldr	r3, [pc, #184]	; (8000b14 <fsm_automatic_run+0x6e8>)
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	4a2c      	ldr	r2, [pc, #176]	; (8000b14 <fsm_automatic_run+0x6e8>)
 8000a62:	6093      	str	r3, [r2, #8]
			}
			led_buffer[1]--;
 8000a64:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <fsm_automatic_run+0x6e8>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	4a2a      	ldr	r2, [pc, #168]	; (8000b14 <fsm_automatic_run+0x6e8>)
 8000a6c:	6053      	str	r3, [r2, #4]
			if(led_buffer[1] < 0){
 8000a6e:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <fsm_automatic_run+0x6e8>)
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	da07      	bge.n	8000a86 <fsm_automatic_run+0x65a>
				led_buffer[1] = 9;
 8000a76:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <fsm_automatic_run+0x6e8>)
 8000a78:	2209      	movs	r2, #9
 8000a7a:	605a      	str	r2, [r3, #4]
				led_buffer[0]--;
 8000a7c:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <fsm_automatic_run+0x6e8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3b01      	subs	r3, #1
 8000a82:	4a24      	ldr	r2, [pc, #144]	; (8000b14 <fsm_automatic_run+0x6e8>)
 8000a84:	6013      	str	r3, [r2, #0]
			}
			setTimer(2, 1000);
 8000a86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f000 feb8 	bl	8001800 <setTimer>
		}

		//SETTING TRAFFIC LIGHTS
		if(button_flag[0] == 1){
 8000a90:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <fsm_automatic_run+0x6fc>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d115      	bne.n	8000ac4 <fsm_automatic_run+0x698>
			button_flag[0] = 0;
 8000a98:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <fsm_automatic_run+0x6fc>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
			New = 1;
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <fsm_automatic_run+0x6dc>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	601a      	str	r2, [r3, #0]
			clearLed();
 8000aa4:	f000 fd44 	bl	8001530 <clearLed>
			clear_light();
 8000aa8:	f001 f80c 	bl	8001ac4 <clear_light>
			setTimer(3, 250);
 8000aac:	21fa      	movs	r1, #250	; 0xfa
 8000aae:	2003      	movs	r0, #3
 8000ab0:	f000 fea6 	bl	8001800 <setTimer>
			setTimer(4, 500);
 8000ab4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ab8:	2004      	movs	r0, #4
 8000aba:	f000 fea1 	bl	8001800 <setTimer>
			status = RED_SETTING;
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <fsm_automatic_run+0x6f0>)
 8000ac0:	2205      	movs	r2, #5
 8000ac2:	601a      	str	r2, [r3, #0]
		}

		//MANUAL TRAFFIC LIGHTS
		if(button_flag[1] == 1){
 8000ac4:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <fsm_automatic_run+0x6fc>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d119      	bne.n	8000b00 <fsm_automatic_run+0x6d4>
			New = 1;
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <fsm_automatic_run+0x6dc>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	601a      	str	r2, [r3, #0]
			button_flag[1] = 0;
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <fsm_automatic_run+0x6fc>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	605a      	str	r2, [r3, #4]
			clearLed();
 8000ad8:	f000 fd2a 	bl	8001530 <clearLed>
			clear_light();
 8000adc:	f000 fff2 	bl	8001ac4 <clear_light>
			setTimer(3, 250);
 8000ae0:	21fa      	movs	r1, #250	; 0xfa
 8000ae2:	2003      	movs	r0, #3
 8000ae4:	f000 fe8c 	bl	8001800 <setTimer>
			status = RED_MAN;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <fsm_automatic_run+0x6f0>)
 8000aea:	2208      	movs	r2, #8
 8000aec:	601a      	str	r2, [r3, #0]
		}
		break;
 8000aee:	e007      	b.n	8000b00 <fsm_automatic_run+0x6d4>
	default:
		break;
 8000af0:	bf00      	nop
 8000af2:	e006      	b.n	8000b02 <fsm_automatic_run+0x6d6>
		break;
 8000af4:	bf00      	nop
 8000af6:	e004      	b.n	8000b02 <fsm_automatic_run+0x6d6>
		break;
 8000af8:	bf00      	nop
 8000afa:	e002      	b.n	8000b02 <fsm_automatic_run+0x6d6>
		break;
 8000afc:	bf00      	nop
 8000afe:	e000      	b.n	8000b02 <fsm_automatic_run+0x6d6>
		break;
 8000b00:	bf00      	nop
	}
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2000006c 	.word	0x2000006c
 8000b0c:	200000d0 	.word	0x200000d0
 8000b10:	66666667 	.word	0x66666667
 8000b14:	20000070 	.word	0x20000070
 8000b18:	200000a8 	.word	0x200000a8
 8000b1c:	20000064 	.word	0x20000064
 8000b20:	20000014 	.word	0x20000014
 8000b24:	20000068 	.word	0x20000068
 8000b28:	2000004c 	.word	0x2000004c

08000b2c <fsm_manual_run>:


#include "fsm_manual.h"


void fsm_manual_run(){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	switch(status){
 8000b30:	4b7b      	ldr	r3, [pc, #492]	; (8000d20 <fsm_manual_run+0x1f4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b0a      	cmp	r3, #10
 8000b36:	f000 809f 	beq.w	8000c78 <fsm_manual_run+0x14c>
 8000b3a:	2b0a      	cmp	r3, #10
 8000b3c:	f300 80e7 	bgt.w	8000d0e <fsm_manual_run+0x1e2>
 8000b40:	2b08      	cmp	r3, #8
 8000b42:	d002      	beq.n	8000b4a <fsm_manual_run+0x1e>
 8000b44:	2b09      	cmp	r3, #9
 8000b46:	d04c      	beq.n	8000be2 <fsm_manual_run+0xb6>
			button_flag[2] = 0;
			status = INIT;
		}
		break;
	default:
		break;
 8000b48:	e0e1      	b.n	8000d0e <fsm_manual_run+0x1e2>
		if(New == 1){
 8000b4a:	4b76      	ldr	r3, [pc, #472]	; (8000d24 <fsm_manual_run+0x1f8>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d109      	bne.n	8000b66 <fsm_manual_run+0x3a>
			New = 0;
 8000b52:	4b74      	ldr	r3, [pc, #464]	; (8000d24 <fsm_manual_run+0x1f8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
			led_buffer[1] = led_buffer[3] = 5;
 8000b58:	4b73      	ldr	r3, [pc, #460]	; (8000d28 <fsm_manual_run+0x1fc>)
 8000b5a:	2205      	movs	r2, #5
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	4b72      	ldr	r3, [pc, #456]	; (8000d28 <fsm_manual_run+0x1fc>)
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	4a71      	ldr	r2, [pc, #452]	; (8000d28 <fsm_manual_run+0x1fc>)
 8000b64:	6053      	str	r3, [r2, #4]
		if(idx == 4){
 8000b66:	4b71      	ldr	r3, [pc, #452]	; (8000d2c <fsm_manual_run+0x200>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	d102      	bne.n	8000b74 <fsm_manual_run+0x48>
			idx = 0;
 8000b6e:	4b6f      	ldr	r3, [pc, #444]	; (8000d2c <fsm_manual_run+0x200>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
		if(timer_flag[3] == 1){
 8000b74:	4b6e      	ldr	r3, [pc, #440]	; (8000d30 <fsm_manual_run+0x204>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d10b      	bne.n	8000b94 <fsm_manual_run+0x68>
			update7SEG(idx++);
 8000b7c:	4b6b      	ldr	r3, [pc, #428]	; (8000d2c <fsm_manual_run+0x200>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	1c5a      	adds	r2, r3, #1
 8000b82:	496a      	ldr	r1, [pc, #424]	; (8000d2c <fsm_manual_run+0x200>)
 8000b84:	600a      	str	r2, [r1, #0]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 fcf0 	bl	800156c <update7SEG>
			setTimer(3,250);
 8000b8c:	21fa      	movs	r1, #250	; 0xfa
 8000b8e:	2003      	movs	r0, #3
 8000b90:	f000 fe36 	bl	8001800 <setTimer>
		turn_red();
 8000b94:	f000 ff0c 	bl	80019b0 <turn_red>
		turn_red_2();
 8000b98:	f000 ff4c 	bl	8001a34 <turn_red_2>
		if(button_flag[1] == 1){
 8000b9c:	4b65      	ldr	r3, [pc, #404]	; (8000d34 <fsm_manual_run+0x208>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d10e      	bne.n	8000bc2 <fsm_manual_run+0x96>
			HAL_GPIO_TogglePin(test_button_GPIO_Port, test_button_Pin);
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	4864      	ldr	r0, [pc, #400]	; (8000d38 <fsm_manual_run+0x20c>)
 8000ba8:	f001 fb1f 	bl	80021ea <HAL_GPIO_TogglePin>
			New = 1;
 8000bac:	4b5d      	ldr	r3, [pc, #372]	; (8000d24 <fsm_manual_run+0x1f8>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	601a      	str	r2, [r3, #0]
			button_flag[1] = 0;
 8000bb2:	4b60      	ldr	r3, [pc, #384]	; (8000d34 <fsm_manual_run+0x208>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	605a      	str	r2, [r3, #4]
			clear_light();
 8000bb8:	f000 ff84 	bl	8001ac4 <clear_light>
			status = YELLOW_MAN;
 8000bbc:	4b58      	ldr	r3, [pc, #352]	; (8000d20 <fsm_manual_run+0x1f4>)
 8000bbe:	2209      	movs	r2, #9
 8000bc0:	601a      	str	r2, [r3, #0]
		if(button_flag[2] == 1){
 8000bc2:	4b5c      	ldr	r3, [pc, #368]	; (8000d34 <fsm_manual_run+0x208>)
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	f040 80a3 	bne.w	8000d12 <fsm_manual_run+0x1e6>
			HAL_GPIO_TogglePin(test_button_GPIO_Port, test_button_Pin);
 8000bcc:	2104      	movs	r1, #4
 8000bce:	485a      	ldr	r0, [pc, #360]	; (8000d38 <fsm_manual_run+0x20c>)
 8000bd0:	f001 fb0b 	bl	80021ea <HAL_GPIO_TogglePin>
			button_flag[2] = 0;
 8000bd4:	4b57      	ldr	r3, [pc, #348]	; (8000d34 <fsm_manual_run+0x208>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
			status = INIT;
 8000bda:	4b51      	ldr	r3, [pc, #324]	; (8000d20 <fsm_manual_run+0x1f4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
		break;
 8000be0:	e097      	b.n	8000d12 <fsm_manual_run+0x1e6>
		if(New == 1){
 8000be2:	4b50      	ldr	r3, [pc, #320]	; (8000d24 <fsm_manual_run+0x1f8>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d109      	bne.n	8000bfe <fsm_manual_run+0xd2>
			New = 0;
 8000bea:	4b4e      	ldr	r3, [pc, #312]	; (8000d24 <fsm_manual_run+0x1f8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
			led_buffer[1] = led_buffer[3] = 6;
 8000bf0:	4b4d      	ldr	r3, [pc, #308]	; (8000d28 <fsm_manual_run+0x1fc>)
 8000bf2:	2206      	movs	r2, #6
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	4b4c      	ldr	r3, [pc, #304]	; (8000d28 <fsm_manual_run+0x1fc>)
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	4a4b      	ldr	r2, [pc, #300]	; (8000d28 <fsm_manual_run+0x1fc>)
 8000bfc:	6053      	str	r3, [r2, #4]
		if(idx == 4){
 8000bfe:	4b4b      	ldr	r3, [pc, #300]	; (8000d2c <fsm_manual_run+0x200>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	d102      	bne.n	8000c0c <fsm_manual_run+0xe0>
			idx = 0;
 8000c06:	4b49      	ldr	r3, [pc, #292]	; (8000d2c <fsm_manual_run+0x200>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
		if(timer_flag[3] == 1){
 8000c0c:	4b48      	ldr	r3, [pc, #288]	; (8000d30 <fsm_manual_run+0x204>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d10b      	bne.n	8000c2c <fsm_manual_run+0x100>
			update7SEG(idx++);
 8000c14:	4b45      	ldr	r3, [pc, #276]	; (8000d2c <fsm_manual_run+0x200>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	4944      	ldr	r1, [pc, #272]	; (8000d2c <fsm_manual_run+0x200>)
 8000c1c:	600a      	str	r2, [r1, #0]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 fca4 	bl	800156c <update7SEG>
			setTimer(3,250);
 8000c24:	21fa      	movs	r1, #250	; 0xfa
 8000c26:	2003      	movs	r0, #3
 8000c28:	f000 fdea 	bl	8001800 <setTimer>
		turn_yellow();
 8000c2c:	f000 feec 	bl	8001a08 <turn_yellow>
		turn_yellow_2();
 8000c30:	f000 ff30 	bl	8001a94 <turn_yellow_2>
		if(button_flag[1] == 1){
 8000c34:	4b3f      	ldr	r3, [pc, #252]	; (8000d34 <fsm_manual_run+0x208>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d10e      	bne.n	8000c5a <fsm_manual_run+0x12e>
			HAL_GPIO_TogglePin(test_button_GPIO_Port, test_button_Pin);
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	483e      	ldr	r0, [pc, #248]	; (8000d38 <fsm_manual_run+0x20c>)
 8000c40:	f001 fad3 	bl	80021ea <HAL_GPIO_TogglePin>
			New = 1;
 8000c44:	4b37      	ldr	r3, [pc, #220]	; (8000d24 <fsm_manual_run+0x1f8>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	601a      	str	r2, [r3, #0]
			button_flag[1] = 0;
 8000c4a:	4b3a      	ldr	r3, [pc, #232]	; (8000d34 <fsm_manual_run+0x208>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	605a      	str	r2, [r3, #4]
			clear_light();
 8000c50:	f000 ff38 	bl	8001ac4 <clear_light>
			status = GREEN_MAN;
 8000c54:	4b32      	ldr	r3, [pc, #200]	; (8000d20 <fsm_manual_run+0x1f4>)
 8000c56:	220a      	movs	r2, #10
 8000c58:	601a      	str	r2, [r3, #0]
		if(button_flag[2] == 1){
 8000c5a:	4b36      	ldr	r3, [pc, #216]	; (8000d34 <fsm_manual_run+0x208>)
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d159      	bne.n	8000d16 <fsm_manual_run+0x1ea>
			HAL_GPIO_TogglePin(test_button_GPIO_Port, test_button_Pin);
 8000c62:	2104      	movs	r1, #4
 8000c64:	4834      	ldr	r0, [pc, #208]	; (8000d38 <fsm_manual_run+0x20c>)
 8000c66:	f001 fac0 	bl	80021ea <HAL_GPIO_TogglePin>
			button_flag[2] = 0;
 8000c6a:	4b32      	ldr	r3, [pc, #200]	; (8000d34 <fsm_manual_run+0x208>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
			status = INIT;
 8000c70:	4b2b      	ldr	r3, [pc, #172]	; (8000d20 <fsm_manual_run+0x1f4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
		break;
 8000c76:	e04e      	b.n	8000d16 <fsm_manual_run+0x1ea>
		if(New == 1){
 8000c78:	4b2a      	ldr	r3, [pc, #168]	; (8000d24 <fsm_manual_run+0x1f8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d109      	bne.n	8000c94 <fsm_manual_run+0x168>
			New = 0;
 8000c80:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <fsm_manual_run+0x1f8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
			led_buffer[1] = led_buffer[3] = 7;
 8000c86:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <fsm_manual_run+0x1fc>)
 8000c88:	2207      	movs	r2, #7
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <fsm_manual_run+0x1fc>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	4a25      	ldr	r2, [pc, #148]	; (8000d28 <fsm_manual_run+0x1fc>)
 8000c92:	6053      	str	r3, [r2, #4]
		if(idx == 4){
 8000c94:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <fsm_manual_run+0x200>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b04      	cmp	r3, #4
 8000c9a:	d102      	bne.n	8000ca2 <fsm_manual_run+0x176>
			idx = 0;
 8000c9c:	4b23      	ldr	r3, [pc, #140]	; (8000d2c <fsm_manual_run+0x200>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
		if(timer_flag[3] == 1){
 8000ca2:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <fsm_manual_run+0x204>)
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d10b      	bne.n	8000cc2 <fsm_manual_run+0x196>
			update7SEG(idx++);
 8000caa:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <fsm_manual_run+0x200>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	491e      	ldr	r1, [pc, #120]	; (8000d2c <fsm_manual_run+0x200>)
 8000cb2:	600a      	str	r2, [r1, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 fc59 	bl	800156c <update7SEG>
			setTimer(3,250);
 8000cba:	21fa      	movs	r1, #250	; 0xfa
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f000 fd9f 	bl	8001800 <setTimer>
		turn_green();
 8000cc2:	f000 fe8b 	bl	80019dc <turn_green>
		turn_green_2();
 8000cc6:	f000 fecd 	bl	8001a64 <turn_green_2>
		if(button_flag[1] == 1){
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <fsm_manual_run+0x208>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d10e      	bne.n	8000cf0 <fsm_manual_run+0x1c4>
			HAL_GPIO_TogglePin(test_button_GPIO_Port, test_button_Pin);
 8000cd2:	2104      	movs	r1, #4
 8000cd4:	4818      	ldr	r0, [pc, #96]	; (8000d38 <fsm_manual_run+0x20c>)
 8000cd6:	f001 fa88 	bl	80021ea <HAL_GPIO_TogglePin>
			New = 1;
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <fsm_manual_run+0x1f8>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	601a      	str	r2, [r3, #0]
			button_flag[1] = 0;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <fsm_manual_run+0x208>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	605a      	str	r2, [r3, #4]
			clear_light();
 8000ce6:	f000 feed 	bl	8001ac4 <clear_light>
			status = RED_MAN;
 8000cea:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <fsm_manual_run+0x1f4>)
 8000cec:	2208      	movs	r2, #8
 8000cee:	601a      	str	r2, [r3, #0]
		if(button_flag[2] == 1){
 8000cf0:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <fsm_manual_run+0x208>)
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d110      	bne.n	8000d1a <fsm_manual_run+0x1ee>
			HAL_GPIO_TogglePin(test_button_GPIO_Port, test_button_Pin);
 8000cf8:	2104      	movs	r1, #4
 8000cfa:	480f      	ldr	r0, [pc, #60]	; (8000d38 <fsm_manual_run+0x20c>)
 8000cfc:	f001 fa75 	bl	80021ea <HAL_GPIO_TogglePin>
			button_flag[2] = 0;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <fsm_manual_run+0x208>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
			status = INIT;
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <fsm_manual_run+0x1f4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
		break;
 8000d0c:	e005      	b.n	8000d1a <fsm_manual_run+0x1ee>
		break;
 8000d0e:	bf00      	nop
 8000d10:	e004      	b.n	8000d1c <fsm_manual_run+0x1f0>
		break;
 8000d12:	bf00      	nop
 8000d14:	e002      	b.n	8000d1c <fsm_manual_run+0x1f0>
		break;
 8000d16:	bf00      	nop
 8000d18:	e000      	b.n	8000d1c <fsm_manual_run+0x1f0>
		break;
 8000d1a:	bf00      	nop
	}

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000064 	.word	0x20000064
 8000d24:	2000006c 	.word	0x2000006c
 8000d28:	20000070 	.word	0x20000070
 8000d2c:	20000068 	.word	0x20000068
 8000d30:	200000a8 	.word	0x200000a8
 8000d34:	2000004c 	.word	0x2000004c
 8000d38:	40010800 	.word	0x40010800

08000d3c <fsm_setting_run>:
 */


#include "fsm_setting.h"

void fsm_setting_run(){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	if(idx == 4){
 8000d40:	4b9e      	ldr	r3, [pc, #632]	; (8000fbc <fsm_setting_run+0x280>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b04      	cmp	r3, #4
 8000d46:	d102      	bne.n	8000d4e <fsm_setting_run+0x12>
		idx = 0;
 8000d48:	4b9c      	ldr	r3, [pc, #624]	; (8000fbc <fsm_setting_run+0x280>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
	}
	if(timer_flag[3] == 1){
 8000d4e:	4b9c      	ldr	r3, [pc, #624]	; (8000fc0 <fsm_setting_run+0x284>)
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d10b      	bne.n	8000d6e <fsm_setting_run+0x32>
		update7SEG(idx++);
 8000d56:	4b99      	ldr	r3, [pc, #612]	; (8000fbc <fsm_setting_run+0x280>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	1c5a      	adds	r2, r3, #1
 8000d5c:	4997      	ldr	r1, [pc, #604]	; (8000fbc <fsm_setting_run+0x280>)
 8000d5e:	600a      	str	r2, [r1, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 fc03 	bl	800156c <update7SEG>
		setTimer(3,250);
 8000d66:	21fa      	movs	r1, #250	; 0xfa
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f000 fd49 	bl	8001800 <setTimer>
	}
	switch(status){
 8000d6e:	4b95      	ldr	r3, [pc, #596]	; (8000fc4 <fsm_setting_run+0x288>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b07      	cmp	r3, #7
 8000d74:	f000 8138 	beq.w	8000fe8 <fsm_setting_run+0x2ac>
 8000d78:	2b07      	cmp	r3, #7
 8000d7a:	f300 81b4 	bgt.w	80010e6 <fsm_setting_run+0x3aa>
 8000d7e:	2b05      	cmp	r3, #5
 8000d80:	d003      	beq.n	8000d8a <fsm_setting_run+0x4e>
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	f000 808d 	beq.w	8000ea2 <fsm_setting_run+0x166>
			clear_light();
			status = INIT;
		}
		break;
	default:
		break;
 8000d88:	e1ad      	b.n	80010e6 <fsm_setting_run+0x3aa>
		if(New == 1){
 8000d8a:	4b8f      	ldr	r3, [pc, #572]	; (8000fc8 <fsm_setting_run+0x28c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d10a      	bne.n	8000da8 <fsm_setting_run+0x6c>
			led_buffer[3] = mode2;
 8000d92:	4b8e      	ldr	r3, [pc, #568]	; (8000fcc <fsm_setting_run+0x290>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a8e      	ldr	r2, [pc, #568]	; (8000fd0 <fsm_setting_run+0x294>)
 8000d98:	60d3      	str	r3, [r2, #12]
			led_buffer[1] = red_time;
 8000d9a:	4b8e      	ldr	r3, [pc, #568]	; (8000fd4 <fsm_setting_run+0x298>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a8c      	ldr	r2, [pc, #560]	; (8000fd0 <fsm_setting_run+0x294>)
 8000da0:	6053      	str	r3, [r2, #4]
			New = 0;
 8000da2:	4b89      	ldr	r3, [pc, #548]	; (8000fc8 <fsm_setting_run+0x28c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
		if(timer_flag[4] == 1){
 8000da8:	4b85      	ldr	r3, [pc, #532]	; (8000fc0 <fsm_setting_run+0x284>)
 8000daa:	691b      	ldr	r3, [r3, #16]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d106      	bne.n	8000dbe <fsm_setting_run+0x82>
			setTimer(4, 500);
 8000db0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000db4:	2004      	movs	r0, #4
 8000db6:	f000 fd23 	bl	8001800 <setTimer>
			toggleRed();
 8000dba:	f000 fea9 	bl	8001b10 <toggleRed>
		if(button_flag[1] == 1){
 8000dbe:	4b86      	ldr	r3, [pc, #536]	; (8000fd8 <fsm_setting_run+0x29c>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d10b      	bne.n	8000dde <fsm_setting_run+0xa2>
			button_flag[1] = 0;
 8000dc6:	4b84      	ldr	r3, [pc, #528]	; (8000fd8 <fsm_setting_run+0x29c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	605a      	str	r2, [r3, #4]
			HAL_GPIO_TogglePin(test_button_GPIO_Port, test_button_Pin);
 8000dcc:	2104      	movs	r1, #4
 8000dce:	4883      	ldr	r0, [pc, #524]	; (8000fdc <fsm_setting_run+0x2a0>)
 8000dd0:	f001 fa0b 	bl	80021ea <HAL_GPIO_TogglePin>
			++led_buffer[1];
 8000dd4:	4b7e      	ldr	r3, [pc, #504]	; (8000fd0 <fsm_setting_run+0x294>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	4a7d      	ldr	r2, [pc, #500]	; (8000fd0 <fsm_setting_run+0x294>)
 8000ddc:	6053      	str	r3, [r2, #4]
		if(led_buffer[1] >= 10){
 8000dde:	4b7c      	ldr	r3, [pc, #496]	; (8000fd0 <fsm_setting_run+0x294>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b09      	cmp	r3, #9
 8000de4:	dd07      	ble.n	8000df6 <fsm_setting_run+0xba>
			led_buffer[0]++;
 8000de6:	4b7a      	ldr	r3, [pc, #488]	; (8000fd0 <fsm_setting_run+0x294>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	4a78      	ldr	r2, [pc, #480]	; (8000fd0 <fsm_setting_run+0x294>)
 8000dee:	6013      	str	r3, [r2, #0]
			led_buffer[1] = 0;
 8000df0:	4b77      	ldr	r3, [pc, #476]	; (8000fd0 <fsm_setting_run+0x294>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
		if((led_buffer[0]*10 + led_buffer[1]) >= 100){
 8000df6:	4b76      	ldr	r3, [pc, #472]	; (8000fd0 <fsm_setting_run+0x294>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	461a      	mov	r2, r3
 8000e04:	4b72      	ldr	r3, [pc, #456]	; (8000fd0 <fsm_setting_run+0x294>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	2b63      	cmp	r3, #99	; 0x63
 8000e0c:	dd05      	ble.n	8000e1a <fsm_setting_run+0xde>
			led_buffer[0] = 9;
 8000e0e:	4b70      	ldr	r3, [pc, #448]	; (8000fd0 <fsm_setting_run+0x294>)
 8000e10:	2209      	movs	r2, #9
 8000e12:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 9;
 8000e14:	4b6e      	ldr	r3, [pc, #440]	; (8000fd0 <fsm_setting_run+0x294>)
 8000e16:	2209      	movs	r2, #9
 8000e18:	605a      	str	r2, [r3, #4]
		if(button_flag[2] == 1){
 8000e1a:	4b6f      	ldr	r3, [pc, #444]	; (8000fd8 <fsm_setting_run+0x29c>)
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d112      	bne.n	8000e48 <fsm_setting_run+0x10c>
			button_flag[2] = 0;
 8000e22:	4b6d      	ldr	r3, [pc, #436]	; (8000fd8 <fsm_setting_run+0x29c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
			red_time = led_buffer[0]*10 + led_buffer[1];
 8000e28:	4b69      	ldr	r3, [pc, #420]	; (8000fd0 <fsm_setting_run+0x294>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b66      	ldr	r3, [pc, #408]	; (8000fd0 <fsm_setting_run+0x294>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a65      	ldr	r2, [pc, #404]	; (8000fd4 <fsm_setting_run+0x298>)
 8000e3e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(test_button_GPIO_Port, test_button_Pin);
 8000e40:	2104      	movs	r1, #4
 8000e42:	4866      	ldr	r0, [pc, #408]	; (8000fdc <fsm_setting_run+0x2a0>)
 8000e44:	f001 f9d1 	bl	80021ea <HAL_GPIO_TogglePin>
		if(red_time >= 100){
 8000e48:	4b62      	ldr	r3, [pc, #392]	; (8000fd4 <fsm_setting_run+0x298>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b63      	cmp	r3, #99	; 0x63
 8000e4e:	dd08      	ble.n	8000e62 <fsm_setting_run+0x126>
			red_time = 99;
 8000e50:	4b60      	ldr	r3, [pc, #384]	; (8000fd4 <fsm_setting_run+0x298>)
 8000e52:	2263      	movs	r2, #99	; 0x63
 8000e54:	601a      	str	r2, [r3, #0]
			led_buffer[0] = 9;
 8000e56:	4b5e      	ldr	r3, [pc, #376]	; (8000fd0 <fsm_setting_run+0x294>)
 8000e58:	2209      	movs	r2, #9
 8000e5a:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 9;
 8000e5c:	4b5c      	ldr	r3, [pc, #368]	; (8000fd0 <fsm_setting_run+0x294>)
 8000e5e:	2209      	movs	r2, #9
 8000e60:	605a      	str	r2, [r3, #4]
		if(button_flag[0] == 1){
 8000e62:	4b5d      	ldr	r3, [pc, #372]	; (8000fd8 <fsm_setting_run+0x29c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	f040 813f 	bne.w	80010ea <fsm_setting_run+0x3ae>
			HAL_GPIO_TogglePin(test_button_GPIO_Port, test_button_Pin);
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	485b      	ldr	r0, [pc, #364]	; (8000fdc <fsm_setting_run+0x2a0>)
 8000e70:	f001 f9bb 	bl	80021ea <HAL_GPIO_TogglePin>
			button_flag[0] = 0;
 8000e74:	4b58      	ldr	r3, [pc, #352]	; (8000fd8 <fsm_setting_run+0x29c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
			clearLed();
 8000e7a:	f000 fb59 	bl	8001530 <clearLed>
			clear_light();
 8000e7e:	f000 fe21 	bl	8001ac4 <clear_light>
			setTimer(3, 250);
 8000e82:	21fa      	movs	r1, #250	; 0xfa
 8000e84:	2003      	movs	r0, #3
 8000e86:	f000 fcbb 	bl	8001800 <setTimer>
			setTimer(4, 500);
 8000e8a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e8e:	2004      	movs	r0, #4
 8000e90:	f000 fcb6 	bl	8001800 <setTimer>
			New = 1;
 8000e94:	4b4c      	ldr	r3, [pc, #304]	; (8000fc8 <fsm_setting_run+0x28c>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	601a      	str	r2, [r3, #0]
			status = YELLOW_SETTING;
 8000e9a:	4b4a      	ldr	r3, [pc, #296]	; (8000fc4 <fsm_setting_run+0x288>)
 8000e9c:	2206      	movs	r2, #6
 8000e9e:	601a      	str	r2, [r3, #0]
		break;
 8000ea0:	e123      	b.n	80010ea <fsm_setting_run+0x3ae>
		if(New == 1){
 8000ea2:	4b49      	ldr	r3, [pc, #292]	; (8000fc8 <fsm_setting_run+0x28c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d10a      	bne.n	8000ec0 <fsm_setting_run+0x184>
			led_buffer[3] = mode3;
 8000eaa:	4b4d      	ldr	r3, [pc, #308]	; (8000fe0 <fsm_setting_run+0x2a4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a48      	ldr	r2, [pc, #288]	; (8000fd0 <fsm_setting_run+0x294>)
 8000eb0:	60d3      	str	r3, [r2, #12]
			led_buffer[1] = yellow_time;
 8000eb2:	4b4c      	ldr	r3, [pc, #304]	; (8000fe4 <fsm_setting_run+0x2a8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a46      	ldr	r2, [pc, #280]	; (8000fd0 <fsm_setting_run+0x294>)
 8000eb8:	6053      	str	r3, [r2, #4]
			New = 0;
 8000eba:	4b43      	ldr	r3, [pc, #268]	; (8000fc8 <fsm_setting_run+0x28c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
		if(timer_flag[4] == 1){
 8000ec0:	4b3f      	ldr	r3, [pc, #252]	; (8000fc0 <fsm_setting_run+0x284>)
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d106      	bne.n	8000ed6 <fsm_setting_run+0x19a>
			setTimer(4, 500);
 8000ec8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ecc:	2004      	movs	r0, #4
 8000ece:	f000 fc97 	bl	8001800 <setTimer>
			toggleYellow();
 8000ed2:	f000 fe2b 	bl	8001b2c <toggleYellow>
		if(button_flag[1] == 1){
 8000ed6:	4b40      	ldr	r3, [pc, #256]	; (8000fd8 <fsm_setting_run+0x29c>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d10b      	bne.n	8000ef6 <fsm_setting_run+0x1ba>
			button_flag[1] = 0;
 8000ede:	4b3e      	ldr	r3, [pc, #248]	; (8000fd8 <fsm_setting_run+0x29c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
			HAL_GPIO_TogglePin(test_button_GPIO_Port, test_button_Pin);
 8000ee4:	2104      	movs	r1, #4
 8000ee6:	483d      	ldr	r0, [pc, #244]	; (8000fdc <fsm_setting_run+0x2a0>)
 8000ee8:	f001 f97f 	bl	80021ea <HAL_GPIO_TogglePin>
			++led_buffer[1];
 8000eec:	4b38      	ldr	r3, [pc, #224]	; (8000fd0 <fsm_setting_run+0x294>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	4a37      	ldr	r2, [pc, #220]	; (8000fd0 <fsm_setting_run+0x294>)
 8000ef4:	6053      	str	r3, [r2, #4]
		if(led_buffer[1] >= 10){
 8000ef6:	4b36      	ldr	r3, [pc, #216]	; (8000fd0 <fsm_setting_run+0x294>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b09      	cmp	r3, #9
 8000efc:	dd07      	ble.n	8000f0e <fsm_setting_run+0x1d2>
			led_buffer[0]++;
 8000efe:	4b34      	ldr	r3, [pc, #208]	; (8000fd0 <fsm_setting_run+0x294>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	4a32      	ldr	r2, [pc, #200]	; (8000fd0 <fsm_setting_run+0x294>)
 8000f06:	6013      	str	r3, [r2, #0]
			led_buffer[1] = 0;
 8000f08:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <fsm_setting_run+0x294>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	605a      	str	r2, [r3, #4]
		if((led_buffer[0]*10 + led_buffer[1]) >= 100){
 8000f0e:	4b30      	ldr	r3, [pc, #192]	; (8000fd0 <fsm_setting_run+0x294>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	4613      	mov	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b2c      	ldr	r3, [pc, #176]	; (8000fd0 <fsm_setting_run+0x294>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	2b63      	cmp	r3, #99	; 0x63
 8000f24:	dd05      	ble.n	8000f32 <fsm_setting_run+0x1f6>
			led_buffer[0] = 9;
 8000f26:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <fsm_setting_run+0x294>)
 8000f28:	2209      	movs	r2, #9
 8000f2a:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 9;
 8000f2c:	4b28      	ldr	r3, [pc, #160]	; (8000fd0 <fsm_setting_run+0x294>)
 8000f2e:	2209      	movs	r2, #9
 8000f30:	605a      	str	r2, [r3, #4]
		if(button_flag[2] == 1){
 8000f32:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <fsm_setting_run+0x29c>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d112      	bne.n	8000f60 <fsm_setting_run+0x224>
			HAL_GPIO_TogglePin(test_button_GPIO_Port, test_button_Pin);
 8000f3a:	2104      	movs	r1, #4
 8000f3c:	4827      	ldr	r0, [pc, #156]	; (8000fdc <fsm_setting_run+0x2a0>)
 8000f3e:	f001 f954 	bl	80021ea <HAL_GPIO_TogglePin>
			button_flag[2] = 0;
 8000f42:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <fsm_setting_run+0x29c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
			yellow_time = led_buffer[0]*10 + led_buffer[1];
 8000f48:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <fsm_setting_run+0x294>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <fsm_setting_run+0x294>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <fsm_setting_run+0x2a8>)
 8000f5e:	6013      	str	r3, [r2, #0]
		if(yellow_time >= 100){
 8000f60:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <fsm_setting_run+0x2a8>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b63      	cmp	r3, #99	; 0x63
 8000f66:	dd08      	ble.n	8000f7a <fsm_setting_run+0x23e>
			yellow_time = 99;
 8000f68:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <fsm_setting_run+0x2a8>)
 8000f6a:	2263      	movs	r2, #99	; 0x63
 8000f6c:	601a      	str	r2, [r3, #0]
			led_buffer[0] = 9;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <fsm_setting_run+0x294>)
 8000f70:	2209      	movs	r2, #9
 8000f72:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 9;
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <fsm_setting_run+0x294>)
 8000f76:	2209      	movs	r2, #9
 8000f78:	605a      	str	r2, [r3, #4]
		if(button_flag[0] == 1){
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <fsm_setting_run+0x29c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	f040 80b5 	bne.w	80010ee <fsm_setting_run+0x3b2>
			HAL_GPIO_TogglePin(test_button_GPIO_Port, test_button_Pin);
 8000f84:	2104      	movs	r1, #4
 8000f86:	4815      	ldr	r0, [pc, #84]	; (8000fdc <fsm_setting_run+0x2a0>)
 8000f88:	f001 f92f 	bl	80021ea <HAL_GPIO_TogglePin>
			button_flag[0] = 0;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <fsm_setting_run+0x29c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
			clearLed();
 8000f92:	f000 facd 	bl	8001530 <clearLed>
			clear_light();
 8000f96:	f000 fd95 	bl	8001ac4 <clear_light>
			setTimer(3, 250);
 8000f9a:	21fa      	movs	r1, #250	; 0xfa
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f000 fc2f 	bl	8001800 <setTimer>
			setTimer(4, 500);
 8000fa2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000fa6:	2004      	movs	r0, #4
 8000fa8:	f000 fc2a 	bl	8001800 <setTimer>
			New = 1;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <fsm_setting_run+0x28c>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]
			status = GREEN_SETTING;
 8000fb2:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <fsm_setting_run+0x288>)
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	601a      	str	r2, [r3, #0]
		break;
 8000fb8:	e099      	b.n	80010ee <fsm_setting_run+0x3b2>
 8000fba:	bf00      	nop
 8000fbc:	20000068 	.word	0x20000068
 8000fc0:	200000a8 	.word	0x200000a8
 8000fc4:	20000064 	.word	0x20000064
 8000fc8:	2000006c 	.word	0x2000006c
 8000fcc:	20000018 	.word	0x20000018
 8000fd0:	20000070 	.word	0x20000070
 8000fd4:	2000000c 	.word	0x2000000c
 8000fd8:	2000004c 	.word	0x2000004c
 8000fdc:	40010800 	.word	0x40010800
 8000fe0:	2000001c 	.word	0x2000001c
 8000fe4:	20000010 	.word	0x20000010
		if(New == 1){
 8000fe8:	4b43      	ldr	r3, [pc, #268]	; (80010f8 <fsm_setting_run+0x3bc>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d10a      	bne.n	8001006 <fsm_setting_run+0x2ca>
			led_buffer[3] = mode4;
 8000ff0:	4b42      	ldr	r3, [pc, #264]	; (80010fc <fsm_setting_run+0x3c0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a42      	ldr	r2, [pc, #264]	; (8001100 <fsm_setting_run+0x3c4>)
 8000ff6:	60d3      	str	r3, [r2, #12]
			led_buffer[1] = green_time;
 8000ff8:	4b42      	ldr	r3, [pc, #264]	; (8001104 <fsm_setting_run+0x3c8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a40      	ldr	r2, [pc, #256]	; (8001100 <fsm_setting_run+0x3c4>)
 8000ffe:	6053      	str	r3, [r2, #4]
			New = 0;
 8001000:	4b3d      	ldr	r3, [pc, #244]	; (80010f8 <fsm_setting_run+0x3bc>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
		if(timer_flag[4] == 1){
 8001006:	4b40      	ldr	r3, [pc, #256]	; (8001108 <fsm_setting_run+0x3cc>)
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d106      	bne.n	800101c <fsm_setting_run+0x2e0>
			setTimer(4, 500);
 800100e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001012:	2004      	movs	r0, #4
 8001014:	f000 fbf4 	bl	8001800 <setTimer>
			toggleGreen();
 8001018:	f000 fd98 	bl	8001b4c <toggleGreen>
		if(button_flag[1] == 1){
 800101c:	4b3b      	ldr	r3, [pc, #236]	; (800110c <fsm_setting_run+0x3d0>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d10b      	bne.n	800103c <fsm_setting_run+0x300>
			button_flag[1] = 0;
 8001024:	4b39      	ldr	r3, [pc, #228]	; (800110c <fsm_setting_run+0x3d0>)
 8001026:	2200      	movs	r2, #0
 8001028:	605a      	str	r2, [r3, #4]
			HAL_GPIO_TogglePin(test_button_GPIO_Port, test_button_Pin);
 800102a:	2104      	movs	r1, #4
 800102c:	4838      	ldr	r0, [pc, #224]	; (8001110 <fsm_setting_run+0x3d4>)
 800102e:	f001 f8dc 	bl	80021ea <HAL_GPIO_TogglePin>
			++led_buffer[1];
 8001032:	4b33      	ldr	r3, [pc, #204]	; (8001100 <fsm_setting_run+0x3c4>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	3301      	adds	r3, #1
 8001038:	4a31      	ldr	r2, [pc, #196]	; (8001100 <fsm_setting_run+0x3c4>)
 800103a:	6053      	str	r3, [r2, #4]
		if(led_buffer[1] >= 10){
 800103c:	4b30      	ldr	r3, [pc, #192]	; (8001100 <fsm_setting_run+0x3c4>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b09      	cmp	r3, #9
 8001042:	dd07      	ble.n	8001054 <fsm_setting_run+0x318>
			led_buffer[0]++;
 8001044:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <fsm_setting_run+0x3c4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	3301      	adds	r3, #1
 800104a:	4a2d      	ldr	r2, [pc, #180]	; (8001100 <fsm_setting_run+0x3c4>)
 800104c:	6013      	str	r3, [r2, #0]
			led_buffer[1] = 0;
 800104e:	4b2c      	ldr	r3, [pc, #176]	; (8001100 <fsm_setting_run+0x3c4>)
 8001050:	2200      	movs	r2, #0
 8001052:	605a      	str	r2, [r3, #4]
		if((led_buffer[0]*10 + led_buffer[1]) >= 100){
 8001054:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <fsm_setting_run+0x3c4>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	461a      	mov	r2, r3
 8001062:	4b27      	ldr	r3, [pc, #156]	; (8001100 <fsm_setting_run+0x3c4>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	4413      	add	r3, r2
 8001068:	2b63      	cmp	r3, #99	; 0x63
 800106a:	dd05      	ble.n	8001078 <fsm_setting_run+0x33c>
			led_buffer[0] = 9;
 800106c:	4b24      	ldr	r3, [pc, #144]	; (8001100 <fsm_setting_run+0x3c4>)
 800106e:	2209      	movs	r2, #9
 8001070:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 9;
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <fsm_setting_run+0x3c4>)
 8001074:	2209      	movs	r2, #9
 8001076:	605a      	str	r2, [r3, #4]
		if(button_flag[2] == 1){
 8001078:	4b24      	ldr	r3, [pc, #144]	; (800110c <fsm_setting_run+0x3d0>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d112      	bne.n	80010a6 <fsm_setting_run+0x36a>
			HAL_GPIO_TogglePin(test_button_GPIO_Port, test_button_Pin);
 8001080:	2104      	movs	r1, #4
 8001082:	4823      	ldr	r0, [pc, #140]	; (8001110 <fsm_setting_run+0x3d4>)
 8001084:	f001 f8b1 	bl	80021ea <HAL_GPIO_TogglePin>
			button_flag[2] = 0;
 8001088:	4b20      	ldr	r3, [pc, #128]	; (800110c <fsm_setting_run+0x3d0>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
			green_time = led_buffer[0]*10 + led_buffer[1];
 800108e:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <fsm_setting_run+0x3c4>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	461a      	mov	r2, r3
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <fsm_setting_run+0x3c4>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	4a18      	ldr	r2, [pc, #96]	; (8001104 <fsm_setting_run+0x3c8>)
 80010a4:	6013      	str	r3, [r2, #0]
		if(green_time >= 100){
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <fsm_setting_run+0x3c8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b63      	cmp	r3, #99	; 0x63
 80010ac:	dd08      	ble.n	80010c0 <fsm_setting_run+0x384>
			green_time = 99;
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <fsm_setting_run+0x3c8>)
 80010b0:	2263      	movs	r2, #99	; 0x63
 80010b2:	601a      	str	r2, [r3, #0]
			led_buffer[0] = 9;
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <fsm_setting_run+0x3c4>)
 80010b6:	2209      	movs	r2, #9
 80010b8:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 9;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <fsm_setting_run+0x3c4>)
 80010bc:	2209      	movs	r2, #9
 80010be:	605a      	str	r2, [r3, #4]
		if(button_flag[0] == 1){
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <fsm_setting_run+0x3d0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d114      	bne.n	80010f2 <fsm_setting_run+0x3b6>
			HAL_GPIO_TogglePin(test_button_GPIO_Port, test_button_Pin);
 80010c8:	2104      	movs	r1, #4
 80010ca:	4811      	ldr	r0, [pc, #68]	; (8001110 <fsm_setting_run+0x3d4>)
 80010cc:	f001 f88d 	bl	80021ea <HAL_GPIO_TogglePin>
			button_flag[0] = 0;
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <fsm_setting_run+0x3d0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
			clearLed();
 80010d6:	f000 fa2b 	bl	8001530 <clearLed>
			clear_light();
 80010da:	f000 fcf3 	bl	8001ac4 <clear_light>
			status = INIT;
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <fsm_setting_run+0x3d8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
		break;
 80010e4:	e005      	b.n	80010f2 <fsm_setting_run+0x3b6>
		break;
 80010e6:	bf00      	nop
 80010e8:	e004      	b.n	80010f4 <fsm_setting_run+0x3b8>
		break;
 80010ea:	bf00      	nop
 80010ec:	e002      	b.n	80010f4 <fsm_setting_run+0x3b8>
		break;
 80010ee:	bf00      	nop
 80010f0:	e000      	b.n	80010f4 <fsm_setting_run+0x3b8>
		break;
 80010f2:	bf00      	nop
	}
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	2000006c 	.word	0x2000006c
 80010fc:	20000020 	.word	0x20000020
 8001100:	20000070 	.word	0x20000070
 8001104:	20000014 	.word	0x20000014
 8001108:	200000a8 	.word	0x200000a8
 800110c:	2000004c 	.word	0x2000004c
 8001110:	40010800 	.word	0x40010800
 8001114:	20000064 	.word	0x20000064

08001118 <display7SEG>:

#include "led7_segment.h"


int led_buffer[4] = {0};
void display7SEG(int num){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b09      	cmp	r3, #9
 8001124:	f200 8180 	bhi.w	8001428 <display7SEG+0x310>
 8001128:	a201      	add	r2, pc, #4	; (adr r2, 8001130 <display7SEG+0x18>)
 800112a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112e:	bf00      	nop
 8001130:	08001159 	.word	0x08001159
 8001134:	080011a1 	.word	0x080011a1
 8001138:	080011e9 	.word	0x080011e9
 800113c:	08001231 	.word	0x08001231
 8001140:	08001279 	.word	0x08001279
 8001144:	080012c1 	.word	0x080012c1
 8001148:	08001309 	.word	0x08001309
 800114c:	08001351 	.word	0x08001351
 8001150:	08001399 	.word	0x08001399
 8001154:	080013e1 	.word	0x080013e1
	 //1
	 switch(num){
	 case 0:
		 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	2101      	movs	r1, #1
 800115c:	48b4      	ldr	r0, [pc, #720]	; (8001430 <display7SEG+0x318>)
 800115e:	f001 f82c 	bl	80021ba <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	2102      	movs	r1, #2
 8001166:	48b2      	ldr	r0, [pc, #712]	; (8001430 <display7SEG+0x318>)
 8001168:	f001 f827 	bl	80021ba <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	2104      	movs	r1, #4
 8001170:	48af      	ldr	r0, [pc, #700]	; (8001430 <display7SEG+0x318>)
 8001172:	f001 f822 	bl	80021ba <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	2108      	movs	r1, #8
 800117a:	48ad      	ldr	r0, [pc, #692]	; (8001430 <display7SEG+0x318>)
 800117c:	f001 f81d 	bl	80021ba <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2110      	movs	r1, #16
 8001184:	48aa      	ldr	r0, [pc, #680]	; (8001430 <display7SEG+0x318>)
 8001186:	f001 f818 	bl	80021ba <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2120      	movs	r1, #32
 800118e:	48a8      	ldr	r0, [pc, #672]	; (8001430 <display7SEG+0x318>)
 8001190:	f001 f813 	bl	80021ba <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	2140      	movs	r1, #64	; 0x40
 8001198:	48a5      	ldr	r0, [pc, #660]	; (8001430 <display7SEG+0x318>)
 800119a:	f001 f80e 	bl	80021ba <HAL_GPIO_WritePin>
	 break;
 800119e:	e143      	b.n	8001428 <display7SEG+0x310>
	 case 1:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2101      	movs	r1, #1
 80011a4:	48a2      	ldr	r0, [pc, #648]	; (8001430 <display7SEG+0x318>)
 80011a6:	f001 f808 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2102      	movs	r1, #2
 80011ae:	48a0      	ldr	r0, [pc, #640]	; (8001430 <display7SEG+0x318>)
 80011b0:	f001 f803 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2104      	movs	r1, #4
 80011b8:	489d      	ldr	r0, [pc, #628]	; (8001430 <display7SEG+0x318>)
 80011ba:	f000 fffe 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	2108      	movs	r1, #8
 80011c2:	489b      	ldr	r0, [pc, #620]	; (8001430 <display7SEG+0x318>)
 80011c4:	f000 fff9 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2110      	movs	r1, #16
 80011cc:	4898      	ldr	r0, [pc, #608]	; (8001430 <display7SEG+0x318>)
 80011ce:	f000 fff4 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2120      	movs	r1, #32
 80011d6:	4896      	ldr	r0, [pc, #600]	; (8001430 <display7SEG+0x318>)
 80011d8:	f000 ffef 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	2140      	movs	r1, #64	; 0x40
 80011e0:	4893      	ldr	r0, [pc, #588]	; (8001430 <display7SEG+0x318>)
 80011e2:	f000 ffea 	bl	80021ba <HAL_GPIO_WritePin>
	 	 break;
 80011e6:	e11f      	b.n	8001428 <display7SEG+0x310>
	 case 2:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2101      	movs	r1, #1
 80011ec:	4890      	ldr	r0, [pc, #576]	; (8001430 <display7SEG+0x318>)
 80011ee:	f000 ffe4 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2102      	movs	r1, #2
 80011f6:	488e      	ldr	r0, [pc, #568]	; (8001430 <display7SEG+0x318>)
 80011f8:	f000 ffdf 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2104      	movs	r1, #4
 8001200:	488b      	ldr	r0, [pc, #556]	; (8001430 <display7SEG+0x318>)
 8001202:	f000 ffda 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	2108      	movs	r1, #8
 800120a:	4889      	ldr	r0, [pc, #548]	; (8001430 <display7SEG+0x318>)
 800120c:	f000 ffd5 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	2110      	movs	r1, #16
 8001214:	4886      	ldr	r0, [pc, #536]	; (8001430 <display7SEG+0x318>)
 8001216:	f000 ffd0 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 800121a:	2201      	movs	r2, #1
 800121c:	2120      	movs	r1, #32
 800121e:	4884      	ldr	r0, [pc, #528]	; (8001430 <display7SEG+0x318>)
 8001220:	f000 ffcb 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	2140      	movs	r1, #64	; 0x40
 8001228:	4881      	ldr	r0, [pc, #516]	; (8001430 <display7SEG+0x318>)
 800122a:	f000 ffc6 	bl	80021ba <HAL_GPIO_WritePin>
	 	 break;
 800122e:	e0fb      	b.n	8001428 <display7SEG+0x310>
	 case 3:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	2101      	movs	r1, #1
 8001234:	487e      	ldr	r0, [pc, #504]	; (8001430 <display7SEG+0x318>)
 8001236:	f000 ffc0 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	2102      	movs	r1, #2
 800123e:	487c      	ldr	r0, [pc, #496]	; (8001430 <display7SEG+0x318>)
 8001240:	f000 ffbb 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	2104      	movs	r1, #4
 8001248:	4879      	ldr	r0, [pc, #484]	; (8001430 <display7SEG+0x318>)
 800124a:	f000 ffb6 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2108      	movs	r1, #8
 8001252:	4877      	ldr	r0, [pc, #476]	; (8001430 <display7SEG+0x318>)
 8001254:	f000 ffb1 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2110      	movs	r1, #16
 800125c:	4874      	ldr	r0, [pc, #464]	; (8001430 <display7SEG+0x318>)
 800125e:	f000 ffac 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	2120      	movs	r1, #32
 8001266:	4872      	ldr	r0, [pc, #456]	; (8001430 <display7SEG+0x318>)
 8001268:	f000 ffa7 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	2140      	movs	r1, #64	; 0x40
 8001270:	486f      	ldr	r0, [pc, #444]	; (8001430 <display7SEG+0x318>)
 8001272:	f000 ffa2 	bl	80021ba <HAL_GPIO_WritePin>
	 	 break;
 8001276:	e0d7      	b.n	8001428 <display7SEG+0x310>
	 case 4:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 8001278:	2201      	movs	r2, #1
 800127a:	2101      	movs	r1, #1
 800127c:	486c      	ldr	r0, [pc, #432]	; (8001430 <display7SEG+0x318>)
 800127e:	f000 ff9c 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	2102      	movs	r1, #2
 8001286:	486a      	ldr	r0, [pc, #424]	; (8001430 <display7SEG+0x318>)
 8001288:	f000 ff97 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	2104      	movs	r1, #4
 8001290:	4867      	ldr	r0, [pc, #412]	; (8001430 <display7SEG+0x318>)
 8001292:	f000 ff92 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8001296:	2201      	movs	r2, #1
 8001298:	2108      	movs	r1, #8
 800129a:	4865      	ldr	r0, [pc, #404]	; (8001430 <display7SEG+0x318>)
 800129c:	f000 ff8d 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	2110      	movs	r1, #16
 80012a4:	4862      	ldr	r0, [pc, #392]	; (8001430 <display7SEG+0x318>)
 80012a6:	f000 ff88 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2120      	movs	r1, #32
 80012ae:	4860      	ldr	r0, [pc, #384]	; (8001430 <display7SEG+0x318>)
 80012b0:	f000 ff83 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2140      	movs	r1, #64	; 0x40
 80012b8:	485d      	ldr	r0, [pc, #372]	; (8001430 <display7SEG+0x318>)
 80012ba:	f000 ff7e 	bl	80021ba <HAL_GPIO_WritePin>
	 	 break;
 80012be:	e0b3      	b.n	8001428 <display7SEG+0x310>
	 case 5:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2101      	movs	r1, #1
 80012c4:	485a      	ldr	r0, [pc, #360]	; (8001430 <display7SEG+0x318>)
 80012c6:	f000 ff78 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 80012ca:	2201      	movs	r2, #1
 80012cc:	2102      	movs	r1, #2
 80012ce:	4858      	ldr	r0, [pc, #352]	; (8001430 <display7SEG+0x318>)
 80012d0:	f000 ff73 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2104      	movs	r1, #4
 80012d8:	4855      	ldr	r0, [pc, #340]	; (8001430 <display7SEG+0x318>)
 80012da:	f000 ff6e 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2108      	movs	r1, #8
 80012e2:	4853      	ldr	r0, [pc, #332]	; (8001430 <display7SEG+0x318>)
 80012e4:	f000 ff69 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 80012e8:	2201      	movs	r2, #1
 80012ea:	2110      	movs	r1, #16
 80012ec:	4850      	ldr	r0, [pc, #320]	; (8001430 <display7SEG+0x318>)
 80012ee:	f000 ff64 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2120      	movs	r1, #32
 80012f6:	484e      	ldr	r0, [pc, #312]	; (8001430 <display7SEG+0x318>)
 80012f8:	f000 ff5f 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2140      	movs	r1, #64	; 0x40
 8001300:	484b      	ldr	r0, [pc, #300]	; (8001430 <display7SEG+0x318>)
 8001302:	f000 ff5a 	bl	80021ba <HAL_GPIO_WritePin>
	 	 break;
 8001306:	e08f      	b.n	8001428 <display7SEG+0x310>
	 case 6:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	2101      	movs	r1, #1
 800130c:	4848      	ldr	r0, [pc, #288]	; (8001430 <display7SEG+0x318>)
 800130e:	f000 ff54 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 8001312:	2201      	movs	r2, #1
 8001314:	2102      	movs	r1, #2
 8001316:	4846      	ldr	r0, [pc, #280]	; (8001430 <display7SEG+0x318>)
 8001318:	f000 ff4f 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	2104      	movs	r1, #4
 8001320:	4843      	ldr	r0, [pc, #268]	; (8001430 <display7SEG+0x318>)
 8001322:	f000 ff4a 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2108      	movs	r1, #8
 800132a:	4841      	ldr	r0, [pc, #260]	; (8001430 <display7SEG+0x318>)
 800132c:	f000 ff45 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	2110      	movs	r1, #16
 8001334:	483e      	ldr	r0, [pc, #248]	; (8001430 <display7SEG+0x318>)
 8001336:	f000 ff40 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2120      	movs	r1, #32
 800133e:	483c      	ldr	r0, [pc, #240]	; (8001430 <display7SEG+0x318>)
 8001340:	f000 ff3b 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	2140      	movs	r1, #64	; 0x40
 8001348:	4839      	ldr	r0, [pc, #228]	; (8001430 <display7SEG+0x318>)
 800134a:	f000 ff36 	bl	80021ba <HAL_GPIO_WritePin>
	 	 break;
 800134e:	e06b      	b.n	8001428 <display7SEG+0x310>
	 case 7:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	2101      	movs	r1, #1
 8001354:	4836      	ldr	r0, [pc, #216]	; (8001430 <display7SEG+0x318>)
 8001356:	f000 ff30 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	2102      	movs	r1, #2
 800135e:	4834      	ldr	r0, [pc, #208]	; (8001430 <display7SEG+0x318>)
 8001360:	f000 ff2b 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	2104      	movs	r1, #4
 8001368:	4831      	ldr	r0, [pc, #196]	; (8001430 <display7SEG+0x318>)
 800136a:	f000 ff26 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 800136e:	2201      	movs	r2, #1
 8001370:	2108      	movs	r1, #8
 8001372:	482f      	ldr	r0, [pc, #188]	; (8001430 <display7SEG+0x318>)
 8001374:	f000 ff21 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8001378:	2201      	movs	r2, #1
 800137a:	2110      	movs	r1, #16
 800137c:	482c      	ldr	r0, [pc, #176]	; (8001430 <display7SEG+0x318>)
 800137e:	f000 ff1c 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8001382:	2201      	movs	r2, #1
 8001384:	2120      	movs	r1, #32
 8001386:	482a      	ldr	r0, [pc, #168]	; (8001430 <display7SEG+0x318>)
 8001388:	f000 ff17 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_SET);
 800138c:	2201      	movs	r2, #1
 800138e:	2140      	movs	r1, #64	; 0x40
 8001390:	4827      	ldr	r0, [pc, #156]	; (8001430 <display7SEG+0x318>)
 8001392:	f000 ff12 	bl	80021ba <HAL_GPIO_WritePin>
	 	 break;
 8001396:	e047      	b.n	8001428 <display7SEG+0x310>
	 case 8:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	2101      	movs	r1, #1
 800139c:	4824      	ldr	r0, [pc, #144]	; (8001430 <display7SEG+0x318>)
 800139e:	f000 ff0c 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2102      	movs	r1, #2
 80013a6:	4822      	ldr	r0, [pc, #136]	; (8001430 <display7SEG+0x318>)
 80013a8:	f000 ff07 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2104      	movs	r1, #4
 80013b0:	481f      	ldr	r0, [pc, #124]	; (8001430 <display7SEG+0x318>)
 80013b2:	f000 ff02 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2108      	movs	r1, #8
 80013ba:	481d      	ldr	r0, [pc, #116]	; (8001430 <display7SEG+0x318>)
 80013bc:	f000 fefd 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2110      	movs	r1, #16
 80013c4:	481a      	ldr	r0, [pc, #104]	; (8001430 <display7SEG+0x318>)
 80013c6:	f000 fef8 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2120      	movs	r1, #32
 80013ce:	4818      	ldr	r0, [pc, #96]	; (8001430 <display7SEG+0x318>)
 80013d0:	f000 fef3 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2140      	movs	r1, #64	; 0x40
 80013d8:	4815      	ldr	r0, [pc, #84]	; (8001430 <display7SEG+0x318>)
 80013da:	f000 feee 	bl	80021ba <HAL_GPIO_WritePin>
	 	 break;
 80013de:	e023      	b.n	8001428 <display7SEG+0x310>
	 case 9:
	 	 HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2101      	movs	r1, #1
 80013e4:	4812      	ldr	r0, [pc, #72]	; (8001430 <display7SEG+0x318>)
 80013e6:	f000 fee8 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2102      	movs	r1, #2
 80013ee:	4810      	ldr	r0, [pc, #64]	; (8001430 <display7SEG+0x318>)
 80013f0:	f000 fee3 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2104      	movs	r1, #4
 80013f8:	480d      	ldr	r0, [pc, #52]	; (8001430 <display7SEG+0x318>)
 80013fa:	f000 fede 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	2108      	movs	r1, #8
 8001402:	480b      	ldr	r0, [pc, #44]	; (8001430 <display7SEG+0x318>)
 8001404:	f000 fed9 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8001408:	2201      	movs	r2, #1
 800140a:	2110      	movs	r1, #16
 800140c:	4808      	ldr	r0, [pc, #32]	; (8001430 <display7SEG+0x318>)
 800140e:	f000 fed4 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2120      	movs	r1, #32
 8001416:	4806      	ldr	r0, [pc, #24]	; (8001430 <display7SEG+0x318>)
 8001418:	f000 fecf 	bl	80021ba <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG_7_GPIO_Port, SEG_7_Pin, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	2140      	movs	r1, #64	; 0x40
 8001420:	4803      	ldr	r0, [pc, #12]	; (8001430 <display7SEG+0x318>)
 8001422:	f000 feca 	bl	80021ba <HAL_GPIO_WritePin>
	 	 break;
 8001426:	bf00      	nop
	 }
 }
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40010c00 	.word	0x40010c00

08001434 <enableLed>:



void enableLed(int index){
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b03      	cmp	r3, #3
 8001440:	d86e      	bhi.n	8001520 <enableLed+0xec>
 8001442:	a201      	add	r2, pc, #4	; (adr r2, 8001448 <enableLed+0x14>)
 8001444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001448:	08001459 	.word	0x08001459
 800144c:	0800148b 	.word	0x0800148b
 8001450:	080014bd 	.word	0x080014bd
 8001454:	080014ef 	.word	0x080014ef
	switch(index){
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8001458:	2201      	movs	r2, #1
 800145a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800145e:	4833      	ldr	r0, [pc, #204]	; (800152c <enableLed+0xf8>)
 8001460:	f000 feab 	bl	80021ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800146a:	4830      	ldr	r0, [pc, #192]	; (800152c <enableLed+0xf8>)
 800146c:	f000 fea5 	bl	80021ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001476:	482d      	ldr	r0, [pc, #180]	; (800152c <enableLed+0xf8>)
 8001478:	f000 fe9f 	bl	80021ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001482:	482a      	ldr	r0, [pc, #168]	; (800152c <enableLed+0xf8>)
 8001484:	f000 fe99 	bl	80021ba <HAL_GPIO_WritePin>
		break;
 8001488:	e04b      	b.n	8001522 <enableLed+0xee>
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001490:	4826      	ldr	r0, [pc, #152]	; (800152c <enableLed+0xf8>)
 8001492:	f000 fe92 	bl	80021ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001496:	2201      	movs	r2, #1
 8001498:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800149c:	4823      	ldr	r0, [pc, #140]	; (800152c <enableLed+0xf8>)
 800149e:	f000 fe8c 	bl	80021ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014a8:	4820      	ldr	r0, [pc, #128]	; (800152c <enableLed+0xf8>)
 80014aa:	f000 fe86 	bl	80021ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b4:	481d      	ldr	r0, [pc, #116]	; (800152c <enableLed+0xf8>)
 80014b6:	f000 fe80 	bl	80021ba <HAL_GPIO_WritePin>
		break;
 80014ba:	e032      	b.n	8001522 <enableLed+0xee>
	case 2:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c2:	481a      	ldr	r0, [pc, #104]	; (800152c <enableLed+0xf8>)
 80014c4:	f000 fe79 	bl	80021ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ce:	4817      	ldr	r0, [pc, #92]	; (800152c <enableLed+0xf8>)
 80014d0:	f000 fe73 	bl	80021ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80014d4:	2201      	movs	r2, #1
 80014d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014da:	4814      	ldr	r0, [pc, #80]	; (800152c <enableLed+0xf8>)
 80014dc:	f000 fe6d 	bl	80021ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014e6:	4811      	ldr	r0, [pc, #68]	; (800152c <enableLed+0xf8>)
 80014e8:	f000 fe67 	bl	80021ba <HAL_GPIO_WritePin>
		break;
 80014ec:	e019      	b.n	8001522 <enableLed+0xee>
	case 3:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <enableLed+0xf8>)
 80014f6:	f000 fe60 	bl	80021ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001500:	480a      	ldr	r0, [pc, #40]	; (800152c <enableLed+0xf8>)
 8001502:	f000 fe5a 	bl	80021ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800150c:	4807      	ldr	r0, [pc, #28]	; (800152c <enableLed+0xf8>)
 800150e:	f000 fe54 	bl	80021ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001512:	2201      	movs	r2, #1
 8001514:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001518:	4804      	ldr	r0, [pc, #16]	; (800152c <enableLed+0xf8>)
 800151a:	f000 fe4e 	bl	80021ba <HAL_GPIO_WritePin>
		break;
 800151e:	e000      	b.n	8001522 <enableLed+0xee>
	default:
		break;
 8001520:	bf00      	nop
	}
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40010800 	.word	0x40010800

08001530 <clearLed>:

void clearLed(){
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800153a:	480b      	ldr	r0, [pc, #44]	; (8001568 <clearLed+0x38>)
 800153c:	f000 fe3d 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001546:	4808      	ldr	r0, [pc, #32]	; (8001568 <clearLed+0x38>)
 8001548:	f000 fe37 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <clearLed+0x38>)
 8001554:	f000 fe31 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800155e:	4802      	ldr	r0, [pc, #8]	; (8001568 <clearLed+0x38>)
 8001560:	f000 fe2b 	bl	80021ba <HAL_GPIO_WritePin>
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40010800 	.word	0x40010800

0800156c <update7SEG>:

void update7SEG(int index){
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	enableLed(index);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff5d 	bl	8001434 <enableLed>
	display7SEG(led_buffer[index]);
 800157a:	4a05      	ldr	r2, [pc, #20]	; (8001590 <update7SEG+0x24>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fdc8 	bl	8001118 <display7SEG>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000070 	.word	0x20000070

08001594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001598:	f000 fb0e 	bl	8001bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800159c:	f000 f826 	bl	80015ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80015a0:	f000 f860 	bl	8001664 <MX_TIM2_Init>
  MX_GPIO_Init();
 80015a4:	f000 f8aa 	bl	80016fc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80015a8:	480d      	ldr	r0, [pc, #52]	; (80015e0 <main+0x4c>)
 80015aa:	f001 fa63 	bl	8002a74 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(5, 1000);
 80015ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015b2:	2005      	movs	r0, #5
 80015b4:	f000 f924 	bl	8001800 <setTimer>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(timer_flag[5] == 1){
 80015b8:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <main+0x50>)
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d108      	bne.n	80015d2 <main+0x3e>
		  setTimer(5,1000);
 80015c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015c4:	2005      	movs	r0, #5
 80015c6:	f000 f91b 	bl	8001800 <setTimer>
		  HAL_GPIO_TogglePin(test_timer_GPIO_Port, test_timer_Pin);
 80015ca:	2102      	movs	r1, #2
 80015cc:	4806      	ldr	r0, [pc, #24]	; (80015e8 <main+0x54>)
 80015ce:	f000 fe0c 	bl	80021ea <HAL_GPIO_TogglePin>
	  }
	  fsm_automatic_run();
 80015d2:	f7fe ff2b 	bl	800042c <fsm_automatic_run>
	  fsm_setting_run();
 80015d6:	f7ff fbb1 	bl	8000d3c <fsm_setting_run>
	  fsm_manual_run();
 80015da:	f7ff faa7 	bl	8000b2c <fsm_manual_run>
	  if(timer_flag[5] == 1){
 80015de:	e7eb      	b.n	80015b8 <main+0x24>
 80015e0:	200000dc 	.word	0x200000dc
 80015e4:	200000a8 	.word	0x200000a8
 80015e8:	40010800 	.word	0x40010800

080015ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b090      	sub	sp, #64	; 0x40
 80015f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f2:	f107 0318 	add.w	r3, r7, #24
 80015f6:	2228      	movs	r2, #40	; 0x28
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f001 fdea 	bl	80031d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800160e:	2302      	movs	r3, #2
 8001610:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001612:	2301      	movs	r3, #1
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001616:	2310      	movs	r3, #16
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800161a:	2300      	movs	r3, #0
 800161c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161e:	f107 0318 	add.w	r3, r7, #24
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fdfa 	bl	800221c <HAL_RCC_OscConfig>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800162e:	f000 f8e1 	bl	80017f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001632:	230f      	movs	r3, #15
 8001634:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f001 f866 	bl	800271c <HAL_RCC_ClockConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001656:	f000 f8cd 	bl	80017f4 <Error_Handler>
  }
}
 800165a:	bf00      	nop
 800165c:	3740      	adds	r7, #64	; 0x40
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001678:	463b      	mov	r3, r7
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <MX_TIM2_Init+0x94>)
 8001682:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001686:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001688:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <MX_TIM2_Init+0x94>)
 800168a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800168e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <MX_TIM2_Init+0x94>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <MX_TIM2_Init+0x94>)
 8001698:	2209      	movs	r2, #9
 800169a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <MX_TIM2_Init+0x94>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <MX_TIM2_Init+0x94>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016a8:	4813      	ldr	r0, [pc, #76]	; (80016f8 <MX_TIM2_Init+0x94>)
 80016aa:	f001 f993 	bl	80029d4 <HAL_TIM_Base_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016b4:	f000 f89e 	bl	80017f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016be:	f107 0308 	add.w	r3, r7, #8
 80016c2:	4619      	mov	r1, r3
 80016c4:	480c      	ldr	r0, [pc, #48]	; (80016f8 <MX_TIM2_Init+0x94>)
 80016c6:	f001 fb11 	bl	8002cec <HAL_TIM_ConfigClockSource>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016d0:	f000 f890 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d4:	2300      	movs	r3, #0
 80016d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016dc:	463b      	mov	r3, r7
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_TIM2_Init+0x94>)
 80016e2:	f001 fce9 	bl	80030b8 <HAL_TIMEx_MasterConfigSynchronization>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016ec:	f000 f882 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	200000dc 	.word	0x200000dc

080016fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001710:	4b2e      	ldr	r3, [pc, #184]	; (80017cc <MX_GPIO_Init+0xd0>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4a2d      	ldr	r2, [pc, #180]	; (80017cc <MX_GPIO_Init+0xd0>)
 8001716:	f043 0310 	orr.w	r3, r3, #16
 800171a:	6193      	str	r3, [r2, #24]
 800171c:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <MX_GPIO_Init+0xd0>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0310 	and.w	r3, r3, #16
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001728:	4b28      	ldr	r3, [pc, #160]	; (80017cc <MX_GPIO_Init+0xd0>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	4a27      	ldr	r2, [pc, #156]	; (80017cc <MX_GPIO_Init+0xd0>)
 800172e:	f043 0304 	orr.w	r3, r3, #4
 8001732:	6193      	str	r3, [r2, #24]
 8001734:	4b25      	ldr	r3, [pc, #148]	; (80017cc <MX_GPIO_Init+0xd0>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001740:	4b22      	ldr	r3, [pc, #136]	; (80017cc <MX_GPIO_Init+0xd0>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	4a21      	ldr	r2, [pc, #132]	; (80017cc <MX_GPIO_Init+0xd0>)
 8001746:	f043 0308 	orr.w	r3, r3, #8
 800174a:	6193      	str	r3, [r2, #24]
 800174c:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <MX_GPIO_Init+0xd0>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, test_timer_Pin|test_button_Pin|LED_RED_Pin|LED_YELLOW_Pin
 8001758:	2200      	movs	r2, #0
 800175a:	f24f 31f6 	movw	r1, #62454	; 0xf3f6
 800175e:	481c      	ldr	r0, [pc, #112]	; (80017d0 <MX_GPIO_Init+0xd4>)
 8001760:	f000 fd2b 	bl	80021ba <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin|LED_RED_2_Pin|LED_YELLOW_2_Pin|LED_GREEN_2_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_4_Pin
 8001764:	2200      	movs	r2, #0
 8001766:	217f      	movs	r1, #127	; 0x7f
 8001768:	481a      	ldr	r0, [pc, #104]	; (80017d4 <MX_GPIO_Init+0xd8>)
 800176a:	f000 fd26 	bl	80021ba <HAL_GPIO_WritePin>
                          |SEG_5_Pin|SEG_6_Pin|SEG_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 800176e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001778:	2301      	movs	r3, #1
 800177a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	4619      	mov	r1, r3
 8001782:	4815      	ldr	r0, [pc, #84]	; (80017d8 <MX_GPIO_Init+0xdc>)
 8001784:	f000 fb88 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : test_timer_Pin test_button_Pin LED_RED_Pin LED_YELLOW_Pin
                           LED_GREEN_Pin LED_RED_2_Pin LED_YELLOW_2_Pin LED_GREEN_2_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = test_timer_Pin|test_button_Pin|LED_RED_Pin|LED_YELLOW_Pin
 8001788:	f24f 33f6 	movw	r3, #62454	; 0xf3f6
 800178c:	613b      	str	r3, [r7, #16]
                          |LED_GREEN_Pin|LED_RED_2_Pin|LED_YELLOW_2_Pin|LED_GREEN_2_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178e:	2301      	movs	r3, #1
 8001790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	2302      	movs	r3, #2
 8001798:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179a:	f107 0310 	add.w	r3, r7, #16
 800179e:	4619      	mov	r1, r3
 80017a0:	480b      	ldr	r0, [pc, #44]	; (80017d0 <MX_GPIO_Init+0xd4>)
 80017a2:	f000 fb79 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_1_Pin SEG_2_Pin SEG_3_Pin SEG_4_Pin
                           SEG_5_Pin SEG_6_Pin SEG_7_Pin */
  GPIO_InitStruct.Pin = SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_4_Pin
 80017a6:	237f      	movs	r3, #127	; 0x7f
 80017a8:	613b      	str	r3, [r7, #16]
                          |SEG_5_Pin|SEG_6_Pin|SEG_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017aa:	2301      	movs	r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2302      	movs	r3, #2
 80017b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b6:	f107 0310 	add.w	r3, r7, #16
 80017ba:	4619      	mov	r1, r3
 80017bc:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_GPIO_Init+0xd8>)
 80017be:	f000 fb6b 	bl	8001e98 <HAL_GPIO_Init>

}
 80017c2:	bf00      	nop
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40010800 	.word	0x40010800
 80017d4:	40010c00 	.word	0x40010c00
 80017d8:	40011000 	.word	0x40011000

080017dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	timerRun();
 80017e4:	f000 f82c 	bl	8001840 <timerRun>
	getKeyInput();
 80017e8:	f7fe fcb0 	bl	800014c <getKeyInput>
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
}
 80017fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017fc:	e7fe      	b.n	80017fc <Error_Handler+0x8>
	...

08001800 <setTimer>:
#define ClockCycle 10

int timer_counter[10] = {0};
int timer_flag[10] = {0};

void setTimer(int index, int duration){
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/ClockCycle;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	4a09      	ldr	r2, [pc, #36]	; (8001834 <setTimer+0x34>)
 800180e:	fb82 1203 	smull	r1, r2, r2, r3
 8001812:	1092      	asrs	r2, r2, #2
 8001814:	17db      	asrs	r3, r3, #31
 8001816:	1ad2      	subs	r2, r2, r3
 8001818:	4907      	ldr	r1, [pc, #28]	; (8001838 <setTimer+0x38>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001820:	4a06      	ldr	r2, [pc, #24]	; (800183c <setTimer+0x3c>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2100      	movs	r1, #0
 8001826:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	66666667 	.word	0x66666667
 8001838:	20000080 	.word	0x20000080
 800183c:	200000a8 	.word	0x200000a8

08001840 <timerRun>:

void timerRun(){
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
	for(int i=0; i<10; i++){
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	e016      	b.n	800187a <timerRun+0x3a>
		timer_counter[i]--;
 800184c:	4a0f      	ldr	r2, [pc, #60]	; (800188c <timerRun+0x4c>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001854:	1e5a      	subs	r2, r3, #1
 8001856:	490d      	ldr	r1, [pc, #52]	; (800188c <timerRun+0x4c>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[i] <= 0){
 800185e:	4a0b      	ldr	r2, [pc, #44]	; (800188c <timerRun+0x4c>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001866:	2b00      	cmp	r3, #0
 8001868:	dc04      	bgt.n	8001874 <timerRun+0x34>
			timer_flag[i] = 1;
 800186a:	4a09      	ldr	r2, [pc, #36]	; (8001890 <timerRun+0x50>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2101      	movs	r1, #1
 8001870:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i<10; i++){
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3301      	adds	r3, #1
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b09      	cmp	r3, #9
 800187e:	dde5      	ble.n	800184c <timerRun+0xc>
		}
	}
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	20000080 	.word	0x20000080
 8001890:	200000a8 	.word	0x200000a8

08001894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <HAL_MspInit+0x5c>)
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	4a14      	ldr	r2, [pc, #80]	; (80018f0 <HAL_MspInit+0x5c>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6193      	str	r3, [r2, #24]
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_MspInit+0x5c>)
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <HAL_MspInit+0x5c>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <HAL_MspInit+0x5c>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018bc:	61d3      	str	r3, [r2, #28]
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_MspInit+0x5c>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_MspInit+0x60>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <HAL_MspInit+0x60>)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40010000 	.word	0x40010000

080018f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001908:	d113      	bne.n	8001932 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <HAL_TIM_Base_MspInit+0x44>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	4a0b      	ldr	r2, [pc, #44]	; (800193c <HAL_TIM_Base_MspInit+0x44>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	61d3      	str	r3, [r2, #28]
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_TIM_Base_MspInit+0x44>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	201c      	movs	r0, #28
 8001928:	f000 fa7f 	bl	8001e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800192c:	201c      	movs	r0, #28
 800192e:	f000 fa98 	bl	8001e62 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000

08001940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <NMI_Handler+0x4>

08001946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <HardFault_Handler+0x4>

0800194c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <MemManage_Handler+0x4>

08001952 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <BusFault_Handler+0x4>

08001958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <UsageFault_Handler+0x4>

0800195e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr

0800196a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001986:	f000 f95d 	bl	8001c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <TIM2_IRQHandler+0x10>)
 8001996:	f001 f8b9 	bl	8002b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200000dc 	.word	0x200000dc

080019a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <turn_red>:
 *      Author: Admin
 */

#include "traffic_light.h"

void turn_red(){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80019b4:	2201      	movs	r2, #1
 80019b6:	2110      	movs	r1, #16
 80019b8:	4807      	ldr	r0, [pc, #28]	; (80019d8 <turn_red+0x28>)
 80019ba:	f000 fbfe 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80019be:	2200      	movs	r2, #0
 80019c0:	2120      	movs	r1, #32
 80019c2:	4805      	ldr	r0, [pc, #20]	; (80019d8 <turn_red+0x28>)
 80019c4:	f000 fbf9 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80019c8:	2200      	movs	r2, #0
 80019ca:	2140      	movs	r1, #64	; 0x40
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <turn_red+0x28>)
 80019ce:	f000 fbf4 	bl	80021ba <HAL_GPIO_WritePin>
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40010800 	.word	0x40010800

080019dc <turn_green>:
void turn_green(){
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2110      	movs	r1, #16
 80019e4:	4807      	ldr	r0, [pc, #28]	; (8001a04 <turn_green+0x28>)
 80019e6:	f000 fbe8 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2120      	movs	r1, #32
 80019ee:	4805      	ldr	r0, [pc, #20]	; (8001a04 <turn_green+0x28>)
 80019f0:	f000 fbe3 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80019f4:	2201      	movs	r2, #1
 80019f6:	2140      	movs	r1, #64	; 0x40
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <turn_green+0x28>)
 80019fa:	f000 fbde 	bl	80021ba <HAL_GPIO_WritePin>
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40010800 	.word	0x40010800

08001a08 <turn_yellow>:
void turn_yellow(){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2110      	movs	r1, #16
 8001a10:	4807      	ldr	r0, [pc, #28]	; (8001a30 <turn_yellow+0x28>)
 8001a12:	f000 fbd2 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8001a16:	2201      	movs	r2, #1
 8001a18:	2120      	movs	r1, #32
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <turn_yellow+0x28>)
 8001a1c:	f000 fbcd 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2140      	movs	r1, #64	; 0x40
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <turn_yellow+0x28>)
 8001a26:	f000 fbc8 	bl	80021ba <HAL_GPIO_WritePin>
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40010800 	.word	0x40010800

08001a34 <turn_red_2>:
void turn_red_2(){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	2180      	movs	r1, #128	; 0x80
 8001a3c:	4808      	ldr	r0, [pc, #32]	; (8001a60 <turn_red_2+0x2c>)
 8001a3e:	f000 fbbc 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a48:	4805      	ldr	r0, [pc, #20]	; (8001a60 <turn_red_2+0x2c>)
 8001a4a:	f000 fbb6 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <turn_red_2+0x2c>)
 8001a56:	f000 fbb0 	bl	80021ba <HAL_GPIO_WritePin>
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40010800 	.word	0x40010800

08001a64 <turn_green_2>:
void turn_green_2(){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2180      	movs	r1, #128	; 0x80
 8001a6c:	4808      	ldr	r0, [pc, #32]	; (8001a90 <turn_green_2+0x2c>)
 8001a6e:	f000 fba4 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a78:	4805      	ldr	r0, [pc, #20]	; (8001a90 <turn_green_2+0x2c>)
 8001a7a:	f000 fb9e 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <turn_green_2+0x2c>)
 8001a86:	f000 fb98 	bl	80021ba <HAL_GPIO_WritePin>
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40010800 	.word	0x40010800

08001a94 <turn_yellow_2>:
void turn_yellow_2(){
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2180      	movs	r1, #128	; 0x80
 8001a9c:	4808      	ldr	r0, [pc, #32]	; (8001ac0 <turn_yellow_2+0x2c>)
 8001a9e:	f000 fb8c 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_SET);
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aa8:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <turn_yellow_2+0x2c>)
 8001aaa:	f000 fb86 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <turn_yellow_2+0x2c>)
 8001ab6:	f000 fb80 	bl	80021ba <HAL_GPIO_WritePin>
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40010800 	.word	0x40010800

08001ac4 <clear_light>:

void clear_light(){
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2110      	movs	r1, #16
 8001acc:	480f      	ldr	r0, [pc, #60]	; (8001b0c <clear_light+0x48>)
 8001ace:	f000 fb74 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2120      	movs	r1, #32
 8001ad6:	480d      	ldr	r0, [pc, #52]	; (8001b0c <clear_light+0x48>)
 8001ad8:	f000 fb6f 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2140      	movs	r1, #64	; 0x40
 8001ae0:	480a      	ldr	r0, [pc, #40]	; (8001b0c <clear_light+0x48>)
 8001ae2:	f000 fb6a 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2180      	movs	r1, #128	; 0x80
 8001aea:	4808      	ldr	r0, [pc, #32]	; (8001b0c <clear_light+0x48>)
 8001aec:	f000 fb65 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001af6:	4805      	ldr	r0, [pc, #20]	; (8001b0c <clear_light+0x48>)
 8001af8:	f000 fb5f 	bl	80021ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b02:	4802      	ldr	r0, [pc, #8]	; (8001b0c <clear_light+0x48>)
 8001b04:	f000 fb59 	bl	80021ba <HAL_GPIO_WritePin>
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40010800 	.word	0x40010800

08001b10 <toggleRed>:

void toggleRed(){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001b14:	2110      	movs	r1, #16
 8001b16:	4804      	ldr	r0, [pc, #16]	; (8001b28 <toggleRed+0x18>)
 8001b18:	f000 fb67 	bl	80021ea <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 8001b1c:	2180      	movs	r1, #128	; 0x80
 8001b1e:	4802      	ldr	r0, [pc, #8]	; (8001b28 <toggleRed+0x18>)
 8001b20:	f000 fb63 	bl	80021ea <HAL_GPIO_TogglePin>
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40010800 	.word	0x40010800

08001b2c <toggleYellow>:
void toggleYellow(){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8001b30:	2120      	movs	r1, #32
 8001b32:	4805      	ldr	r0, [pc, #20]	; (8001b48 <toggleYellow+0x1c>)
 8001b34:	f000 fb59 	bl	80021ea <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin);
 8001b38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <toggleYellow+0x1c>)
 8001b3e:	f000 fb54 	bl	80021ea <HAL_GPIO_TogglePin>
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40010800 	.word	0x40010800

08001b4c <toggleGreen>:
void toggleGreen(){
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001b50:	2140      	movs	r1, #64	; 0x40
 8001b52:	4805      	ldr	r0, [pc, #20]	; (8001b68 <toggleGreen+0x1c>)
 8001b54:	f000 fb49 	bl	80021ea <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
 8001b58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <toggleGreen+0x1c>)
 8001b5e:	f000 fb44 	bl	80021ea <HAL_GPIO_TogglePin>
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40010800 	.word	0x40010800

08001b6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b6c:	f7ff ff1a 	bl	80019a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b70:	480b      	ldr	r0, [pc, #44]	; (8001ba0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b72:	490c      	ldr	r1, [pc, #48]	; (8001ba4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b74:	4a0c      	ldr	r2, [pc, #48]	; (8001ba8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b78:	e002      	b.n	8001b80 <LoopCopyDataInit>

08001b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7e:	3304      	adds	r3, #4

08001b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b84:	d3f9      	bcc.n	8001b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b86:	4a09      	ldr	r2, [pc, #36]	; (8001bac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b88:	4c09      	ldr	r4, [pc, #36]	; (8001bb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b8c:	e001      	b.n	8001b92 <LoopFillZerobss>

08001b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b90:	3204      	adds	r2, #4

08001b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b94:	d3fb      	bcc.n	8001b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b96:	f001 faf9 	bl	800318c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b9a:	f7ff fcfb 	bl	8001594 <main>
  bx lr
 8001b9e:	4770      	bx	lr
  ldr r0, =_sdata
 8001ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba4:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001ba8:	08003228 	.word	0x08003228
  ldr r2, =_sbss
 8001bac:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001bb0:	20000128 	.word	0x20000128

08001bb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bb4:	e7fe      	b.n	8001bb4 <ADC1_2_IRQHandler>
	...

08001bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_Init+0x28>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <HAL_Init+0x28>)
 8001bc2:	f043 0310 	orr.w	r3, r3, #16
 8001bc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f000 f923 	bl	8001e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bce:	200f      	movs	r0, #15
 8001bd0:	f000 f808 	bl	8001be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd4:	f7ff fe5e 	bl	8001894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40022000 	.word	0x40022000

08001be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_InitTick+0x54>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_InitTick+0x58>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 f93b 	bl	8001e7e <HAL_SYSTICK_Config>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e00e      	b.n	8001c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b0f      	cmp	r3, #15
 8001c16:	d80a      	bhi.n	8001c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f000 f903 	bl	8001e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c24:	4a06      	ldr	r2, [pc, #24]	; (8001c40 <HAL_InitTick+0x5c>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000024 	.word	0x20000024
 8001c3c:	2000002c 	.word	0x2000002c
 8001c40:	20000028 	.word	0x20000028

08001c44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_IncTick+0x1c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_IncTick+0x20>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	4a03      	ldr	r2, [pc, #12]	; (8001c64 <HAL_IncTick+0x20>)
 8001c56:	6013      	str	r3, [r2, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	2000002c 	.word	0x2000002c
 8001c64:	20000124 	.word	0x20000124

08001c68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c6c:	4b02      	ldr	r3, [pc, #8]	; (8001c78 <HAL_GetTick+0x10>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr
 8001c78:	20000124 	.word	0x20000124

08001c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cae:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	60d3      	str	r3, [r2, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <__NVIC_GetPriorityGrouping+0x18>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	f003 0307 	and.w	r3, r3, #7
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	db0b      	blt.n	8001d0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	f003 021f 	and.w	r2, r3, #31
 8001cf8:	4906      	ldr	r1, [pc, #24]	; (8001d14 <__NVIC_EnableIRQ+0x34>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	2001      	movs	r0, #1
 8001d02:	fa00 f202 	lsl.w	r2, r0, r2
 8001d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr
 8001d14:	e000e100 	.word	0xe000e100

08001d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	db0a      	blt.n	8001d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	490c      	ldr	r1, [pc, #48]	; (8001d64 <__NVIC_SetPriority+0x4c>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	0112      	lsls	r2, r2, #4
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d40:	e00a      	b.n	8001d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4908      	ldr	r1, [pc, #32]	; (8001d68 <__NVIC_SetPriority+0x50>)
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	3b04      	subs	r3, #4
 8001d50:	0112      	lsls	r2, r2, #4
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	440b      	add	r3, r1
 8001d56:	761a      	strb	r2, [r3, #24]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000e100 	.word	0xe000e100
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b089      	sub	sp, #36	; 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f1c3 0307 	rsb	r3, r3, #7
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	bf28      	it	cs
 8001d8a:	2304      	movcs	r3, #4
 8001d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3304      	adds	r3, #4
 8001d92:	2b06      	cmp	r3, #6
 8001d94:	d902      	bls.n	8001d9c <NVIC_EncodePriority+0x30>
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3b03      	subs	r3, #3
 8001d9a:	e000      	b.n	8001d9e <NVIC_EncodePriority+0x32>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	f04f 32ff 	mov.w	r2, #4294967295
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43da      	mvns	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	401a      	ands	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db4:	f04f 31ff 	mov.w	r1, #4294967295
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	43d9      	mvns	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	4313      	orrs	r3, r2
         );
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3724      	adds	r7, #36	; 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de0:	d301      	bcc.n	8001de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00f      	b.n	8001e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <SysTick_Config+0x40>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dee:	210f      	movs	r1, #15
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f7ff ff90 	bl	8001d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <SysTick_Config+0x40>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfe:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <SysTick_Config+0x40>)
 8001e00:	2207      	movs	r2, #7
 8001e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	e000e010 	.word	0xe000e010

08001e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ff2d 	bl	8001c7c <__NVIC_SetPriorityGrouping>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b086      	sub	sp, #24
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e3c:	f7ff ff42 	bl	8001cc4 <__NVIC_GetPriorityGrouping>
 8001e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	6978      	ldr	r0, [r7, #20]
 8001e48:	f7ff ff90 	bl	8001d6c <NVIC_EncodePriority>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff5f 	bl	8001d18 <__NVIC_SetPriority>
}
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff35 	bl	8001ce0 <__NVIC_EnableIRQ>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ffa2 	bl	8001dd0 <SysTick_Config>
 8001e8c:	4603      	mov	r3, r0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b08b      	sub	sp, #44	; 0x2c
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eaa:	e148      	b.n	800213e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001eac:	2201      	movs	r2, #1
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	f040 8137 	bne.w	8002138 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4aa3      	ldr	r2, [pc, #652]	; (800215c <HAL_GPIO_Init+0x2c4>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d05e      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001ed4:	4aa1      	ldr	r2, [pc, #644]	; (800215c <HAL_GPIO_Init+0x2c4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d875      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001eda:	4aa1      	ldr	r2, [pc, #644]	; (8002160 <HAL_GPIO_Init+0x2c8>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d058      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001ee0:	4a9f      	ldr	r2, [pc, #636]	; (8002160 <HAL_GPIO_Init+0x2c8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d86f      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001ee6:	4a9f      	ldr	r2, [pc, #636]	; (8002164 <HAL_GPIO_Init+0x2cc>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d052      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001eec:	4a9d      	ldr	r2, [pc, #628]	; (8002164 <HAL_GPIO_Init+0x2cc>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d869      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001ef2:	4a9d      	ldr	r2, [pc, #628]	; (8002168 <HAL_GPIO_Init+0x2d0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d04c      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001ef8:	4a9b      	ldr	r2, [pc, #620]	; (8002168 <HAL_GPIO_Init+0x2d0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d863      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001efe:	4a9b      	ldr	r2, [pc, #620]	; (800216c <HAL_GPIO_Init+0x2d4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d046      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001f04:	4a99      	ldr	r2, [pc, #612]	; (800216c <HAL_GPIO_Init+0x2d4>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d85d      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001f0a:	2b12      	cmp	r3, #18
 8001f0c:	d82a      	bhi.n	8001f64 <HAL_GPIO_Init+0xcc>
 8001f0e:	2b12      	cmp	r3, #18
 8001f10:	d859      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001f12:	a201      	add	r2, pc, #4	; (adr r2, 8001f18 <HAL_GPIO_Init+0x80>)
 8001f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f18:	08001f93 	.word	0x08001f93
 8001f1c:	08001f6d 	.word	0x08001f6d
 8001f20:	08001f7f 	.word	0x08001f7f
 8001f24:	08001fc1 	.word	0x08001fc1
 8001f28:	08001fc7 	.word	0x08001fc7
 8001f2c:	08001fc7 	.word	0x08001fc7
 8001f30:	08001fc7 	.word	0x08001fc7
 8001f34:	08001fc7 	.word	0x08001fc7
 8001f38:	08001fc7 	.word	0x08001fc7
 8001f3c:	08001fc7 	.word	0x08001fc7
 8001f40:	08001fc7 	.word	0x08001fc7
 8001f44:	08001fc7 	.word	0x08001fc7
 8001f48:	08001fc7 	.word	0x08001fc7
 8001f4c:	08001fc7 	.word	0x08001fc7
 8001f50:	08001fc7 	.word	0x08001fc7
 8001f54:	08001fc7 	.word	0x08001fc7
 8001f58:	08001fc7 	.word	0x08001fc7
 8001f5c:	08001f75 	.word	0x08001f75
 8001f60:	08001f89 	.word	0x08001f89
 8001f64:	4a82      	ldr	r2, [pc, #520]	; (8002170 <HAL_GPIO_Init+0x2d8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d013      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f6a:	e02c      	b.n	8001fc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	623b      	str	r3, [r7, #32]
          break;
 8001f72:	e029      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	623b      	str	r3, [r7, #32]
          break;
 8001f7c:	e024      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	3308      	adds	r3, #8
 8001f84:	623b      	str	r3, [r7, #32]
          break;
 8001f86:	e01f      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	330c      	adds	r3, #12
 8001f8e:	623b      	str	r3, [r7, #32]
          break;
 8001f90:	e01a      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d102      	bne.n	8001fa0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	623b      	str	r3, [r7, #32]
          break;
 8001f9e:	e013      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d105      	bne.n	8001fb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa8:	2308      	movs	r3, #8
 8001faa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	611a      	str	r2, [r3, #16]
          break;
 8001fb2:	e009      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb4:	2308      	movs	r3, #8
 8001fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	615a      	str	r2, [r3, #20]
          break;
 8001fbe:	e003      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	623b      	str	r3, [r7, #32]
          break;
 8001fc4:	e000      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          break;
 8001fc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2bff      	cmp	r3, #255	; 0xff
 8001fcc:	d801      	bhi.n	8001fd2 <HAL_GPIO_Init+0x13a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	e001      	b.n	8001fd6 <HAL_GPIO_Init+0x13e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2bff      	cmp	r3, #255	; 0xff
 8001fdc:	d802      	bhi.n	8001fe4 <HAL_GPIO_Init+0x14c>
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	e002      	b.n	8001fea <HAL_GPIO_Init+0x152>
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	3b08      	subs	r3, #8
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	210f      	movs	r1, #15
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	6a39      	ldr	r1, [r7, #32]
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	fa01 f303 	lsl.w	r3, r1, r3
 8002004:	431a      	orrs	r2, r3
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 8090 	beq.w	8002138 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002018:	4b56      	ldr	r3, [pc, #344]	; (8002174 <HAL_GPIO_Init+0x2dc>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	4a55      	ldr	r2, [pc, #340]	; (8002174 <HAL_GPIO_Init+0x2dc>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6193      	str	r3, [r2, #24]
 8002024:	4b53      	ldr	r3, [pc, #332]	; (8002174 <HAL_GPIO_Init+0x2dc>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002030:	4a51      	ldr	r2, [pc, #324]	; (8002178 <HAL_GPIO_Init+0x2e0>)
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	089b      	lsrs	r3, r3, #2
 8002036:	3302      	adds	r3, #2
 8002038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	220f      	movs	r2, #15
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4013      	ands	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a49      	ldr	r2, [pc, #292]	; (800217c <HAL_GPIO_Init+0x2e4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d00d      	beq.n	8002078 <HAL_GPIO_Init+0x1e0>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a48      	ldr	r2, [pc, #288]	; (8002180 <HAL_GPIO_Init+0x2e8>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d007      	beq.n	8002074 <HAL_GPIO_Init+0x1dc>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a47      	ldr	r2, [pc, #284]	; (8002184 <HAL_GPIO_Init+0x2ec>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d101      	bne.n	8002070 <HAL_GPIO_Init+0x1d8>
 800206c:	2302      	movs	r3, #2
 800206e:	e004      	b.n	800207a <HAL_GPIO_Init+0x1e2>
 8002070:	2303      	movs	r3, #3
 8002072:	e002      	b.n	800207a <HAL_GPIO_Init+0x1e2>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <HAL_GPIO_Init+0x1e2>
 8002078:	2300      	movs	r3, #0
 800207a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800207c:	f002 0203 	and.w	r2, r2, #3
 8002080:	0092      	lsls	r2, r2, #2
 8002082:	4093      	lsls	r3, r2
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800208a:	493b      	ldr	r1, [pc, #236]	; (8002178 <HAL_GPIO_Init+0x2e0>)
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	3302      	adds	r3, #2
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d006      	beq.n	80020b2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020a4:	4b38      	ldr	r3, [pc, #224]	; (8002188 <HAL_GPIO_Init+0x2f0>)
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	4937      	ldr	r1, [pc, #220]	; (8002188 <HAL_GPIO_Init+0x2f0>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	608b      	str	r3, [r1, #8]
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020b2:	4b35      	ldr	r3, [pc, #212]	; (8002188 <HAL_GPIO_Init+0x2f0>)
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	4933      	ldr	r1, [pc, #204]	; (8002188 <HAL_GPIO_Init+0x2f0>)
 80020bc:	4013      	ands	r3, r2
 80020be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d006      	beq.n	80020da <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020cc:	4b2e      	ldr	r3, [pc, #184]	; (8002188 <HAL_GPIO_Init+0x2f0>)
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	492d      	ldr	r1, [pc, #180]	; (8002188 <HAL_GPIO_Init+0x2f0>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60cb      	str	r3, [r1, #12]
 80020d8:	e006      	b.n	80020e8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020da:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <HAL_GPIO_Init+0x2f0>)
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	4929      	ldr	r1, [pc, #164]	; (8002188 <HAL_GPIO_Init+0x2f0>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d006      	beq.n	8002102 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020f4:	4b24      	ldr	r3, [pc, #144]	; (8002188 <HAL_GPIO_Init+0x2f0>)
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	4923      	ldr	r1, [pc, #140]	; (8002188 <HAL_GPIO_Init+0x2f0>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
 8002100:	e006      	b.n	8002110 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002102:	4b21      	ldr	r3, [pc, #132]	; (8002188 <HAL_GPIO_Init+0x2f0>)
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	43db      	mvns	r3, r3
 800210a:	491f      	ldr	r1, [pc, #124]	; (8002188 <HAL_GPIO_Init+0x2f0>)
 800210c:	4013      	ands	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d006      	beq.n	800212a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800211c:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <HAL_GPIO_Init+0x2f0>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4919      	ldr	r1, [pc, #100]	; (8002188 <HAL_GPIO_Init+0x2f0>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	600b      	str	r3, [r1, #0]
 8002128:	e006      	b.n	8002138 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800212a:	4b17      	ldr	r3, [pc, #92]	; (8002188 <HAL_GPIO_Init+0x2f0>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	43db      	mvns	r3, r3
 8002132:	4915      	ldr	r1, [pc, #84]	; (8002188 <HAL_GPIO_Init+0x2f0>)
 8002134:	4013      	ands	r3, r2
 8002136:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	3301      	adds	r3, #1
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	f47f aeaf 	bne.w	8001eac <HAL_GPIO_Init+0x14>
  }
}
 800214e:	bf00      	nop
 8002150:	bf00      	nop
 8002152:	372c      	adds	r7, #44	; 0x2c
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	10320000 	.word	0x10320000
 8002160:	10310000 	.word	0x10310000
 8002164:	10220000 	.word	0x10220000
 8002168:	10210000 	.word	0x10210000
 800216c:	10120000 	.word	0x10120000
 8002170:	10110000 	.word	0x10110000
 8002174:	40021000 	.word	0x40021000
 8002178:	40010000 	.word	0x40010000
 800217c:	40010800 	.word	0x40010800
 8002180:	40010c00 	.word	0x40010c00
 8002184:	40011000 	.word	0x40011000
 8002188:	40010400 	.word	0x40010400

0800218c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	887b      	ldrh	r3, [r7, #2]
 800219e:	4013      	ands	r3, r2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
 80021a8:	e001      	b.n	80021ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr

080021ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	460b      	mov	r3, r1
 80021c4:	807b      	strh	r3, [r7, #2]
 80021c6:	4613      	mov	r3, r2
 80021c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021ca:	787b      	ldrb	r3, [r7, #1]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021d0:	887a      	ldrh	r2, [r7, #2]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021d6:	e003      	b.n	80021e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021d8:	887b      	ldrh	r3, [r7, #2]
 80021da:	041a      	lsls	r2, r3, #16
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	611a      	str	r2, [r3, #16]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b085      	sub	sp, #20
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021fc:	887a      	ldrh	r2, [r7, #2]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4013      	ands	r3, r2
 8002202:	041a      	lsls	r2, r3, #16
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43d9      	mvns	r1, r3
 8002208:	887b      	ldrh	r3, [r7, #2]
 800220a:	400b      	ands	r3, r1
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	611a      	str	r2, [r3, #16]
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e26c      	b.n	8002708 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 8087 	beq.w	800234a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800223c:	4b92      	ldr	r3, [pc, #584]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 030c 	and.w	r3, r3, #12
 8002244:	2b04      	cmp	r3, #4
 8002246:	d00c      	beq.n	8002262 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002248:	4b8f      	ldr	r3, [pc, #572]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b08      	cmp	r3, #8
 8002252:	d112      	bne.n	800227a <HAL_RCC_OscConfig+0x5e>
 8002254:	4b8c      	ldr	r3, [pc, #560]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002260:	d10b      	bne.n	800227a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002262:	4b89      	ldr	r3, [pc, #548]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d06c      	beq.n	8002348 <HAL_RCC_OscConfig+0x12c>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d168      	bne.n	8002348 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e246      	b.n	8002708 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002282:	d106      	bne.n	8002292 <HAL_RCC_OscConfig+0x76>
 8002284:	4b80      	ldr	r3, [pc, #512]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a7f      	ldr	r2, [pc, #508]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 800228a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	e02e      	b.n	80022f0 <HAL_RCC_OscConfig+0xd4>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x98>
 800229a:	4b7b      	ldr	r3, [pc, #492]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a7a      	ldr	r2, [pc, #488]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b78      	ldr	r3, [pc, #480]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a77      	ldr	r2, [pc, #476]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e01d      	b.n	80022f0 <HAL_RCC_OscConfig+0xd4>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCC_OscConfig+0xbc>
 80022be:	4b72      	ldr	r3, [pc, #456]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a71      	ldr	r2, [pc, #452]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	4b6f      	ldr	r3, [pc, #444]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a6e      	ldr	r2, [pc, #440]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e00b      	b.n	80022f0 <HAL_RCC_OscConfig+0xd4>
 80022d8:	4b6b      	ldr	r3, [pc, #428]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a6a      	ldr	r2, [pc, #424]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	4b68      	ldr	r3, [pc, #416]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a67      	ldr	r2, [pc, #412]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d013      	beq.n	8002320 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7ff fcb6 	bl	8001c68 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002300:	f7ff fcb2 	bl	8001c68 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b64      	cmp	r3, #100	; 0x64
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e1fa      	b.n	8002708 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	4b5d      	ldr	r3, [pc, #372]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0xe4>
 800231e:	e014      	b.n	800234a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7ff fca2 	bl	8001c68 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002328:	f7ff fc9e 	bl	8001c68 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	; 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e1e6      	b.n	8002708 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233a:	4b53      	ldr	r3, [pc, #332]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x10c>
 8002346:	e000      	b.n	800234a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d063      	beq.n	800241e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002356:	4b4c      	ldr	r3, [pc, #304]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00b      	beq.n	800237a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002362:	4b49      	ldr	r3, [pc, #292]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	2b08      	cmp	r3, #8
 800236c:	d11c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x18c>
 800236e:	4b46      	ldr	r3, [pc, #280]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d116      	bne.n	80023a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237a:	4b43      	ldr	r3, [pc, #268]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d005      	beq.n	8002392 <HAL_RCC_OscConfig+0x176>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d001      	beq.n	8002392 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e1ba      	b.n	8002708 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002392:	4b3d      	ldr	r3, [pc, #244]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4939      	ldr	r1, [pc, #228]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a6:	e03a      	b.n	800241e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d020      	beq.n	80023f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b0:	4b36      	ldr	r3, [pc, #216]	; (800248c <HAL_RCC_OscConfig+0x270>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b6:	f7ff fc57 	bl	8001c68 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023be:	f7ff fc53 	bl	8001c68 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e19b      	b.n	8002708 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d0:	4b2d      	ldr	r3, [pc, #180]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023dc:	4b2a      	ldr	r3, [pc, #168]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	4927      	ldr	r1, [pc, #156]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	600b      	str	r3, [r1, #0]
 80023f0:	e015      	b.n	800241e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023f2:	4b26      	ldr	r3, [pc, #152]	; (800248c <HAL_RCC_OscConfig+0x270>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7ff fc36 	bl	8001c68 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002400:	f7ff fc32 	bl	8001c68 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e17a      	b.n	8002708 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002412:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d03a      	beq.n	80024a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d019      	beq.n	8002466 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002432:	4b17      	ldr	r3, [pc, #92]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 8002434:	2201      	movs	r2, #1
 8002436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002438:	f7ff fc16 	bl	8001c68 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002440:	f7ff fc12 	bl	8001c68 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e15a      	b.n	8002708 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800245e:	2001      	movs	r0, #1
 8002460:	f000 fa9a 	bl	8002998 <RCC_Delay>
 8002464:	e01c      	b.n	80024a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246c:	f7ff fbfc 	bl	8001c68 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002472:	e00f      	b.n	8002494 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002474:	f7ff fbf8 	bl	8001c68 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d908      	bls.n	8002494 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e140      	b.n	8002708 <HAL_RCC_OscConfig+0x4ec>
 8002486:	bf00      	nop
 8002488:	40021000 	.word	0x40021000
 800248c:	42420000 	.word	0x42420000
 8002490:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002494:	4b9e      	ldr	r3, [pc, #632]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1e9      	bne.n	8002474 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 80a6 	beq.w	80025fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ae:	2300      	movs	r3, #0
 80024b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024b2:	4b97      	ldr	r3, [pc, #604]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10d      	bne.n	80024da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	4b94      	ldr	r3, [pc, #592]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	4a93      	ldr	r2, [pc, #588]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 80024c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c8:	61d3      	str	r3, [r2, #28]
 80024ca:	4b91      	ldr	r3, [pc, #580]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d6:	2301      	movs	r3, #1
 80024d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024da:	4b8e      	ldr	r3, [pc, #568]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d118      	bne.n	8002518 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024e6:	4b8b      	ldr	r3, [pc, #556]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a8a      	ldr	r2, [pc, #552]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 80024ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f2:	f7ff fbb9 	bl	8001c68 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fa:	f7ff fbb5 	bl	8001c68 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b64      	cmp	r3, #100	; 0x64
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e0fd      	b.n	8002708 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250c:	4b81      	ldr	r3, [pc, #516]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d106      	bne.n	800252e <HAL_RCC_OscConfig+0x312>
 8002520:	4b7b      	ldr	r3, [pc, #492]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	4a7a      	ldr	r2, [pc, #488]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6213      	str	r3, [r2, #32]
 800252c:	e02d      	b.n	800258a <HAL_RCC_OscConfig+0x36e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10c      	bne.n	8002550 <HAL_RCC_OscConfig+0x334>
 8002536:	4b76      	ldr	r3, [pc, #472]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	4a75      	ldr	r2, [pc, #468]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	6213      	str	r3, [r2, #32]
 8002542:	4b73      	ldr	r3, [pc, #460]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4a72      	ldr	r2, [pc, #456]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 8002548:	f023 0304 	bic.w	r3, r3, #4
 800254c:	6213      	str	r3, [r2, #32]
 800254e:	e01c      	b.n	800258a <HAL_RCC_OscConfig+0x36e>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	2b05      	cmp	r3, #5
 8002556:	d10c      	bne.n	8002572 <HAL_RCC_OscConfig+0x356>
 8002558:	4b6d      	ldr	r3, [pc, #436]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	4a6c      	ldr	r2, [pc, #432]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 800255e:	f043 0304 	orr.w	r3, r3, #4
 8002562:	6213      	str	r3, [r2, #32]
 8002564:	4b6a      	ldr	r3, [pc, #424]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	4a69      	ldr	r2, [pc, #420]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	6213      	str	r3, [r2, #32]
 8002570:	e00b      	b.n	800258a <HAL_RCC_OscConfig+0x36e>
 8002572:	4b67      	ldr	r3, [pc, #412]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4a66      	ldr	r2, [pc, #408]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 8002578:	f023 0301 	bic.w	r3, r3, #1
 800257c:	6213      	str	r3, [r2, #32]
 800257e:	4b64      	ldr	r3, [pc, #400]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4a63      	ldr	r2, [pc, #396]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 8002584:	f023 0304 	bic.w	r3, r3, #4
 8002588:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d015      	beq.n	80025be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002592:	f7ff fb69 	bl	8001c68 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002598:	e00a      	b.n	80025b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259a:	f7ff fb65 	bl	8001c68 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e0ab      	b.n	8002708 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b0:	4b57      	ldr	r3, [pc, #348]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0ee      	beq.n	800259a <HAL_RCC_OscConfig+0x37e>
 80025bc:	e014      	b.n	80025e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025be:	f7ff fb53 	bl	8001c68 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c4:	e00a      	b.n	80025dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c6:	f7ff fb4f 	bl	8001c68 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e095      	b.n	8002708 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025dc:	4b4c      	ldr	r3, [pc, #304]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1ee      	bne.n	80025c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025e8:	7dfb      	ldrb	r3, [r7, #23]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d105      	bne.n	80025fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ee:	4b48      	ldr	r3, [pc, #288]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	4a47      	ldr	r2, [pc, #284]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 8081 	beq.w	8002706 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002604:	4b42      	ldr	r3, [pc, #264]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 030c 	and.w	r3, r3, #12
 800260c:	2b08      	cmp	r3, #8
 800260e:	d061      	beq.n	80026d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d146      	bne.n	80026a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002618:	4b3f      	ldr	r3, [pc, #252]	; (8002718 <HAL_RCC_OscConfig+0x4fc>)
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7ff fb23 	bl	8001c68 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002626:	f7ff fb1f 	bl	8001c68 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e067      	b.n	8002708 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002638:	4b35      	ldr	r3, [pc, #212]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f0      	bne.n	8002626 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800264c:	d108      	bne.n	8002660 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800264e:	4b30      	ldr	r3, [pc, #192]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	492d      	ldr	r1, [pc, #180]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002660:	4b2b      	ldr	r3, [pc, #172]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a19      	ldr	r1, [r3, #32]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	430b      	orrs	r3, r1
 8002672:	4927      	ldr	r1, [pc, #156]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002678:	4b27      	ldr	r3, [pc, #156]	; (8002718 <HAL_RCC_OscConfig+0x4fc>)
 800267a:	2201      	movs	r2, #1
 800267c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267e:	f7ff faf3 	bl	8001c68 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002686:	f7ff faef 	bl	8001c68 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e037      	b.n	8002708 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002698:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x46a>
 80026a4:	e02f      	b.n	8002706 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a6:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <HAL_RCC_OscConfig+0x4fc>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7ff fadc 	bl	8001c68 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b4:	f7ff fad8 	bl	8001c68 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e020      	b.n	8002708 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c6:	4b12      	ldr	r3, [pc, #72]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x498>
 80026d2:	e018      	b.n	8002706 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e013      	b.n	8002708 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <HAL_RCC_OscConfig+0x4f4>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d106      	bne.n	8002702 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fe:	429a      	cmp	r2, r3
 8002700:	d001      	beq.n	8002706 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40021000 	.word	0x40021000
 8002714:	40007000 	.word	0x40007000
 8002718:	42420060 	.word	0x42420060

0800271c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e0d0      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002730:	4b6a      	ldr	r3, [pc, #424]	; (80028dc <HAL_RCC_ClockConfig+0x1c0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d910      	bls.n	8002760 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273e:	4b67      	ldr	r3, [pc, #412]	; (80028dc <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 0207 	bic.w	r2, r3, #7
 8002746:	4965      	ldr	r1, [pc, #404]	; (80028dc <HAL_RCC_ClockConfig+0x1c0>)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800274e:	4b63      	ldr	r3, [pc, #396]	; (80028dc <HAL_RCC_ClockConfig+0x1c0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d001      	beq.n	8002760 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0b8      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d020      	beq.n	80027ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002778:	4b59      	ldr	r3, [pc, #356]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4a58      	ldr	r2, [pc, #352]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002782:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b00      	cmp	r3, #0
 800278e:	d005      	beq.n	800279c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002790:	4b53      	ldr	r3, [pc, #332]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4a52      	ldr	r2, [pc, #328]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800279a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800279c:	4b50      	ldr	r3, [pc, #320]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	494d      	ldr	r1, [pc, #308]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d040      	beq.n	800283c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d107      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c2:	4b47      	ldr	r3, [pc, #284]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d115      	bne.n	80027fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e07f      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d107      	bne.n	80027ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027da:	4b41      	ldr	r3, [pc, #260]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d109      	bne.n	80027fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e073      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ea:	4b3d      	ldr	r3, [pc, #244]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e06b      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fa:	4b39      	ldr	r3, [pc, #228]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f023 0203 	bic.w	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4936      	ldr	r1, [pc, #216]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800280c:	f7ff fa2c 	bl	8001c68 <HAL_GetTick>
 8002810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002812:	e00a      	b.n	800282a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002814:	f7ff fa28 	bl	8001c68 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002822:	4293      	cmp	r3, r2
 8002824:	d901      	bls.n	800282a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e053      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	4b2d      	ldr	r3, [pc, #180]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 020c 	and.w	r2, r3, #12
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	429a      	cmp	r2, r3
 800283a:	d1eb      	bne.n	8002814 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800283c:	4b27      	ldr	r3, [pc, #156]	; (80028dc <HAL_RCC_ClockConfig+0x1c0>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d210      	bcs.n	800286c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b24      	ldr	r3, [pc, #144]	; (80028dc <HAL_RCC_ClockConfig+0x1c0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 0207 	bic.w	r2, r3, #7
 8002852:	4922      	ldr	r1, [pc, #136]	; (80028dc <HAL_RCC_ClockConfig+0x1c0>)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	4313      	orrs	r3, r2
 8002858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285a:	4b20      	ldr	r3, [pc, #128]	; (80028dc <HAL_RCC_ClockConfig+0x1c0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d001      	beq.n	800286c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e032      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002878:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	4916      	ldr	r1, [pc, #88]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	4313      	orrs	r3, r2
 8002888:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002896:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	490e      	ldr	r1, [pc, #56]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028aa:	f000 f821 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 80028ae:	4602      	mov	r2, r0
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	091b      	lsrs	r3, r3, #4
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	490a      	ldr	r1, [pc, #40]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028bc:	5ccb      	ldrb	r3, [r1, r3]
 80028be:	fa22 f303 	lsr.w	r3, r2, r3
 80028c2:	4a09      	ldr	r2, [pc, #36]	; (80028e8 <HAL_RCC_ClockConfig+0x1cc>)
 80028c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028c6:	4b09      	ldr	r3, [pc, #36]	; (80028ec <HAL_RCC_ClockConfig+0x1d0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff f98a 	bl	8001be4 <HAL_InitTick>

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40022000 	.word	0x40022000
 80028e0:	40021000 	.word	0x40021000
 80028e4:	080031fc 	.word	0x080031fc
 80028e8:	20000024 	.word	0x20000024
 80028ec:	20000028 	.word	0x20000028

080028f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	2300      	movs	r3, #0
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	2300      	movs	r3, #0
 8002904:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800290a:	4b1e      	ldr	r3, [pc, #120]	; (8002984 <HAL_RCC_GetSysClockFreq+0x94>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b04      	cmp	r3, #4
 8002918:	d002      	beq.n	8002920 <HAL_RCC_GetSysClockFreq+0x30>
 800291a:	2b08      	cmp	r3, #8
 800291c:	d003      	beq.n	8002926 <HAL_RCC_GetSysClockFreq+0x36>
 800291e:	e027      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002920:	4b19      	ldr	r3, [pc, #100]	; (8002988 <HAL_RCC_GetSysClockFreq+0x98>)
 8002922:	613b      	str	r3, [r7, #16]
      break;
 8002924:	e027      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	0c9b      	lsrs	r3, r3, #18
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	4a17      	ldr	r2, [pc, #92]	; (800298c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002930:	5cd3      	ldrb	r3, [r2, r3]
 8002932:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d010      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800293e:	4b11      	ldr	r3, [pc, #68]	; (8002984 <HAL_RCC_GetSysClockFreq+0x94>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	0c5b      	lsrs	r3, r3, #17
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	4a11      	ldr	r2, [pc, #68]	; (8002990 <HAL_RCC_GetSysClockFreq+0xa0>)
 800294a:	5cd3      	ldrb	r3, [r2, r3]
 800294c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a0d      	ldr	r2, [pc, #52]	; (8002988 <HAL_RCC_GetSysClockFreq+0x98>)
 8002952:	fb02 f203 	mul.w	r2, r2, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	fbb2 f3f3 	udiv	r3, r2, r3
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	e004      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a0c      	ldr	r2, [pc, #48]	; (8002994 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002964:	fb02 f303 	mul.w	r3, r2, r3
 8002968:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	613b      	str	r3, [r7, #16]
      break;
 800296e:	e002      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_RCC_GetSysClockFreq+0x98>)
 8002972:	613b      	str	r3, [r7, #16]
      break;
 8002974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002976:	693b      	ldr	r3, [r7, #16]
}
 8002978:	4618      	mov	r0, r3
 800297a:	371c      	adds	r7, #28
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000
 8002988:	007a1200 	.word	0x007a1200
 800298c:	0800320c 	.word	0x0800320c
 8002990:	0800321c 	.word	0x0800321c
 8002994:	003d0900 	.word	0x003d0900

08002998 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029a0:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <RCC_Delay+0x34>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <RCC_Delay+0x38>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	0a5b      	lsrs	r3, r3, #9
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029b4:	bf00      	nop
  }
  while (Delay --);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1e5a      	subs	r2, r3, #1
 80029ba:	60fa      	str	r2, [r7, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f9      	bne.n	80029b4 <RCC_Delay+0x1c>
}
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	20000024 	.word	0x20000024
 80029d0:	10624dd3 	.word	0x10624dd3

080029d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e041      	b.n	8002a6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7fe ff7c 	bl	80018f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	4619      	mov	r1, r3
 8002a12:	4610      	mov	r0, r2
 8002a14:	f000 fa56 	bl	8002ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d001      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e035      	b.n	8002af8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a16      	ldr	r2, [pc, #88]	; (8002b04 <HAL_TIM_Base_Start_IT+0x90>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d009      	beq.n	8002ac2 <HAL_TIM_Base_Start_IT+0x4e>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab6:	d004      	beq.n	8002ac2 <HAL_TIM_Base_Start_IT+0x4e>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <HAL_TIM_Base_Start_IT+0x94>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d111      	bne.n	8002ae6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b06      	cmp	r3, #6
 8002ad2:	d010      	beq.n	8002af6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae4:	e007      	b.n	8002af6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 0201 	orr.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40012c00 	.word	0x40012c00
 8002b08:	40000400 	.word	0x40000400

08002b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d020      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d01b      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0202 	mvn.w	r2, #2
 8002b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f998 	bl	8002e8c <HAL_TIM_IC_CaptureCallback>
 8002b5c:	e005      	b.n	8002b6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f98b 	bl	8002e7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f99a 	bl	8002e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d020      	beq.n	8002bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01b      	beq.n	8002bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0204 	mvn.w	r2, #4
 8002b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2202      	movs	r2, #2
 8002b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f972 	bl	8002e8c <HAL_TIM_IC_CaptureCallback>
 8002ba8:	e005      	b.n	8002bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f965 	bl	8002e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f974 	bl	8002e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d020      	beq.n	8002c08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d01b      	beq.n	8002c08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0208 	mvn.w	r2, #8
 8002bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2204      	movs	r2, #4
 8002bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f94c 	bl	8002e8c <HAL_TIM_IC_CaptureCallback>
 8002bf4:	e005      	b.n	8002c02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f93f 	bl	8002e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f94e 	bl	8002e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d020      	beq.n	8002c54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d01b      	beq.n	8002c54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0210 	mvn.w	r2, #16
 8002c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2208      	movs	r2, #8
 8002c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f926 	bl	8002e8c <HAL_TIM_IC_CaptureCallback>
 8002c40:	e005      	b.n	8002c4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f919 	bl	8002e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f928 	bl	8002e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00c      	beq.n	8002c78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d007      	beq.n	8002c78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0201 	mvn.w	r2, #1
 8002c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fe fdb2 	bl	80017dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00c      	beq.n	8002c9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d007      	beq.n	8002c9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fa6f 	bl	800317a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00c      	beq.n	8002cc0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d007      	beq.n	8002cc0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f8f8 	bl	8002eb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00c      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d007      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0220 	mvn.w	r2, #32
 8002cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 fa42 	bl	8003168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_TIM_ConfigClockSource+0x1c>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e0b4      	b.n	8002e72 <HAL_TIM_ConfigClockSource+0x186>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d40:	d03e      	beq.n	8002dc0 <HAL_TIM_ConfigClockSource+0xd4>
 8002d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d46:	f200 8087 	bhi.w	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d4e:	f000 8086 	beq.w	8002e5e <HAL_TIM_ConfigClockSource+0x172>
 8002d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d56:	d87f      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d58:	2b70      	cmp	r3, #112	; 0x70
 8002d5a:	d01a      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0xa6>
 8002d5c:	2b70      	cmp	r3, #112	; 0x70
 8002d5e:	d87b      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d60:	2b60      	cmp	r3, #96	; 0x60
 8002d62:	d050      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x11a>
 8002d64:	2b60      	cmp	r3, #96	; 0x60
 8002d66:	d877      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d68:	2b50      	cmp	r3, #80	; 0x50
 8002d6a:	d03c      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0xfa>
 8002d6c:	2b50      	cmp	r3, #80	; 0x50
 8002d6e:	d873      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d70:	2b40      	cmp	r3, #64	; 0x40
 8002d72:	d058      	beq.n	8002e26 <HAL_TIM_ConfigClockSource+0x13a>
 8002d74:	2b40      	cmp	r3, #64	; 0x40
 8002d76:	d86f      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d78:	2b30      	cmp	r3, #48	; 0x30
 8002d7a:	d064      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x15a>
 8002d7c:	2b30      	cmp	r3, #48	; 0x30
 8002d7e:	d86b      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d060      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x15a>
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d867      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d05c      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x15a>
 8002d8c:	2b10      	cmp	r3, #16
 8002d8e:	d05a      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x15a>
 8002d90:	e062      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6899      	ldr	r1, [r3, #8]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f000 f96a 	bl	800307a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002db4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	609a      	str	r2, [r3, #8]
      break;
 8002dbe:	e04f      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	6899      	ldr	r1, [r3, #8]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f000 f953 	bl	800307a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002de2:	609a      	str	r2, [r3, #8]
      break;
 8002de4:	e03c      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6859      	ldr	r1, [r3, #4]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	461a      	mov	r2, r3
 8002df4:	f000 f8ca 	bl	8002f8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2150      	movs	r1, #80	; 0x50
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 f921 	bl	8003046 <TIM_ITRx_SetConfig>
      break;
 8002e04:	e02c      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6859      	ldr	r1, [r3, #4]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	461a      	mov	r2, r3
 8002e14:	f000 f8e8 	bl	8002fe8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2160      	movs	r1, #96	; 0x60
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 f911 	bl	8003046 <TIM_ITRx_SetConfig>
      break;
 8002e24:	e01c      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	6859      	ldr	r1, [r3, #4]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	461a      	mov	r2, r3
 8002e34:	f000 f8aa 	bl	8002f8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2140      	movs	r1, #64	; 0x40
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 f901 	bl	8003046 <TIM_ITRx_SetConfig>
      break;
 8002e44:	e00c      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4610      	mov	r0, r2
 8002e52:	f000 f8f8 	bl	8003046 <TIM_ITRx_SetConfig>
      break;
 8002e56:	e003      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e5c:	e000      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr

08002e9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr
	...

08002ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a2b      	ldr	r2, [pc, #172]	; (8002f84 <TIM_Base_SetConfig+0xc0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d007      	beq.n	8002eec <TIM_Base_SetConfig+0x28>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee2:	d003      	beq.n	8002eec <TIM_Base_SetConfig+0x28>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a28      	ldr	r2, [pc, #160]	; (8002f88 <TIM_Base_SetConfig+0xc4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d108      	bne.n	8002efe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a20      	ldr	r2, [pc, #128]	; (8002f84 <TIM_Base_SetConfig+0xc0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d007      	beq.n	8002f16 <TIM_Base_SetConfig+0x52>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0c:	d003      	beq.n	8002f16 <TIM_Base_SetConfig+0x52>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a1d      	ldr	r2, [pc, #116]	; (8002f88 <TIM_Base_SetConfig+0xc4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d108      	bne.n	8002f28 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a0d      	ldr	r2, [pc, #52]	; (8002f84 <TIM_Base_SetConfig+0xc0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d103      	bne.n	8002f5c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f023 0201 	bic.w	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	611a      	str	r2, [r3, #16]
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr
 8002f84:	40012c00 	.word	0x40012c00
 8002f88:	40000400 	.word	0x40000400

08002f8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	f023 0201 	bic.w	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f023 030a 	bic.w	r3, r3, #10
 8002fc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	621a      	str	r2, [r3, #32]
}
 8002fde:	bf00      	nop
 8002fe0:	371c      	adds	r7, #28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	f023 0210 	bic.w	r2, r3, #16
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	031b      	lsls	r3, r3, #12
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003024:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	621a      	str	r2, [r3, #32]
}
 800303c:	bf00      	nop
 800303e:	371c      	adds	r7, #28
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr

08003046 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003046:	b480      	push	{r7}
 8003048:	b085      	sub	sp, #20
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	f043 0307 	orr.w	r3, r3, #7
 8003068:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	609a      	str	r2, [r3, #8]
}
 8003070:	bf00      	nop
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr

0800307a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800307a:	b480      	push	{r7}
 800307c:	b087      	sub	sp, #28
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
 8003086:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003094:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	021a      	lsls	r2, r3, #8
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	431a      	orrs	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	609a      	str	r2, [r3, #8]
}
 80030ae:	bf00      	nop
 80030b0:	371c      	adds	r7, #28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr

080030b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e041      	b.n	8003154 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a14      	ldr	r2, [pc, #80]	; (8003160 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d009      	beq.n	8003128 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311c:	d004      	beq.n	8003128 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a10      	ldr	r2, [pc, #64]	; (8003164 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d10c      	bne.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800312e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	4313      	orrs	r3, r2
 8003138:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40012c00 	.word	0x40012c00
 8003164:	40000400 	.word	0x40000400

08003168 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr

0800317a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <__libc_init_array>:
 800318c:	b570      	push	{r4, r5, r6, lr}
 800318e:	2600      	movs	r6, #0
 8003190:	4d0c      	ldr	r5, [pc, #48]	; (80031c4 <__libc_init_array+0x38>)
 8003192:	4c0d      	ldr	r4, [pc, #52]	; (80031c8 <__libc_init_array+0x3c>)
 8003194:	1b64      	subs	r4, r4, r5
 8003196:	10a4      	asrs	r4, r4, #2
 8003198:	42a6      	cmp	r6, r4
 800319a:	d109      	bne.n	80031b0 <__libc_init_array+0x24>
 800319c:	f000 f822 	bl	80031e4 <_init>
 80031a0:	2600      	movs	r6, #0
 80031a2:	4d0a      	ldr	r5, [pc, #40]	; (80031cc <__libc_init_array+0x40>)
 80031a4:	4c0a      	ldr	r4, [pc, #40]	; (80031d0 <__libc_init_array+0x44>)
 80031a6:	1b64      	subs	r4, r4, r5
 80031a8:	10a4      	asrs	r4, r4, #2
 80031aa:	42a6      	cmp	r6, r4
 80031ac:	d105      	bne.n	80031ba <__libc_init_array+0x2e>
 80031ae:	bd70      	pop	{r4, r5, r6, pc}
 80031b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b4:	4798      	blx	r3
 80031b6:	3601      	adds	r6, #1
 80031b8:	e7ee      	b.n	8003198 <__libc_init_array+0xc>
 80031ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80031be:	4798      	blx	r3
 80031c0:	3601      	adds	r6, #1
 80031c2:	e7f2      	b.n	80031aa <__libc_init_array+0x1e>
 80031c4:	08003220 	.word	0x08003220
 80031c8:	08003220 	.word	0x08003220
 80031cc:	08003220 	.word	0x08003220
 80031d0:	08003224 	.word	0x08003224

080031d4 <memset>:
 80031d4:	4603      	mov	r3, r0
 80031d6:	4402      	add	r2, r0
 80031d8:	4293      	cmp	r3, r2
 80031da:	d100      	bne.n	80031de <memset+0xa>
 80031dc:	4770      	bx	lr
 80031de:	f803 1b01 	strb.w	r1, [r3], #1
 80031e2:	e7f9      	b.n	80031d8 <memset+0x4>

080031e4 <_init>:
 80031e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e6:	bf00      	nop
 80031e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ea:	bc08      	pop	{r3}
 80031ec:	469e      	mov	lr, r3
 80031ee:	4770      	bx	lr

080031f0 <_fini>:
 80031f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f2:	bf00      	nop
 80031f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f6:	bc08      	pop	{r3}
 80031f8:	469e      	mov	lr, r3
 80031fa:	4770      	bx	lr
